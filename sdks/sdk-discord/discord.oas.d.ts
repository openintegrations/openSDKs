/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/oauth2/applications/@me": {
    get: operations["get_my_oauth2_application"];
  };
  "/users/@me/connections": {
    get: operations["list_my_connections"];
  };
  "/users/@me/channels": {
    post: operations["create_dm"];
  };
  "/users/@me/guilds": {
    get: operations["list_my_guilds"];
  };
  "/applications/@me": {
    get: operations["get_my_application"];
    patch: operations["update_my_application"];
  };
  "/gateway/bot": {
    get: operations["get_bot_gateway"];
  };
  "/oauth2/@me": {
    get: operations["get_my_oauth2_authorization"];
  };
  "/voice/regions": {
    get: operations["list_voice_regions"];
  };
  "/users/@me": {
    get: operations["get_my_user"];
    patch: operations["update_my_user"];
  };
  "/stage-instances": {
    post: operations["create_stage_instance"];
  };
  "/sticker-packs": {
    get: operations["list_sticker_packs"];
  };
  "/gateway": {
    get: operations["get_gateway"];
  };
  "/guilds": {
    post: operations["create_guild"];
  };
  "/channels/{channel_id}/users/@me/threads/archived/private": {
    get: operations["list_my_private_archived_threads"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}/guilds/{guild_id}/commands/permissions": {
    get: operations["list_guild_application_command_permissions"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}/permissions": {
    get: operations["get_guild_application_command_permissions"];
    put: operations["set_guild_application_command_permissions"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/@me": {
    put: operations["add_my_message_reaction"];
    delete: operations["delete_my_message_reaction"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
      };
    };
  };
  "/channels/{channel_id}/threads/archived/private": {
    get: operations["list_private_archived_threads"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/threads/archived/public": {
    get: operations["list_public_archived_threads"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/users/@me/applications/{application_id}/role-connection": {
    get: operations["get_application_user_role_connection"];
    put: operations["update_application_user_role_connection"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/users/@me/guilds/{guild_id}/member": {
    get: operations["get_my_guild_member"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}/role-connections/metadata": {
    get: operations["get_application_role_connections_metadata"];
    put: operations["update_application_role_connections_metadata"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}/guilds/{guild_id}/commands/{command_id}": {
    get: operations["get_guild_application_command"];
    delete: operations["delete_guild_application_command"];
    patch: operations["update_guild_application_command"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}/guilds/{guild_id}/commands": {
    get: operations["list_guild_application_commands"];
    put: operations["bulk_set_guild_application_commands"];
    post: operations["create_guild_application_command"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/thread-members/@me": {
    put: operations["join_thread"];
    delete: operations["leave_thread"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages/bulk-delete": {
    post: operations["bulk_delete_messages"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}/{user_id}": {
    delete: operations["delete_user_message_reaction"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages/{message_id}/reactions/{emoji_name}": {
    get: operations["list_message_reactions_by_emoji"];
    delete: operations["delete_all_message_reactions_by_emoji"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
      };
    };
  };
  "/channels/{channel_id}/messages/{message_id}/reactions": {
    delete: operations["delete_all_message_reactions"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages/{message_id}/crosspost": {
    post: operations["crosspost_message"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages/{message_id}/threads": {
    post: operations["create_thread_from_message"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/webhooks/{webhook_id}/{webhook_token}/messages/@original": {
    get: operations["get_original_webhook_message"];
    delete: operations["delete_original_webhook_message"];
    patch: operations["update_original_webhook_message"];
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
  };
  "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}/users": {
    get: operations["list_guild_scheduled_event_users"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        guild_scheduled_event_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/auto-moderation/rules/{rule_id}": {
    get: operations["get_auto_moderation_rule"];
    delete: operations["delete_auto_moderation_rule"];
    patch: operations["update_auto_moderation_rule"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        rule_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/auto-moderation/rules": {
    get: operations["list_auto_moderation_rules"];
    post: operations["create_auto_moderation_rule"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/voice-states/@me": {
    patch: operations["update_self_voice_state"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/members/search": {
    get: operations["search_guild_members"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/threads/active": {
    get: operations["get_active_guild_threads"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/members/@me": {
    patch: operations["update_my_guild_member"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/members/{user_id}/roles/{role_id}": {
    put: operations["add_guild_member_role"];
    delete: operations["delete_guild_member_role"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
        role_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/users/@me/guilds/{guild_id}": {
    delete: operations["leave_guild"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}/commands/{command_id}": {
    get: operations["get_application_command"];
    delete: operations["delete_application_command"];
    patch: operations["update_application_command"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}/commands": {
    get: operations["list_application_commands"];
    put: operations["bulk_set_application_commands"];
    post: operations["create_application_command"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/interactions/{interaction_id}/{interaction_token}/callback": {
    post: operations["create_interaction_response"];
    parameters: {
      path: {
        interaction_id: components["schemas"]["SnowflakeType"];
        interaction_token: string;
      };
    };
  };
  "/channels/{channel_id}/thread-members/{user_id}": {
    get: operations["get_thread_member"];
    put: operations["add_thread_member"];
    delete: operations["delete_thread_member"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/thread-members": {
    get: operations["list_thread_members"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/permissions/{overwrite_id}": {
    put: operations["set_channel_permission_overwrite"];
    delete: operations["delete_channel_permission_overwrite"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        overwrite_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/recipients/{user_id}": {
    put: operations["add_group_dm_user"];
    delete: operations["delete_group_dm_user"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/followers": {
    post: operations["follow_channel"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages/{message_id}": {
    get: operations["get_message"];
    delete: operations["delete_message"];
    patch: operations["update_message"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/messages": {
    get: operations["list_messages"];
    post: operations["create_message"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/webhooks": {
    get: operations["list_channel_webhooks"];
    post: operations["create_webhook"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/invites": {
    get: operations["list_channel_invites"];
    post: operations["create_channel_invite"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/threads": {
    post: operations["create_thread"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/typing": {
    post: operations["trigger_typing_indicator"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/pins/{message_id}": {
    put: operations["pin_message"];
    delete: operations["unpin_message"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}/pins": {
    get: operations["list_pinned_messages"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/webhooks/{webhook_id}/{webhook_token}/messages/{message_id}": {
    get: operations["get_webhook_message"];
    delete: operations["delete_webhook_message"];
    patch: operations["update_webhook_message"];
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/webhooks/{webhook_id}/{webhook_token}/github": {
    post: operations["execute_github_compatible_webhook"];
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
  };
  "/webhooks/{webhook_id}/{webhook_token}/slack": {
    post: operations["execute_slack_compatible_webhook"];
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
  };
  "/guilds/templates/{code}": {
    get: operations["get_guild_template"];
    post: operations["create_guild_from_template"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/guilds/{guild_id}/new-member-welcome": {
    get: operations["get_guild_new_member_welcome"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/scheduled-events/{guild_scheduled_event_id}": {
    get: operations["get_guild_scheduled_event"];
    delete: operations["delete_guild_scheduled_event"];
    patch: operations["update_guild_scheduled_event"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        guild_scheduled_event_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/scheduled-events": {
    get: operations["list_guild_scheduled_events"];
    post: operations["create_guild_scheduled_event"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/welcome-screen": {
    get: operations["get_guild_welcome_screen"];
    patch: operations["update_guild_welcome_screen"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/voice-states/{user_id}": {
    patch: operations["update_voice_state"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/integrations/{integration_id}": {
    delete: operations["delete_guild_integration"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        integration_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/integrations": {
    get: operations["list_guild_integrations"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/widget.json": {
    get: operations["get_guild_widget"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/onboarding": {
    get: operations["get_guilds_onboarding"];
    put: operations["put_guilds_onboarding"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/vanity-url": {
    get: operations["get_guild_vanity_url"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/audit-logs": {
    get: operations["list_guild_audit_log_entries"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/widget.png": {
    get: operations["get_guild_widget_png"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/templates/{code}": {
    put: operations["sync_guild_template"];
    delete: operations["delete_guild_template"];
    patch: operations["update_guild_template"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        code: string;
      };
    };
  };
  "/guilds/{guild_id}/templates": {
    get: operations["list_guild_templates"];
    post: operations["create_guild_template"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/stickers/{sticker_id}": {
    get: operations["get_guild_sticker"];
    delete: operations["delete_guild_sticker"];
    patch: operations["update_guild_sticker"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        sticker_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/stickers": {
    get: operations["list_guild_stickers"];
    post: operations["create_guild_sticker"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/webhooks": {
    get: operations["get_guild_webhooks"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/channels": {
    get: operations["list_guild_channels"];
    post: operations["create_guild_channel"];
    patch: operations["bulk_update_guild_channels"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/members/{user_id}": {
    get: operations["get_guild_member"];
    put: operations["add_guild_member"];
    delete: operations["delete_guild_member"];
    patch: operations["update_guild_member"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/members": {
    get: operations["list_guild_members"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/preview": {
    get: operations["get_guild_preview"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/invites": {
    get: operations["list_guild_invites"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/regions": {
    get: operations["list_guild_voice_regions"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/emojis/{emoji_id}": {
    get: operations["get_guild_emoji"];
    delete: operations["delete_guild_emoji"];
    patch: operations["update_guild_emoji"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        emoji_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/emojis": {
    get: operations["list_guild_emojis"];
    post: operations["create_guild_emoji"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/widget": {
    get: operations["get_guild_widget_settings"];
    patch: operations["update_guild_widget_settings"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/roles/{role_id}": {
    delete: operations["delete_guild_role"];
    patch: operations["update_guild_role"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        role_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/roles": {
    get: operations["list_guild_roles"];
    post: operations["create_guild_role"];
    patch: operations["bulk_update_guild_roles"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/prune": {
    get: operations["preview_prune_guild"];
    post: operations["prune_guild"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/bans/{user_id}": {
    get: operations["get_guild_ban"];
    put: operations["ban_user_from_guild"];
    delete: operations["unban_user_from_guild"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/bans": {
    get: operations["list_guild_bans"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/guilds/{guild_id}/mfa": {
    post: operations["set_guild_mfa_level"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/stage-instances/{channel_id}": {
    get: operations["get_stage_instance"];
    delete: operations["delete_stage_instance"];
    patch: operations["update_stage_instance"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/applications/{application_id}": {
    get: operations["get_application"];
    patch: operations["update_application"];
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/webhooks/{webhook_id}/{webhook_token}": {
    get: operations["get_webhook_by_token"];
    post: operations["execute_webhook"];
    delete: operations["delete_webhook_by_token"];
    patch: operations["update_webhook_by_token"];
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
  };
  "/stickers/{sticker_id}": {
    get: operations["get_sticker"];
    parameters: {
      path: {
        sticker_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/webhooks/{webhook_id}": {
    get: operations["get_webhook"];
    delete: operations["delete_webhook"];
    patch: operations["update_webhook"];
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/channels/{channel_id}": {
    get: operations["get_channel"];
    delete: operations["delete_channel"];
    patch: operations["update_channel"];
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/invites/{code}": {
    get: operations["invite_resolve"];
    delete: operations["invite_revoke"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/guilds/{guild_id}": {
    get: operations["get_guild"];
    delete: operations["delete_guild"];
    patch: operations["update_guild"];
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
  "/users/{user_id}": {
    get: operations["get_user"];
    parameters: {
      path: {
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    AccountResponse: {
      id: string;
      name?: string | null;
    };
    ActionRow: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      components: (components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["InputText"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[];
    };
    /** Format: int32 */
    AfkTimeouts: 60 | 300 | 900 | 1800 | 3600;
    AllowedMentionTypes: "users" | "roles" | "everyone";
    ApplicationCommandAttachmentOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 11;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandAttachmentOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 11;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandAutocompleteCallbackRequest: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 8;
      data: components["schemas"]["InteractionApplicationCommandAutocompleteCallbackIntegerData"] | components["schemas"]["InteractionApplicationCommandAutocompleteCallbackNumberData"] | components["schemas"]["InteractionApplicationCommandAutocompleteCallbackStringData"];
    };
    ApplicationCommandBooleanOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 5;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandBooleanOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 5;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandChannelOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 7;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      channel_types?: components["schemas"]["ChannelTypes"][] | null;
    };
    ApplicationCommandChannelOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 7;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      channel_types?: components["schemas"]["ChannelTypes"][] | null;
    };
    ApplicationCommandCreateRequest: {
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      options?: ((components["schemas"]["ApplicationCommandAttachmentOption"] | components["schemas"]["ApplicationCommandBooleanOption"] | components["schemas"]["ApplicationCommandChannelOption"] | components["schemas"]["ApplicationCommandIntegerOption"] | components["schemas"]["ApplicationCommandMentionableOption"] | components["schemas"]["ApplicationCommandNumberOption"] | components["schemas"]["ApplicationCommandRoleOption"] | components["schemas"]["ApplicationCommandStringOption"] | components["schemas"]["ApplicationCommandSubcommandGroupOption"] | components["schemas"]["ApplicationCommandSubcommandOption"] | components["schemas"]["ApplicationCommandUserOption"])[]) | null;
      default_member_permissions?: number | null;
      dm_permission?: boolean | null;
      type?: null | components["schemas"]["ApplicationCommandType"];
    };
    ApplicationCommandIntegerOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 4;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      autocomplete?: boolean | null;
      choices?: components["schemas"]["ApplicationCommandOptionIntegerChoice"][] | null;
      min_value?: null | components["schemas"]["Int53Type"];
      max_value?: null | components["schemas"]["Int53Type"];
    };
    ApplicationCommandIntegerOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 4;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      autocomplete?: boolean | null;
      choices?: components["schemas"]["ApplicationCommandOptionIntegerChoiceResponse"][] | null;
      min_value?: null | components["schemas"]["Int53Type"];
      max_value?: null | components["schemas"]["Int53Type"];
    };
    ApplicationCommandMentionableOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 9;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandMentionableOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 9;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandNumberOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 10;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      autocomplete?: boolean | null;
      choices?: components["schemas"]["ApplicationCommandOptionNumberChoice"][] | null;
      /** Format: double */
      min_value?: number | null;
      /** Format: double */
      max_value?: number | null;
    };
    ApplicationCommandNumberOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 10;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      autocomplete?: boolean | null;
      choices?: components["schemas"]["ApplicationCommandOptionNumberChoiceResponse"][] | null;
      /** Format: double */
      min_value?: number | null;
      /** Format: double */
      max_value?: number | null;
    };
    ApplicationCommandOptionIntegerChoice: {
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      value: components["schemas"]["Int53Type"];
    };
    ApplicationCommandOptionIntegerChoiceResponse: {
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      value: components["schemas"]["Int53Type"];
    };
    ApplicationCommandOptionNumberChoice: {
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      /** Format: double */
      value: number;
    };
    ApplicationCommandOptionNumberChoiceResponse: {
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      /** Format: double */
      value: number;
    };
    ApplicationCommandOptionStringChoice: {
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      value: string;
    };
    ApplicationCommandOptionStringChoiceResponse: {
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      value: string;
    };
    /** Format: int32 */
    ApplicationCommandOptionType: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
    ApplicationCommandPatchRequestPartial: {
      name?: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      options?: ((components["schemas"]["ApplicationCommandAttachmentOption"] | components["schemas"]["ApplicationCommandBooleanOption"] | components["schemas"]["ApplicationCommandChannelOption"] | components["schemas"]["ApplicationCommandIntegerOption"] | components["schemas"]["ApplicationCommandMentionableOption"] | components["schemas"]["ApplicationCommandNumberOption"] | components["schemas"]["ApplicationCommandRoleOption"] | components["schemas"]["ApplicationCommandStringOption"] | components["schemas"]["ApplicationCommandSubcommandGroupOption"] | components["schemas"]["ApplicationCommandSubcommandOption"] | components["schemas"]["ApplicationCommandUserOption"])[]) | null;
      default_member_permissions?: number | null;
      dm_permission?: boolean | null;
    };
    ApplicationCommandPermission: {
      id: components["schemas"]["SnowflakeType"];
      type: components["schemas"]["ApplicationCommandPermissionType"];
      permission: boolean;
    };
    /** Format: int32 */
    ApplicationCommandPermissionType: 1 | 2 | 3;
    ApplicationCommandResponse: {
      id: components["schemas"]["SnowflakeType"];
      application_id: components["schemas"]["SnowflakeType"];
      version: components["schemas"]["SnowflakeType"];
      default_member_permissions?: string | null;
      type: components["schemas"]["ApplicationCommandType"];
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      guild_id?: null | components["schemas"]["SnowflakeType"];
      dm_permission?: boolean | null;
      options?: ((components["schemas"]["ApplicationCommandAttachmentOptionResponse"] | components["schemas"]["ApplicationCommandBooleanOptionResponse"] | components["schemas"]["ApplicationCommandChannelOptionResponse"] | components["schemas"]["ApplicationCommandIntegerOptionResponse"] | components["schemas"]["ApplicationCommandMentionableOptionResponse"] | components["schemas"]["ApplicationCommandNumberOptionResponse"] | components["schemas"]["ApplicationCommandRoleOptionResponse"] | components["schemas"]["ApplicationCommandStringOptionResponse"] | components["schemas"]["ApplicationCommandSubcommandGroupOptionResponse"] | components["schemas"]["ApplicationCommandSubcommandOptionResponse"] | components["schemas"]["ApplicationCommandUserOptionResponse"])[]) | null;
      nsfw?: boolean | null;
    };
    ApplicationCommandRoleOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 8;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandRoleOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 8;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandStringOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      autocomplete?: boolean | null;
      min_length?: number | null;
      max_length?: number | null;
      choices?: components["schemas"]["ApplicationCommandOptionStringChoice"][] | null;
    };
    ApplicationCommandStringOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      autocomplete?: boolean | null;
      choices?: components["schemas"]["ApplicationCommandOptionStringChoiceResponse"][] | null;
      /** Format: int32 */
      min_length?: number | null;
      /** Format: int32 */
      max_length?: number | null;
    };
    ApplicationCommandSubcommandGroupOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      options?: components["schemas"]["ApplicationCommandSubcommandOption"][] | null;
    };
    ApplicationCommandSubcommandGroupOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      options?: components["schemas"]["ApplicationCommandSubcommandOptionResponse"][] | null;
    };
    ApplicationCommandSubcommandOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      options?: ((components["schemas"]["ApplicationCommandAttachmentOption"] | components["schemas"]["ApplicationCommandBooleanOption"] | components["schemas"]["ApplicationCommandChannelOption"] | components["schemas"]["ApplicationCommandIntegerOption"] | components["schemas"]["ApplicationCommandMentionableOption"] | components["schemas"]["ApplicationCommandNumberOption"] | components["schemas"]["ApplicationCommandRoleOption"] | components["schemas"]["ApplicationCommandStringOption"] | components["schemas"]["ApplicationCommandUserOption"])[]) | null;
    };
    ApplicationCommandSubcommandOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
      options?: ((components["schemas"]["ApplicationCommandAttachmentOptionResponse"] | components["schemas"]["ApplicationCommandBooleanOptionResponse"] | components["schemas"]["ApplicationCommandChannelOptionResponse"] | components["schemas"]["ApplicationCommandIntegerOptionResponse"] | components["schemas"]["ApplicationCommandMentionableOptionResponse"] | components["schemas"]["ApplicationCommandNumberOptionResponse"] | components["schemas"]["ApplicationCommandRoleOptionResponse"] | components["schemas"]["ApplicationCommandStringOptionResponse"] | components["schemas"]["ApplicationCommandUserOptionResponse"])[]) | null;
    };
    /** Format: int32 */
    ApplicationCommandType: 1 | 2 | 3;
    ApplicationCommandUpdateRequest: {
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      options?: ((components["schemas"]["ApplicationCommandAttachmentOption"] | components["schemas"]["ApplicationCommandBooleanOption"] | components["schemas"]["ApplicationCommandChannelOption"] | components["schemas"]["ApplicationCommandIntegerOption"] | components["schemas"]["ApplicationCommandMentionableOption"] | components["schemas"]["ApplicationCommandNumberOption"] | components["schemas"]["ApplicationCommandRoleOption"] | components["schemas"]["ApplicationCommandStringOption"] | components["schemas"]["ApplicationCommandSubcommandGroupOption"] | components["schemas"]["ApplicationCommandSubcommandOption"] | components["schemas"]["ApplicationCommandUserOption"])[]) | null;
      default_member_permissions?: number | null;
      dm_permission?: boolean | null;
      type?: null | components["schemas"]["ApplicationCommandType"];
      id?: null | components["schemas"]["SnowflakeType"];
    };
    ApplicationCommandUserOption: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 6;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationCommandUserOptionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 6;
      name: string;
      name_localized?: string | null;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localized?: string | null;
      description_localizations?: {
        [key: string]: string;
      } | null;
      required?: boolean | null;
    };
    ApplicationFormPartial: {
      description?: ({
        default: string;
        localizations?: {
          [key: string]: string;
        } | null;
      }) | null;
      icon?: string | null;
      cover_image?: string | null;
      team_id?: null | components["schemas"]["SnowflakeType"];
      flags?: number | null;
      /** Format: uri */
      interactions_endpoint_url?: string | null;
      /** Format: int32 */
      max_participants?: number | null;
      type?: null | components["schemas"]["ApplicationTypes"];
      tags?: string[] | null;
      /** Format: uri */
      custom_install_url?: string | null;
      install_params?: null | components["schemas"]["ApplicationOAuth2Params"];
      /** Format: uri */
      role_connections_verification_url?: string | null;
    };
    ApplicationIncomingWebhookResponse: {
      application_id?: null | components["schemas"]["SnowflakeType"];
      avatar?: string | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      guild_id?: null | components["schemas"]["SnowflakeType"];
      id: components["schemas"]["SnowflakeType"];
      name: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      user?: null | components["schemas"]["UserResponse"];
    };
    ApplicationOAuth2Params: {
      scopes?: (("applications.commands" | "bot")[]) | null;
      permissions?: number | null;
    };
    ApplicationOAuth2ParamsResponse: {
      scopes: ("applications.commands" | "bot")[];
      permissions: string;
    };
    ApplicationResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description: string;
      type?: null | components["schemas"]["ApplicationTypes"];
      cover_image?: string | null;
      primary_sku_id?: null | components["schemas"]["SnowflakeType"];
      bot?: null | components["schemas"]["UserResponse"];
      slug?: string | null;
      guild_id?: null | components["schemas"]["SnowflakeType"];
      rpc_origins?: ((string | null)[]) | null;
      bot_public?: boolean | null;
      bot_require_code_grant?: boolean | null;
      /** Format: uri */
      terms_of_service_url?: string | null;
      /** Format: uri */
      privacy_policy_url?: string | null;
      /** Format: uri */
      custom_install_url?: string | null;
      install_params?: null | components["schemas"]["ApplicationOAuth2ParamsResponse"];
      verify_key: string;
      /** Format: int32 */
      flags: number;
      /** Format: int32 */
      max_participants?: number | null;
      tags?: string[] | null;
    };
    ApplicationRoleConnectionsMetadataItemRequest: {
      type: components["schemas"]["MetadataItemTypes"];
      key: string;
      name: string;
      name_localizations?: ({
        [key: string]: string | null;
      }) | null;
      description: string;
      description_localizations?: ({
        [key: string]: string | null;
      }) | null;
    };
    ApplicationRoleConnectionsMetadataItemResponse: {
      type: components["schemas"]["MetadataItemTypes"];
      key: string;
      name: string;
      name_localizations?: {
        [key: string]: string;
      } | null;
      description: string;
      description_localizations?: {
        [key: string]: string;
      } | null;
    };
    /** Format: int32 */
    ApplicationTypes: 4;
    ApplicationUserRoleConnectionResponse: {
      platform_name?: string | null;
      platform_username?: string | null;
      metadata?: {
        [key: string]: string;
      } | null;
    };
    /** Format: int32 */
    AuditLogActionTypes: 1 | 10 | 11 | 12 | 13 | 14 | 15 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 30 | 31 | 32 | 40 | 41 | 42 | 50 | 51 | 52 | 60 | 61 | 62 | 72 | 73 | 74 | 75 | 80 | 81 | 82 | 83 | 84 | 85 | 90 | 91 | 92 | 100 | 101 | 102 | 110 | 111 | 112 | 121 | 130 | 131 | 132 | 140 | 141 | 142 | 143 | 144 | 145 | 146 | 150 | 151 | 163 | 164 | 165 | 166 | 167 | 171 | 172 | 180 | 190 | 191 | 192 | 193;
    AuditLogEntryResponse: {
      id: components["schemas"]["SnowflakeType"];
      action_type: components["schemas"]["AuditLogActionTypes"];
      user_id?: null | components["schemas"]["SnowflakeType"];
      target_id?: null | components["schemas"]["SnowflakeType"];
      changes?: components["schemas"]["AuditLogObjectChangeResponse"][] | null;
      options?: {
        [key: string]: string;
      } | null;
      reason?: string | null;
    };
    AuditLogObjectChangeResponse: {
      key?: string | null;
      new_value?: unknown;
      old_value?: unknown;
    };
    /** Format: int32 */
    AutomodActionType: 1 | 2 | 3 | 4;
    /** Format: int32 */
    AutomodEventType: 1 | 2;
    /** Format: int32 */
    AutomodKeywordPresetType: 1 | 2 | 3;
    /** Format: int32 */
    AutomodTriggerType: 1 | 2 | 3 | 4 | 5;
    AvailableLocalesEnum: "ar" | "bg" | "cs" | "da" | "de" | "el" | "en-GB" | "en-US" | "es-ES" | "fi" | "fr" | "he" | "hi" | "hr" | "hu" | "id" | "it" | "ja" | "ko" | "lt" | "nl" | "no" | "pl" | "pt-BR" | "ro" | "ru" | "sv-SE" | "th" | "tr" | "uk" | "vi" | "zh-CN" | "zh-TW";
    BaseCreateMessageCreateRequest: {
      content?: string | null;
      embeds?: components["schemas"]["RichEmbed"][] | null;
      allowed_mentions?: null | components["schemas"]["MessageAllowedMentionsRequest"];
      sticker_ids?: components["schemas"]["SnowflakeType"][] | null;
      components?: ((components["schemas"]["ActionRow"] | components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[]) | null;
      flags?: number | null;
      attachments?: components["schemas"]["MessageAttachmentRequest"][] | null;
    };
    BasicApplicationResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description: string;
      type?: null | components["schemas"]["ApplicationTypes"];
      cover_image?: string | null;
      primary_sku_id?: null | components["schemas"]["SnowflakeType"];
      bot?: null | components["schemas"]["UserResponse"];
    };
    BasicMessageResponse: {
      id: components["schemas"]["SnowflakeType"];
      type: components["schemas"]["MessageType"];
      content: string;
      channel_id: components["schemas"]["SnowflakeType"];
      author: components["schemas"]["UserResponse"];
      attachments: components["schemas"]["MessageAttachmentResponse"][];
      embeds: components["schemas"]["MessageEmbedResponse"][];
      mentions: components["schemas"]["UserResponse"][];
      mention_roles: components["schemas"]["SnowflakeType"][];
      pinned: boolean;
      mention_everyone: boolean;
      tts: boolean;
      /** Format: date-time */
      timestamp: string;
      /** Format: date-time */
      edited_timestamp?: string | null;
      /** Format: int32 */
      flags: number;
      components: (components["schemas"]["MessageComponentActionRowResponse"] | components["schemas"]["MessageComponentButtonResponse"] | components["schemas"]["MessageComponentChannelSelectResponse"] | components["schemas"]["MessageComponentInputTextResponse"] | components["schemas"]["MessageComponentMentionableSelectResponse"] | components["schemas"]["MessageComponentRoleSelectResponse"] | components["schemas"]["MessageComponentStringSelectResponse"] | components["schemas"]["MessageComponentUserSelectResponse"])[];
      activity?: null | components["schemas"]["MessageActivityResponse"];
      application?: null | components["schemas"]["BasicApplicationResponse"];
      application_id?: null | components["schemas"]["SnowflakeType"];
      interaction?: null | components["schemas"]["MessageInteractionResponse"];
      nonce?: number | string | null;
      webhook_id?: null | components["schemas"]["SnowflakeType"];
      message_reference?: null | components["schemas"]["MessageReferenceResponse"];
      thread?: null | components["schemas"]["ThreadResponse"];
      mention_channels?: ((null | components["schemas"]["MessageMentionChannelResponse"])[]) | null;
      stickers?: ((components["schemas"]["GuildStickerResponse"] | components["schemas"]["StandardStickerResponse"])[]) | null;
      sticker_items?: components["schemas"]["MessageStickerItemResponse"][] | null;
      role_subscription_data?: null | components["schemas"]["MessageRoleSubscriptionDataResponse"];
      purchase_notification?: null | components["schemas"]["PurchaseNotificationResponse"];
      /** Format: int32 */
      position?: number | null;
      resolved?: null | components["schemas"]["ResolvedObjectsResponse"];
    };
    BlockMessageAction: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      metadata?: null | components["schemas"]["BlockMessageActionMetadata"];
    };
    BlockMessageActionMetadata: {
      custom_message?: string | null;
    };
    BlockMessageActionMetadataResponse: {
      custom_message?: string | null;
    };
    BlockMessageActionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      metadata: components["schemas"]["BlockMessageActionMetadataResponse"];
    };
    BotAccountPatchRequest: {
      username: string;
      avatar?: string | null;
    };
    Button: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      custom_id?: string | null;
      style: components["schemas"]["ButtonStyleTypes"];
      label?: string | null;
      disabled?: boolean | null;
      emoji?: null | components["schemas"]["Emoji"];
      /** Format: uri */
      url?: string | null;
    };
    /** Format: int32 */
    ButtonStyleTypes: 1 | 2 | 3 | 4 | 5;
    ChannelFollowerResponse: {
      channel_id: components["schemas"]["SnowflakeType"];
      webhook_id: components["schemas"]["SnowflakeType"];
    };
    ChannelFollowerWebhookResponse: {
      application_id?: null | components["schemas"]["SnowflakeType"];
      avatar?: string | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      guild_id?: null | components["schemas"]["SnowflakeType"];
      id: components["schemas"]["SnowflakeType"];
      name: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      user?: null | components["schemas"]["UserResponse"];
      source_guild?: null | components["schemas"]["WebhookSourceGuildResponse"];
      source_channel?: null | components["schemas"]["WebhookSourceChannelResponse"];
    };
    ChannelPermissionOverwriteRequest: {
      id: components["schemas"]["SnowflakeType"];
      type?: null | components["schemas"]["ChannelPermissionOverwrites"];
      allow?: number | null;
      deny?: number | null;
    };
    ChannelPermissionOverwriteResponse: {
      id: components["schemas"]["SnowflakeType"];
      type: components["schemas"]["ChannelPermissionOverwrites"];
      allow: string;
      deny: string;
    };
    /** Format: int32 */
    ChannelPermissionOverwrites: 0 | 1;
    ChannelSelect: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 8;
      custom_id: string;
      placeholder?: string | null;
      min_values?: number | null;
      max_values?: number | null;
      disabled?: boolean | null;
      default_values?: components["schemas"]["ChannelSelectDefaultValue"][] | null;
      channel_types?: components["schemas"]["ChannelTypes"][] | null;
    };
    ChannelSelectDefaultValue: {
      type: components["schemas"]["SnowflakeSelectDefaultValueTypes"];
      id: components["schemas"]["SnowflakeType"];
    };
    /** Format: int32 */
    ChannelTypes: 1 | 3 | 0 | 2 | 4 | 5 | 10 | 11 | 12 | 13 | 14 | 15;
    CommandPermissionResponse: {
      id: components["schemas"]["SnowflakeType"];
      type: components["schemas"]["ApplicationCommandPermissionType"];
      permission: boolean;
    };
    CommandPermissionsResponse: {
      id: components["schemas"]["SnowflakeType"];
      application_id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      permissions: components["schemas"]["CommandPermissionResponse"][];
    };
    ConnectedAccountGuildResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
    };
    ConnectedAccountIntegrationResponse: {
      id: string;
      type: components["schemas"]["IntegrationTypes"];
      account: components["schemas"]["AccountResponse"];
      guild: components["schemas"]["ConnectedAccountGuildResponse"];
    };
    ConnectedAccountProviders: "battlenet" | "ebay" | "epicgames" | "facebook" | "github" | "instagram" | "leagueoflegends" | "paypal" | "playstation" | "reddit" | "riotgames" | "skype" | "spotify" | "steam" | "tiktok" | "twitch" | "twitter" | "xbox" | "youtube";
    ConnectedAccountResponse: {
      id: string;
      name?: string | null;
      type: components["schemas"]["ConnectedAccountProviders"];
      friend_sync: boolean;
      integrations?: components["schemas"]["ConnectedAccountIntegrationResponse"][] | null;
      show_activity: boolean;
      two_way_link: boolean;
      verified: boolean;
      visibility: components["schemas"]["ConnectedAccountVisibility"];
      revoked?: boolean | null;
    };
    /** Format: int32 */
    ConnectedAccountVisibility: 0 | 1;
    CreateForumThreadRequest: {
      name: string;
      auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      rate_limit_per_user?: number | null;
      applied_tags?: components["schemas"]["SnowflakeType"][] | null;
      message: components["schemas"]["BaseCreateMessageCreateRequest"];
    };
    CreateGroupDMInviteRequest: {
      max_age?: number | null;
    };
    CreateGuildChannelRequest: {
      type?: null | (0 | 2 | 4 | 5 | 13 | 14 | 15);
      name: string;
      /** Format: int32 */
      position?: number | null;
      topic?: string | null;
      /** Format: int32 */
      bitrate?: number | null;
      /** Format: int32 */
      user_limit?: number | null;
      nsfw?: boolean | null;
      rate_limit_per_user?: number | null;
      parent_id?: null | components["schemas"]["SnowflakeType"];
      permission_overwrites?: components["schemas"]["ChannelPermissionOverwriteRequest"][] | null;
      rtc_region?: string | null;
      video_quality_mode?: null | components["schemas"]["VideoQualityModes"];
      default_auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      default_reaction_emoji?: null | components["schemas"]["UpdateDefaultReactionEmojiRequest"];
      default_thread_rate_limit_per_user?: number | null;
      default_sort_order?: null | components["schemas"]["ThreadSortOrder"];
      default_forum_layout?: null | components["schemas"]["ForumLayout"];
      available_tags?: ((null | components["schemas"]["CreateOrUpdateThreadTagRequest"])[]) | null;
    };
    CreateGuildInviteRequest: {
      max_age?: number | null;
      temporary?: boolean | null;
      max_uses?: number | null;
      unique?: boolean | null;
      target_user_id?: null | components["schemas"]["SnowflakeType"];
      target_application_id?: null | components["schemas"]["SnowflakeType"];
      target_type?: null | (1 | 2);
    };
    CreateGuildRequestChannelItem: {
      type?: null | (0 | 2 | 4);
      name: string;
      /** Format: int32 */
      position?: number | null;
      topic?: string | null;
      /** Format: int32 */
      bitrate?: number | null;
      /** Format: int32 */
      user_limit?: number | null;
      nsfw?: boolean | null;
      rate_limit_per_user?: number | null;
      parent_id?: null | components["schemas"]["SnowflakeType"];
      permission_overwrites?: components["schemas"]["ChannelPermissionOverwriteRequest"][] | null;
      rtc_region?: string | null;
      video_quality_mode?: null | components["schemas"]["VideoQualityModes"];
      default_auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      default_reaction_emoji?: null | components["schemas"]["UpdateDefaultReactionEmojiRequest"];
      default_thread_rate_limit_per_user?: number | null;
      default_sort_order?: null | components["schemas"]["ThreadSortOrder"];
      default_forum_layout?: null | components["schemas"]["ForumLayout"];
      id?: null | components["schemas"]["SnowflakeType"];
      available_tags?: components["schemas"]["CreateOrUpdateThreadTagRequest"][] | null;
    };
    CreateGuildRequestRoleItem: {
      id: number;
      name?: string | null;
      permissions?: number | null;
      color?: number | null;
      hoist?: boolean | null;
      mentionable?: boolean | null;
      unicode_emoji?: string | null;
    };
    CreateMessageInteractionCallbackRequest: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 4 | 5;
      data?: null | components["schemas"]["IncomingWebhookInteractionRequest"];
    };
    CreateOrUpdateThreadTagRequest: {
      name: string;
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
      moderated?: boolean | null;
    };
    CreatePrivateChannelRequest: {
      recipient_id?: null | components["schemas"]["SnowflakeType"];
      access_tokens?: string[] | null;
      nicks?: ({
        [key: string]: string | null;
      }) | null;
    };
    CreateTextThreadWithMessageRequest: {
      name: string;
      auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      rate_limit_per_user?: number | null;
    };
    CreateTextThreadWithoutMessageRequest: {
      name: string;
      auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      rate_limit_per_user?: number | null;
      type?: null | (10 | 11 | 12);
      invitable?: boolean | null;
    };
    CreatedThreadResponse: {
      id: components["schemas"]["SnowflakeType"];
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 10 | 11 | 12;
      last_message_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      flags: number;
      /** Format: date-time */
      last_pin_timestamp?: string | null;
      guild_id: components["schemas"]["SnowflakeType"];
      name: string;
      parent_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      rate_limit_per_user?: number | null;
      /** Format: int32 */
      bitrate?: number | null;
      /** Format: int32 */
      user_limit?: number | null;
      rtc_region?: string | null;
      video_quality_mode?: null | components["schemas"]["VideoQualityModes"];
      permissions?: string | null;
      owner_id: components["schemas"]["SnowflakeType"];
      thread_metadata?: null | components["schemas"]["ThreadMetadataResponse"];
      /** Format: int32 */
      message_count: number;
      /** Format: int32 */
      member_count: number;
      /** Format: int32 */
      total_message_sent: number;
      applied_tags?: components["schemas"]["SnowflakeType"][] | null;
      member?: null | components["schemas"]["ThreadMemberResponse"];
    };
    DefaultKeywordListTriggerMetadata: {
      allow_list?: string[] | null;
      presets?: components["schemas"]["AutomodKeywordPresetType"][] | null;
    };
    DefaultKeywordListTriggerMetadataResponse: {
      allow_list: string[];
      presets: components["schemas"]["AutomodKeywordPresetType"][];
    };
    DefaultKeywordListUpsertRequest: {
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 4;
      trigger_metadata: components["schemas"]["DefaultKeywordListTriggerMetadata"];
    };
    DefaultKeywordListUpsertRequestPartial: {
      name?: string;
      event_type?: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type?: 4;
      trigger_metadata?: components["schemas"]["DefaultKeywordListTriggerMetadata"];
    };
    DefaultKeywordRuleResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      creator_id: components["schemas"]["SnowflakeType"];
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions: (components["schemas"]["BlockMessageActionResponse"] | components["schemas"]["FlagToChannelActionResponse"] | components["schemas"]["QuarantineUserActionResponse"] | components["schemas"]["UserCommunicationDisabledActionResponse"])[];
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 4;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      trigger_metadata: components["schemas"]["DefaultKeywordListTriggerMetadataResponse"];
    };
    DefaultReactionEmojiResponse: {
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
    };
    DiscordIntegrationResponse: {
      /** @enum {string} */
      type: "discord";
      name?: string | null;
      account?: null | components["schemas"]["AccountResponse"];
      enabled?: boolean | null;
      id: components["schemas"]["SnowflakeType"];
      application: components["schemas"]["IntegrationApplicationResponse"];
      scopes: ("applications.commands" | "bot" | "webhook.incoming")[];
      user?: null | components["schemas"]["UserResponse"];
    };
    Emoji: {
      id?: null | components["schemas"]["SnowflakeType"];
      name: string;
      animated?: boolean | null;
    };
    EmojiResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      user?: null | components["schemas"]["UserResponse"];
      roles: components["schemas"]["SnowflakeType"][];
      require_colons: boolean;
      managed: boolean;
      animated: boolean;
      available: boolean;
    };
    EntityMetadataExternal: {
      location: string;
    };
    EntityMetadataExternalResponse: {
      location: string;
    };
    EntityMetadataStageInstance: Record<string, never>;
    EntityMetadataStageInstanceResponse: Record<string, never>;
    EntityMetadataVoice: Record<string, never>;
    EntityMetadataVoiceResponse: Record<string, never>;
    ExternalConnectionIntegrationResponse: {
      /** @enum {string} */
      type: "twitch" | "youtube";
      name?: string | null;
      account?: null | components["schemas"]["AccountResponse"];
      enabled?: boolean | null;
      id: string;
      user: components["schemas"]["UserResponse"];
      revoked?: boolean | null;
      expire_behavior?: null | components["schemas"]["IntegrationExpireBehaviorTypes"];
      expire_grace_period?: null | components["schemas"]["IntegrationExpireGracePeriodTypes"];
      /** Format: int32 */
      subscriber_count?: number | null;
      /** Format: date-time */
      synced_at?: string | null;
      role_id?: null | components["schemas"]["SnowflakeType"];
      syncing?: boolean | null;
      enable_emoticons?: boolean | null;
    };
    ExternalScheduledEventCreateRequest: {
      name: string;
      description?: string | null;
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      privacy_level: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      /**
       * Format: int32
       * @enum {integer}
       */
      entity_type: 3;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      entity_metadata: components["schemas"]["EntityMetadataExternal"];
    };
    ExternalScheduledEventPatchRequestPartial: {
      status?: null | components["schemas"]["GuildScheduledEventStatuses"];
      name?: string;
      description?: string | null;
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time?: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      entity_type?: null | 3;
      privacy_level?: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      channel_id?: null | components["schemas"]["SnowflakeType"];
      entity_metadata?: components["schemas"]["EntityMetadataExternal"];
    };
    ExternalScheduledEventResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      name: string;
      description?: string | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      creator_id?: null | components["schemas"]["SnowflakeType"];
      creator?: null | components["schemas"]["UserResponse"];
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      status: components["schemas"]["GuildScheduledEventStatuses"];
      /**
       * Format: int32
       * @enum {integer}
       */
      entity_type: 3;
      entity_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      user_count?: number | null;
      privacy_level: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      user_rsvp?: null | components["schemas"]["ScheduledEventUserResponse"];
      auto_start: boolean;
      entity_metadata: components["schemas"]["EntityMetadataExternalResponse"];
    };
    FlagToChannelAction: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      metadata: components["schemas"]["FlagToChannelActionMetadata"];
    };
    FlagToChannelActionMetadata: {
      channel_id: components["schemas"]["SnowflakeType"];
    };
    FlagToChannelActionMetadataResponse: {
      channel_id: components["schemas"]["SnowflakeType"];
    };
    FlagToChannelActionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      metadata: components["schemas"]["FlagToChannelActionMetadataResponse"];
    };
    /** Format: int32 */
    ForumLayout: 0 | 1 | 2;
    ForumTagResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      moderated: boolean;
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
    };
    FriendInviteResponse: {
      type?: null | 2;
      code: string;
      inviter?: null | components["schemas"]["UserResponse"];
      /** Format: int32 */
      max_age?: number | null;
      /** Format: date-time */
      created_at?: string | null;
      /** Format: date-time */
      expires_at?: string | null;
      /** Format: int32 */
      friends_count?: number | null;
      channel?: null | components["schemas"]["InviteChannelResponse"];
      is_contact?: boolean | null;
      /** Format: int32 */
      uses?: number | null;
      /** Format: int32 */
      max_uses?: number | null;
      /** Format: int32 */
      flags?: number | null;
    };
    GatewayBotResponse: {
      /** Format: uri */
      url: string;
      session_start_limit: components["schemas"]["GatewayBotSessionStartLimitResponse"];
      /** Format: int32 */
      shards: number;
    };
    GatewayBotSessionStartLimitResponse: {
      /** Format: int32 */
      max_concurrency: number;
      /** Format: int32 */
      remaining: number;
      /** Format: int32 */
      reset_after: number;
      /** Format: int32 */
      total: number;
    };
    GatewayResponse: {
      /** Format: uri */
      url: string;
    };
    GithubAuthor: {
      username?: string | null;
      name: string;
    };
    GithubCheckApp: {
      name: string;
    };
    GithubCheckPullRequest: {
      number: number;
    };
    GithubCheckRun: {
      conclusion?: string | null;
      name: string;
      /** Format: uri */
      html_url: string;
      check_suite: components["schemas"]["GithubCheckSuite"];
      /** Format: uri */
      details_url?: string | null;
      output?: null | components["schemas"]["GithubCheckRunOutput"];
      pull_requests?: components["schemas"]["GithubCheckPullRequest"][] | null;
    };
    GithubCheckRunOutput: {
      title?: string | null;
      summary?: string | null;
    };
    GithubCheckSuite: {
      conclusion?: string | null;
      head_branch?: string | null;
      head_sha: string;
      pull_requests?: components["schemas"]["GithubCheckPullRequest"][] | null;
      app: components["schemas"]["GithubCheckApp"];
    };
    GithubComment: {
      id: number;
      /** Format: uri */
      html_url: string;
      user: components["schemas"]["GithubUser"];
      commit_id?: string | null;
      body: string;
    };
    GithubCommit: {
      id: string;
      /** Format: uri */
      url: string;
      message: string;
      author: components["schemas"]["GithubAuthor"];
    };
    GithubDiscussion: {
      title: string;
      number: number;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      answer_html_url?: string | null;
      body?: string | null;
      user: components["schemas"]["GithubUser"];
    };
    GithubIssue: {
      id: number;
      number: number;
      /** Format: uri */
      html_url: string;
      user: components["schemas"]["GithubUser"];
      title: string;
      body?: string | null;
      pull_request?: unknown;
    };
    GithubRelease: {
      id: number;
      tag_name: string;
      /** Format: uri */
      html_url: string;
      author: components["schemas"]["GithubUser"];
    };
    GithubRepository: {
      id: number;
      /** Format: uri */
      html_url: string;
      name: string;
      full_name: string;
    };
    GithubReview: {
      user: components["schemas"]["GithubUser"];
      body?: string | null;
      /** Format: uri */
      html_url: string;
      state: string;
    };
    GithubUser: {
      id: number;
      login: string;
      /** Format: uri */
      html_url: string;
      /** Format: uri */
      avatar_url: string;
    };
    GithubWebhook: {
      action?: string | null;
      ref?: string | null;
      ref_type?: string | null;
      comment?: null | components["schemas"]["GithubComment"];
      issue?: null | components["schemas"]["GithubIssue"];
      pull_request?: null | components["schemas"]["GithubIssue"];
      repository?: null | components["schemas"]["GithubRepository"];
      forkee?: null | components["schemas"]["GithubRepository"];
      sender: components["schemas"]["GithubUser"];
      member?: null | components["schemas"]["GithubUser"];
      release?: null | components["schemas"]["GithubRelease"];
      head_commit?: null | components["schemas"]["GithubCommit"];
      commits?: components["schemas"]["GithubCommit"][] | null;
      forced?: boolean | null;
      /** Format: uri */
      compare?: string | null;
      review?: null | components["schemas"]["GithubReview"];
      check_run?: null | components["schemas"]["GithubCheckRun"];
      check_suite?: null | components["schemas"]["GithubCheckSuite"];
      discussion?: null | components["schemas"]["GithubDiscussion"];
      answer?: null | components["schemas"]["GithubComment"];
    };
    GroupDMInviteResponse: {
      type?: null | 1;
      code: string;
      inviter?: null | components["schemas"]["UserResponse"];
      /** Format: int32 */
      max_age?: number | null;
      /** Format: date-time */
      created_at?: string | null;
      /** Format: date-time */
      expires_at?: string | null;
      channel?: null | components["schemas"]["InviteChannelResponse"];
      /** Format: int32 */
      approximate_member_count?: number | null;
    };
    GuildAuditLogResponse: {
      audit_log_entries: components["schemas"]["AuditLogEntryResponse"][];
      users: components["schemas"]["UserResponse"][];
      integrations: (components["schemas"]["PartialDiscordIntegrationResponse"] | components["schemas"]["PartialExternalConnectionIntegrationResponse"] | components["schemas"]["PartialGuildSubscriptionIntegrationResponse"])[];
      webhooks: (components["schemas"]["ApplicationIncomingWebhookResponse"] | components["schemas"]["ChannelFollowerWebhookResponse"] | components["schemas"]["GuildIncomingWebhookResponse"])[];
      guild_scheduled_events: (components["schemas"]["ExternalScheduledEventResponse"] | components["schemas"]["StageScheduledEventResponse"] | components["schemas"]["VoiceScheduledEventResponse"])[];
      threads: components["schemas"]["ThreadResponse"][];
      application_commands: components["schemas"]["ApplicationCommandResponse"][];
      auto_moderation_rules: (components["schemas"]["DefaultKeywordRuleResponse"] | components["schemas"]["KeywordRuleResponse"] | components["schemas"]["MLSpamRuleResponse"] | components["schemas"]["MentionSpamRuleResponse"] | components["schemas"]["SpamLinkRuleResponse"] | null)[];
    };
    GuildBanResponse: {
      user: components["schemas"]["UserResponse"];
      reason?: string | null;
    };
    GuildChannelResponse: {
      id: components["schemas"]["SnowflakeType"];
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 0 | 2 | 4 | 5 | 13 | 14 | 15;
      last_message_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      flags: number;
      /** Format: date-time */
      last_pin_timestamp?: string | null;
      guild_id: components["schemas"]["SnowflakeType"];
      name: string;
      parent_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      rate_limit_per_user?: number | null;
      /** Format: int32 */
      bitrate?: number | null;
      /** Format: int32 */
      user_limit?: number | null;
      rtc_region?: string | null;
      video_quality_mode?: null | components["schemas"]["VideoQualityModes"];
      permissions?: string | null;
      topic?: string | null;
      default_auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      /** Format: int32 */
      default_thread_rate_limit_per_user?: number | null;
      /** Format: int32 */
      position: number;
      permission_overwrites?: components["schemas"]["ChannelPermissionOverwriteResponse"][] | null;
      nsfw?: boolean | null;
      available_tags?: components["schemas"]["ForumTagResponse"][] | null;
      default_reaction_emoji?: null | components["schemas"]["DefaultReactionEmojiResponse"];
      default_sort_order?: null | components["schemas"]["ThreadSortOrder"];
      default_forum_layout?: null | components["schemas"]["ForumLayout"];
    };
    GuildCreateRequest: {
      name: string;
      description?: string | null;
      region?: string | null;
      icon?: string | null;
      verification_level?: null | components["schemas"]["VerificationLevels"];
      default_message_notifications?: null | components["schemas"]["UserNotificationSettings"];
      explicit_content_filter?: null | components["schemas"]["GuildExplicitContentFilterTypes"];
      preferred_locale?: null | components["schemas"]["AvailableLocalesEnum"];
      afk_timeout?: null | components["schemas"]["AfkTimeouts"];
      roles?: components["schemas"]["CreateGuildRequestRoleItem"][] | null;
      channels?: components["schemas"]["CreateGuildRequestChannelItem"][] | null;
      afk_channel_id?: null | components["schemas"]["SnowflakeType"];
      system_channel_id?: null | components["schemas"]["SnowflakeType"];
      system_channel_flags?: number | null;
    };
    /** Format: int32 */
    GuildExplicitContentFilterTypes: 0 | 1 | 2;
    GuildFeatures: "ANIMATED_BANNER" | "ANIMATED_ICON" | "APPLICATION_COMMAND_PERMISSIONS_V2" | "AUTO_MODERATION" | "BANNER" | "COMMUNITY" | "CREATOR_MONETIZABLE_PROVISIONAL" | "CREATOR_STORE_PAGE" | "DEVELOPER_SUPPORT_SERVER" | "DISCOVERABLE" | "FEATURABLE" | "INVITES_DISABLED" | "INVITE_SPLASH" | "MEMBER_VERIFICATION_GATE_ENABLED" | "MORE_STICKERS" | "NEWS" | "PARTNERED" | "PREVIEW_ENABLED" | "RAID_ALERTS_DISABLED" | "ROLE_ICONS" | "ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE" | "ROLE_SUBSCRIPTIONS_ENABLED" | "TICKETED_EVENTS_ENABLED" | "VANITY_URL" | "VERIFIED" | "VIP_REGIONS" | "WELCOME_SCREEN_ENABLED";
    GuildHomeSettingsResponse: {
      guild_id: components["schemas"]["SnowflakeType"];
      enabled: boolean;
      welcome_message?: null | components["schemas"]["WelcomeMessageResponse"];
      new_member_actions?: ((null | components["schemas"]["NewMemberActionResponse"])[]) | null;
      resource_channels?: ((null | components["schemas"]["ResourceChannelResponse"])[]) | null;
    };
    GuildIncomingWebhookResponse: {
      application_id?: null | components["schemas"]["SnowflakeType"];
      avatar?: string | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      guild_id?: null | components["schemas"]["SnowflakeType"];
      id: components["schemas"]["SnowflakeType"];
      name: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      user?: null | components["schemas"]["UserResponse"];
      token?: string | null;
      /** Format: uri */
      url?: string | null;
    };
    GuildInviteResponse: {
      type?: null | 0;
      code: string;
      inviter?: null | components["schemas"]["UserResponse"];
      /** Format: int32 */
      max_age?: number | null;
      /** Format: date-time */
      created_at?: string | null;
      /** Format: date-time */
      expires_at?: string | null;
      is_contact?: boolean | null;
      /** Format: int32 */
      flags?: number | null;
      guild?: null | components["schemas"]["InviteGuildResponse"];
      guild_id?: null | components["schemas"]["SnowflakeType"];
      channel?: null | components["schemas"]["InviteChannelResponse"];
      stage_instance?: null | components["schemas"]["InviteStageInstanceResponse"];
      target_type?: null | components["schemas"]["InviteTargetTypes"];
      target_user?: null | components["schemas"]["UserResponse"];
      target_application?: null | components["schemas"]["InviteApplicationResponse"];
      guild_scheduled_event?: null | components["schemas"]["ScheduledEventResponse"];
      /** Format: int32 */
      uses?: number | null;
      /** Format: int32 */
      max_uses?: number | null;
      temporary?: boolean | null;
      /** Format: int32 */
      approximate_member_count?: number | null;
      /** Format: int32 */
      approximate_presence_count?: number | null;
    };
    /** Format: int32 */
    GuildMFALevel: 0 | 1;
    GuildMFALevelResponse: {
      level: components["schemas"]["GuildMFALevel"];
    };
    GuildMemberResponse: {
      avatar?: string | null;
      /** Format: date-time */
      communication_disabled_until?: string | null;
      /** Format: int32 */
      flags: number;
      /** Format: date-time */
      joined_at: string;
      nick?: string | null;
      pending: boolean;
      /** Format: date-time */
      premium_since?: string | null;
      roles: components["schemas"]["SnowflakeType"][];
      user: components["schemas"]["UserResponse"];
      mute: boolean;
      deaf: boolean;
    };
    /** Format: int32 */
    GuildNSFWContentLevel: 0 | 1 | 2 | 3;
    /** Format: int32 */
    GuildOnboardingMode: 0 | 1;
    GuildOnboardingResponse: {
      guild_id: components["schemas"]["SnowflakeType"];
      prompts: components["schemas"]["OnboardingPromptResponse"][];
      default_channel_ids: components["schemas"]["SnowflakeType"][];
      enabled: boolean;
    };
    GuildPatchRequestPartial: {
      name?: string;
      description?: string | null;
      region?: string | null;
      icon?: string | null;
      verification_level?: null | components["schemas"]["VerificationLevels"];
      default_message_notifications?: null | components["schemas"]["UserNotificationSettings"];
      explicit_content_filter?: null | components["schemas"]["GuildExplicitContentFilterTypes"];
      preferred_locale?: null | components["schemas"]["AvailableLocalesEnum"];
      afk_timeout?: null | components["schemas"]["AfkTimeouts"];
      afk_channel_id?: null | components["schemas"]["SnowflakeType"];
      system_channel_id?: null | components["schemas"]["SnowflakeType"];
      owner_id?: components["schemas"]["SnowflakeType"];
      splash?: string | null;
      banner?: string | null;
      system_channel_flags?: number | null;
      features?: ((string | null)[]) | null;
      discovery_splash?: string | null;
      home_header?: string | null;
      rules_channel_id?: null | components["schemas"]["SnowflakeType"];
      safety_alerts_channel_id?: null | components["schemas"]["SnowflakeType"];
      public_updates_channel_id?: null | components["schemas"]["SnowflakeType"];
      premium_progress_bar_enabled?: boolean | null;
    };
    GuildPreviewResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description?: string | null;
      home_header?: string | null;
      splash?: string | null;
      discovery_splash?: string | null;
      features: components["schemas"]["GuildFeatures"][];
      /** Format: int32 */
      approximate_member_count: number;
      /** Format: int32 */
      approximate_presence_count: number;
      emojis: components["schemas"]["EmojiResponse"][];
      stickers: components["schemas"]["GuildStickerResponse"][];
    };
    GuildProductPurchaseResponse: {
      listing_id: components["schemas"]["SnowflakeType"];
      product_name: string;
    };
    GuildPruneResponse: {
      /** Format: int32 */
      pruned?: number | null;
    };
    GuildResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description?: string | null;
      home_header?: string | null;
      splash?: string | null;
      discovery_splash?: string | null;
      features: components["schemas"]["GuildFeatures"][];
      banner?: string | null;
      owner_id: components["schemas"]["SnowflakeType"];
      application_id?: null | components["schemas"]["SnowflakeType"];
      region: string;
      afk_channel_id?: null | components["schemas"]["SnowflakeType"];
      afk_timeout: components["schemas"]["AfkTimeouts"];
      system_channel_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      system_channel_flags: number;
      widget_enabled: boolean;
      widget_channel_id?: null | components["schemas"]["SnowflakeType"];
      verification_level: components["schemas"]["VerificationLevels"];
      roles: components["schemas"]["GuildRoleResponse"][];
      default_message_notifications: components["schemas"]["UserNotificationSettings"];
      mfa_level: components["schemas"]["GuildMFALevel"];
      explicit_content_filter: components["schemas"]["GuildExplicitContentFilterTypes"];
      /** Format: int32 */
      max_presences?: number | null;
      /** Format: int32 */
      max_members?: number | null;
      /** Format: int32 */
      max_stage_video_channel_users?: number | null;
      /** Format: int32 */
      max_video_channel_users?: number | null;
      vanity_url_code?: string | null;
      premium_tier: components["schemas"]["PremiumGuildTiers"];
      /** Format: int32 */
      premium_subscription_count: number;
      preferred_locale: components["schemas"]["AvailableLocalesEnum"];
      rules_channel_id?: null | components["schemas"]["SnowflakeType"];
      safety_alerts_channel_id?: null | components["schemas"]["SnowflakeType"];
      public_updates_channel_id?: null | components["schemas"]["SnowflakeType"];
      premium_progress_bar_enabled: boolean;
      nsfw: boolean;
      nsfw_level: components["schemas"]["GuildNSFWContentLevel"];
      emojis: components["schemas"]["EmojiResponse"][];
      stickers: components["schemas"]["GuildStickerResponse"][];
    };
    GuildRoleResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      description?: string | null;
      permissions: string;
      /** Format: int32 */
      position: number;
      /** Format: int32 */
      color: number;
      hoist: boolean;
      managed: boolean;
      mentionable: boolean;
      icon?: string | null;
      unicode_emoji?: string | null;
      tags?: null | components["schemas"]["GuildRoleTagsResponse"];
    };
    GuildRoleTagsResponse: {
      premium_subscriber?: null;
      bot_id?: null | components["schemas"]["SnowflakeType"];
      integration_id?: null | components["schemas"]["SnowflakeType"];
      subscription_listing_id?: null | components["schemas"]["SnowflakeType"];
      available_for_purchase?: null;
      guild_connections?: null;
    };
    /** Format: int32 */
    GuildScheduledEventEntityTypes: 0 | 1 | 2 | 3;
    /** Format: int32 */
    GuildScheduledEventPrivacyLevels: 2;
    /** Format: int32 */
    GuildScheduledEventStatuses: 1 | 2 | 3 | 4;
    GuildStickerResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      tags: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      format_type?: null | components["schemas"]["StickerFormatTypes"];
      description?: string | null;
      available: boolean;
      guild_id: components["schemas"]["SnowflakeType"];
      user?: null | components["schemas"]["UserResponse"];
    };
    GuildSubscriptionIntegrationResponse: {
      /** @enum {string} */
      type: "guild_subscription";
      name?: string | null;
      account?: null | components["schemas"]["AccountResponse"];
      enabled?: boolean | null;
      id: components["schemas"]["SnowflakeType"];
    };
    GuildTemplateChannelResponse: {
      /** Format: int32 */
      id?: number | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 0 | 2 | 4;
      name?: string | null;
      /** Format: int32 */
      position?: number | null;
      topic?: string | null;
      /** Format: int32 */
      bitrate: number;
      /** Format: int32 */
      user_limit: number;
      nsfw: boolean;
      /** Format: int32 */
      rate_limit_per_user: number;
      parent_id?: null | components["schemas"]["SnowflakeType"];
      default_auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      permission_overwrites: (null | components["schemas"]["ChannelPermissionOverwriteResponse"])[];
      available_tags?: components["schemas"]["GuildTemplateChannelTags"][] | null;
      template: string;
      default_reaction_emoji?: null | components["schemas"]["DefaultReactionEmojiResponse"];
      /** Format: int32 */
      default_thread_rate_limit_per_user?: number | null;
      default_sort_order?: null | components["schemas"]["ThreadSortOrder"];
      default_forum_layout?: null | components["schemas"]["ForumLayout"];
      icon_emoji?: null | components["schemas"]["IconEmojiResponse"];
      /** Format: int32 */
      theme_color?: number | null;
    };
    GuildTemplateChannelTags: {
      name: string;
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
      moderated?: boolean | null;
    };
    GuildTemplateResponse: {
      code: string;
      name: string;
      description?: string | null;
      /** Format: int32 */
      usage_count: number;
      creator_id: components["schemas"]["SnowflakeType"];
      creator?: null | components["schemas"]["UserResponse"];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      source_guild_id: components["schemas"]["SnowflakeType"];
      serialized_source_guild: components["schemas"]["GuildTemplateSnapshotResponse"];
      is_dirty?: boolean | null;
    };
    GuildTemplateRoleResponse: {
      /** Format: int32 */
      id: number;
      name: string;
      permissions: string;
      /** Format: int32 */
      color: number;
      hoist: boolean;
      mentionable: boolean;
      icon?: string | null;
      unicode_emoji?: string | null;
    };
    GuildTemplateSnapshotResponse: {
      name: string;
      description?: string | null;
      region?: string | null;
      verification_level: components["schemas"]["VerificationLevels"];
      default_message_notifications: components["schemas"]["UserNotificationSettings"];
      explicit_content_filter: components["schemas"]["GuildExplicitContentFilterTypes"];
      preferred_locale: components["schemas"]["AvailableLocalesEnum"];
      afk_channel_id?: null | components["schemas"]["SnowflakeType"];
      afk_timeout: components["schemas"]["AfkTimeouts"];
      system_channel_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      system_channel_flags: number;
      roles: components["schemas"]["GuildTemplateRoleResponse"][];
      channels: components["schemas"]["GuildTemplateChannelResponse"][];
    };
    GuildWelcomeChannel: {
      channel_id: components["schemas"]["SnowflakeType"];
      description: string;
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
    };
    GuildWelcomeScreenChannelResponse: {
      channel_id: components["schemas"]["SnowflakeType"];
      description: string;
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
    };
    GuildWelcomeScreenResponse: {
      description?: string | null;
      welcome_channels: components["schemas"]["GuildWelcomeScreenChannelResponse"][];
    };
    GuildWithCountsResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description?: string | null;
      home_header?: string | null;
      splash?: string | null;
      discovery_splash?: string | null;
      features: components["schemas"]["GuildFeatures"][];
      banner?: string | null;
      owner_id: components["schemas"]["SnowflakeType"];
      application_id?: null | components["schemas"]["SnowflakeType"];
      region: string;
      afk_channel_id?: null | components["schemas"]["SnowflakeType"];
      afk_timeout: components["schemas"]["AfkTimeouts"];
      system_channel_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      system_channel_flags: number;
      widget_enabled: boolean;
      widget_channel_id?: null | components["schemas"]["SnowflakeType"];
      verification_level: components["schemas"]["VerificationLevels"];
      roles: components["schemas"]["GuildRoleResponse"][];
      default_message_notifications: components["schemas"]["UserNotificationSettings"];
      mfa_level: components["schemas"]["GuildMFALevel"];
      explicit_content_filter: components["schemas"]["GuildExplicitContentFilterTypes"];
      /** Format: int32 */
      max_presences?: number | null;
      /** Format: int32 */
      max_members?: number | null;
      /** Format: int32 */
      max_stage_video_channel_users?: number | null;
      /** Format: int32 */
      max_video_channel_users?: number | null;
      vanity_url_code?: string | null;
      premium_tier: components["schemas"]["PremiumGuildTiers"];
      /** Format: int32 */
      premium_subscription_count: number;
      preferred_locale: components["schemas"]["AvailableLocalesEnum"];
      rules_channel_id?: null | components["schemas"]["SnowflakeType"];
      safety_alerts_channel_id?: null | components["schemas"]["SnowflakeType"];
      public_updates_channel_id?: null | components["schemas"]["SnowflakeType"];
      premium_progress_bar_enabled: boolean;
      nsfw: boolean;
      nsfw_level: components["schemas"]["GuildNSFWContentLevel"];
      emojis: components["schemas"]["EmojiResponse"][];
      stickers: components["schemas"]["GuildStickerResponse"][];
      /** Format: int32 */
      approximate_member_count?: number | null;
      /** Format: int32 */
      approximate_presence_count?: number | null;
    };
    IconEmojiResponse: Record<string, never>;
    IncomingWebhookInteractionRequest: {
      content?: string | null;
      embeds?: components["schemas"]["RichEmbed"][] | null;
      allowed_mentions?: null | components["schemas"]["MessageAllowedMentionsRequest"];
      components?: ((components["schemas"]["ActionRow"] | components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[]) | null;
      attachments?: components["schemas"]["MessageAttachmentRequest"][] | null;
      tts?: boolean | null;
      flags?: number | null;
    };
    IncomingWebhookRequestPartial: {
      content?: string | null;
      embeds?: components["schemas"]["RichEmbed"][] | null;
      allowed_mentions?: null | components["schemas"]["MessageAllowedMentionsRequest"];
      components?: ((components["schemas"]["ActionRow"] | components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[]) | null;
      attachments?: components["schemas"]["MessageAttachmentRequest"][] | null;
      tts?: boolean | null;
      flags?: number | null;
      username?: string | null;
      /** Format: uri */
      avatar_url?: string | null;
      thread_name?: string | null;
      applied_tags?: components["schemas"]["SnowflakeType"][] | null;
    };
    IncomingWebhookUpdateForInteractionCallbackRequestPartial: {
      content?: string | null;
      embeds?: components["schemas"]["RichEmbed"][] | null;
      allowed_mentions?: null | components["schemas"]["MessageAllowedMentionsRequest"];
      components?: ((components["schemas"]["ActionRow"] | components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[]) | null;
      attachments?: components["schemas"]["MessageAttachmentRequest"][] | null;
      flags?: number | null;
    };
    IncomingWebhookUpdateRequestPartial: {
      content?: string | null;
      embeds?: components["schemas"]["RichEmbed"][] | null;
      allowed_mentions?: null | components["schemas"]["MessageAllowedMentionsRequest"];
      components?: ((components["schemas"]["ActionRow"] | components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[]) | null;
      attachments?: components["schemas"]["MessageAttachmentRequest"][] | null;
      flags?: number | null;
    };
    InputText: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 4;
      custom_id: string;
      style: components["schemas"]["TextStyleTypes"];
      label: string;
      value?: string | null;
      placeholder?: string | null;
      required?: boolean | null;
      min_length?: number | null;
      max_length?: number | null;
    };
    /** Format: int64 */
    Int53Type: number;
    IntegrationApplicationResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description: string;
      type?: null | components["schemas"]["ApplicationTypes"];
      cover_image?: string | null;
      primary_sku_id?: null | components["schemas"]["SnowflakeType"];
      bot?: null | components["schemas"]["UserResponse"];
    };
    /** Format: int32 */
    IntegrationExpireBehaviorTypes: 0 | 1;
    /** Format: int32 */
    IntegrationExpireGracePeriodTypes: 1 | 3 | 7 | 14 | 30;
    IntegrationTypes: "discord" | "twitch" | "youtube" | "guild_subscription";
    InteractionApplicationCommandAutocompleteCallbackIntegerData: {
      choices?: ((null | components["schemas"]["ApplicationCommandOptionIntegerChoice"])[]) | null;
    };
    InteractionApplicationCommandAutocompleteCallbackNumberData: {
      choices?: ((null | components["schemas"]["ApplicationCommandOptionNumberChoice"])[]) | null;
    };
    InteractionApplicationCommandAutocompleteCallbackStringData: {
      choices?: ((null | components["schemas"]["ApplicationCommandOptionStringChoice"])[]) | null;
    };
    /** Format: int32 */
    InteractionCallbackTypes: 1 | 4 | 5 | 6 | 7 | 8 | 9;
    /** Format: int32 */
    InteractionTypes: 1 | 2 | 3 | 4 | 5;
    InviteApplicationResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description: string;
      type?: null | components["schemas"]["ApplicationTypes"];
      cover_image?: string | null;
      primary_sku_id?: null | components["schemas"]["SnowflakeType"];
      bot?: null | components["schemas"]["UserResponse"];
      slug?: string | null;
      guild_id?: null | components["schemas"]["SnowflakeType"];
      rpc_origins?: ((string | null)[]) | null;
      bot_public?: boolean | null;
      bot_require_code_grant?: boolean | null;
      /** Format: uri */
      terms_of_service_url?: string | null;
      /** Format: uri */
      privacy_policy_url?: string | null;
      /** Format: uri */
      custom_install_url?: string | null;
      install_params?: null | components["schemas"]["ApplicationOAuth2ParamsResponse"];
      verify_key: string;
      /** Format: int32 */
      flags: number;
      /** Format: int32 */
      max_participants?: number | null;
      tags?: string[] | null;
    };
    InviteChannelRecipientResponse: {
      username: string;
    };
    InviteChannelResponse: {
      id: components["schemas"]["SnowflakeType"];
      type: components["schemas"]["ChannelTypes"];
      name?: string | null;
      icon?: string | null;
      recipients?: components["schemas"]["InviteChannelRecipientResponse"][] | null;
    };
    InviteGuildResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      splash?: string | null;
      banner?: string | null;
      description?: string | null;
      icon?: string | null;
      features: components["schemas"]["GuildFeatures"][];
      verification_level?: null | components["schemas"]["VerificationLevels"];
      vanity_url_code?: string | null;
      nsfw_level?: null | components["schemas"]["GuildNSFWContentLevel"];
      nsfw?: boolean | null;
      /** Format: int32 */
      premium_subscription_count?: number | null;
    };
    InviteStageInstanceResponse: {
      topic: string;
      /** Format: int32 */
      participant_count?: number | null;
      /** Format: int32 */
      speaker_count?: number | null;
      members?: components["schemas"]["GuildMemberResponse"][] | null;
    };
    /** Format: int32 */
    InviteTargetTypes: 1 | 2 | 3;
    /** Format: int32 */
    InviteTypes: 0 | 1 | 2;
    KeywordRuleResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      creator_id: components["schemas"]["SnowflakeType"];
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions: (components["schemas"]["BlockMessageActionResponse"] | components["schemas"]["FlagToChannelActionResponse"] | components["schemas"]["QuarantineUserActionResponse"] | components["schemas"]["UserCommunicationDisabledActionResponse"])[];
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 1;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      trigger_metadata: components["schemas"]["KeywordTriggerMetadataResponse"];
    };
    KeywordTriggerMetadata: {
      keyword_filter?: string[] | null;
      regex_patterns?: string[] | null;
      allow_list?: string[] | null;
    };
    KeywordTriggerMetadataResponse: {
      keyword_filter: string[];
      regex_patterns: string[];
      allow_list: string[];
    };
    KeywordUpsertRequest: {
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 1;
      trigger_metadata?: null | components["schemas"]["KeywordTriggerMetadata"];
    };
    KeywordUpsertRequestPartial: {
      name?: string;
      event_type?: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type?: 1;
      trigger_metadata?: null | components["schemas"]["KeywordTriggerMetadata"];
    };
    MLSpamRuleResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      creator_id: components["schemas"]["SnowflakeType"];
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions: (components["schemas"]["BlockMessageActionResponse"] | components["schemas"]["FlagToChannelActionResponse"] | components["schemas"]["QuarantineUserActionResponse"] | components["schemas"]["UserCommunicationDisabledActionResponse"])[];
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 3;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      trigger_metadata: components["schemas"]["MLSpamTriggerMetadataResponse"];
    };
    MLSpamTriggerMetadata: Record<string, never>;
    MLSpamTriggerMetadataResponse: Record<string, never>;
    MLSpamUpsertRequest: {
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 3;
      trigger_metadata?: null | components["schemas"]["MLSpamTriggerMetadata"];
    };
    MLSpamUpsertRequestPartial: {
      name?: string;
      event_type?: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type?: 3;
      trigger_metadata?: null | components["schemas"]["MLSpamTriggerMetadata"];
    };
    MentionSpamRuleResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      creator_id: components["schemas"]["SnowflakeType"];
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions: (components["schemas"]["BlockMessageActionResponse"] | components["schemas"]["FlagToChannelActionResponse"] | components["schemas"]["QuarantineUserActionResponse"] | components["schemas"]["UserCommunicationDisabledActionResponse"])[];
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 5;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      trigger_metadata: components["schemas"]["MentionSpamTriggerMetadataResponse"];
    };
    MentionSpamTriggerMetadata: {
      mention_total_limit: number;
      mention_raid_protection_enabled?: boolean | null;
    };
    MentionSpamTriggerMetadataResponse: {
      /** Format: int32 */
      mention_total_limit: number;
    };
    MentionSpamUpsertRequest: {
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 5;
      trigger_metadata?: null | components["schemas"]["MentionSpamTriggerMetadata"];
    };
    MentionSpamUpsertRequestPartial: {
      name?: string;
      event_type?: components["schemas"]["AutomodEventType"];
      actions?: ((components["schemas"]["BlockMessageAction"] | components["schemas"]["FlagToChannelAction"] | components["schemas"]["QuarantineUserAction"] | components["schemas"]["UserCommunicationDisabledAction"])[]) | null;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type?: 5;
      trigger_metadata?: null | components["schemas"]["MentionSpamTriggerMetadata"];
    };
    MentionableSelect: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 7;
      custom_id: string;
      placeholder?: string | null;
      min_values?: number | null;
      max_values?: number | null;
      disabled?: boolean | null;
      default_values?: unknown[] | null;
    };
    MessageActivityResponse: Record<string, never>;
    MessageAllowedMentionsRequest: {
      parse?: ((null | components["schemas"]["AllowedMentionTypes"])[]) | null;
      users?: ((null | components["schemas"]["SnowflakeType"])[]) | null;
      roles?: ((null | components["schemas"]["SnowflakeType"])[]) | null;
      replied_user?: boolean | null;
    };
    MessageAttachmentRequest: {
      id: components["schemas"]["SnowflakeType"];
      filename?: string | null;
      description?: string | null;
      is_remix?: boolean | null;
    };
    MessageAttachmentResponse: {
      id: components["schemas"]["SnowflakeType"];
      filename: string;
      /** Format: int32 */
      size: number;
      /** Format: uri */
      url: string;
      /** Format: uri */
      proxy_url: string;
      /** Format: int32 */
      width?: number | null;
      /** Format: int32 */
      height?: number | null;
      /** Format: double */
      duration_secs?: number | null;
      waveform?: string | null;
      description?: string | null;
      content_type?: string | null;
      ephemeral?: boolean | null;
      title?: string | null;
      application?: null | components["schemas"]["ApplicationResponse"];
      /** Format: date-time */
      clip_created_at?: string | null;
      clip_participants?: components["schemas"]["UserResponse"][] | null;
    };
    MessageComponentActionRowResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      components?: ((components["schemas"]["MessageComponentButtonResponse"] | components["schemas"]["MessageComponentChannelSelectResponse"] | components["schemas"]["MessageComponentInputTextResponse"] | components["schemas"]["MessageComponentMentionableSelectResponse"] | components["schemas"]["MessageComponentRoleSelectResponse"] | components["schemas"]["MessageComponentStringSelectResponse"] | components["schemas"]["MessageComponentUserSelectResponse"])[]) | null;
    };
    MessageComponentButtonResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 2;
      custom_id?: string | null;
      style: components["schemas"]["ButtonStyleTypes"];
      label?: string | null;
      disabled?: boolean | null;
      emoji?: null | components["schemas"]["MessageComponentEmojiResponse"];
      /** Format: uri */
      url?: string | null;
    };
    MessageComponentChannelSelectResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 8;
      custom_id: string;
      placeholder?: string | null;
      /** Format: int32 */
      min_values?: number | null;
      /** Format: int32 */
      max_values?: number | null;
      disabled?: boolean | null;
      channel_types?: components["schemas"]["ChannelTypes"][] | null;
    };
    MessageComponentEmojiResponse: {
      id?: null | components["schemas"]["SnowflakeType"];
      name: string;
      animated?: boolean | null;
    };
    MessageComponentInputTextResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 4;
      custom_id: string;
      style: components["schemas"]["TextStyleTypes"];
      label?: string | null;
      value?: string | null;
      placeholder?: string | null;
      required?: boolean | null;
      /** Format: int32 */
      min_length?: number | null;
      /** Format: int32 */
      max_length?: number | null;
    };
    MessageComponentMentionableSelectResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 7;
      custom_id: string;
      placeholder?: string | null;
      /** Format: int32 */
      min_values?: number | null;
      /** Format: int32 */
      max_values?: number | null;
      disabled?: boolean | null;
    };
    MessageComponentRoleSelectResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 6;
      custom_id: string;
      placeholder?: string | null;
      /** Format: int32 */
      min_values?: number | null;
      /** Format: int32 */
      max_values?: number | null;
      disabled?: boolean | null;
    };
    MessageComponentStringSelectResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      custom_id: string;
      placeholder?: string | null;
      /** Format: int32 */
      min_values?: number | null;
      /** Format: int32 */
      max_values?: number | null;
      disabled?: boolean | null;
      options?: ((null | components["schemas"]["SelectOptionResponse"])[]) | null;
    };
    /** Format: int32 */
    MessageComponentTypes: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    MessageComponentUserSelectResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 5;
      custom_id: string;
      placeholder?: string | null;
      /** Format: int32 */
      min_values?: number | null;
      /** Format: int32 */
      max_values?: number | null;
      disabled?: boolean | null;
    };
    MessageCreateRequest: {
      content?: string | null;
      embeds?: components["schemas"]["RichEmbed"][] | null;
      allowed_mentions?: null | components["schemas"]["MessageAllowedMentionsRequest"];
      sticker_ids?: components["schemas"]["SnowflakeType"][] | null;
      components?: ((components["schemas"]["ActionRow"] | components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[]) | null;
      flags?: number | null;
      attachments?: components["schemas"]["MessageAttachmentRequest"][] | null;
      message_reference?: null | components["schemas"]["ReplyMessageReferenceRequest"];
      nonce?: number | string | null;
      tts?: boolean | null;
    };
    MessageEditRequestPartial: {
      content?: string | null;
      embeds?: components["schemas"]["RichEmbed"][] | null;
      flags?: number | null;
      allowed_mentions?: null | components["schemas"]["MessageAllowedMentionsRequest"];
      sticker_ids?: ((null | components["schemas"]["SnowflakeType"])[]) | null;
      components?: ((components["schemas"]["ActionRow"] | components["schemas"]["Button"] | components["schemas"]["ChannelSelect"] | components["schemas"]["MentionableSelect"] | components["schemas"]["RoleSelect"] | components["schemas"]["StringSelect"] | components["schemas"]["UserSelect"])[]) | null;
      attachments?: components["schemas"]["MessageAttachmentRequest"][] | null;
    };
    MessageEmbedAuthorResponse: {
      name: string;
      url?: string | null;
      icon_url?: string | null;
      /** Format: uri */
      proxy_icon_url?: string | null;
    };
    MessageEmbedFieldResponse: {
      name: string;
      value: string;
      inline: boolean;
    };
    MessageEmbedFooterResponse: {
      text: string;
      icon_url?: string | null;
      /** Format: uri */
      proxy_icon_url?: string | null;
    };
    MessageEmbedImageResponse: {
      url?: string | null;
      /** Format: uri */
      proxy_url?: string | null;
      width?: null | components["schemas"]["UInt32Type"];
      height?: null | components["schemas"]["UInt32Type"];
      placeholder?: string | null;
      placeholder_version?: null | components["schemas"]["UInt32Type"];
    };
    MessageEmbedProviderResponse: {
      name: string;
      /** Format: uri */
      url?: string | null;
    };
    MessageEmbedResponse: {
      type: string;
      /** Format: uri */
      url?: string | null;
      title?: string | null;
      description?: string | null;
      /** Format: int32 */
      color?: number | null;
      /** Format: date-time */
      timestamp?: string | null;
      fields?: components["schemas"]["MessageEmbedFieldResponse"][] | null;
      author?: null | components["schemas"]["MessageEmbedAuthorResponse"];
      provider?: null | components["schemas"]["MessageEmbedProviderResponse"];
      image?: null | components["schemas"]["MessageEmbedImageResponse"];
      thumbnail?: null | components["schemas"]["MessageEmbedImageResponse"];
      video?: null | components["schemas"]["MessageEmbedVideoResponse"];
      footer?: null | components["schemas"]["MessageEmbedFooterResponse"];
    };
    MessageEmbedVideoResponse: {
      url?: string | null;
      /** Format: uri */
      proxy_url?: string | null;
      width?: null | components["schemas"]["UInt32Type"];
      height?: null | components["schemas"]["UInt32Type"];
      placeholder?: string | null;
      placeholder_version?: null | components["schemas"]["UInt32Type"];
    };
    MessageInteractionResponse: {
      id: components["schemas"]["SnowflakeType"];
      type: components["schemas"]["InteractionTypes"];
      name: string;
      user?: null | components["schemas"]["UserResponse"];
      name_localized?: string | null;
    };
    MessageMentionChannelResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      type: components["schemas"]["ChannelTypes"];
      guild_id: components["schemas"]["SnowflakeType"];
    };
    MessageReactionCountDetailsResponse: {
      /** Format: int32 */
      burst: number;
      /** Format: int32 */
      normal: number;
    };
    MessageReactionEmojiResponse: {
      id?: null | components["schemas"]["SnowflakeType"];
      name?: string | null;
      animated?: boolean | null;
    };
    MessageReactionResponse: {
      emoji: components["schemas"]["MessageReactionEmojiResponse"];
      /** Format: int32 */
      count: number;
      count_details: components["schemas"]["MessageReactionCountDetailsResponse"];
      burst_colors: string[];
      me_burst: boolean;
      me: boolean;
    };
    MessageReferenceResponse: {
      channel_id: components["schemas"]["SnowflakeType"];
      message_id?: null | components["schemas"]["SnowflakeType"];
      guild_id?: null | components["schemas"]["SnowflakeType"];
    };
    MessageResponse: {
      id: components["schemas"]["SnowflakeType"];
      type: components["schemas"]["MessageType"];
      content: string;
      channel_id: components["schemas"]["SnowflakeType"];
      author: components["schemas"]["UserResponse"];
      attachments: components["schemas"]["MessageAttachmentResponse"][];
      embeds: components["schemas"]["MessageEmbedResponse"][];
      mentions: components["schemas"]["UserResponse"][];
      mention_roles: components["schemas"]["SnowflakeType"][];
      pinned: boolean;
      mention_everyone: boolean;
      tts: boolean;
      /** Format: date-time */
      timestamp: string;
      /** Format: date-time */
      edited_timestamp?: string | null;
      /** Format: int32 */
      flags: number;
      components: (components["schemas"]["MessageComponentActionRowResponse"] | components["schemas"]["MessageComponentButtonResponse"] | components["schemas"]["MessageComponentChannelSelectResponse"] | components["schemas"]["MessageComponentInputTextResponse"] | components["schemas"]["MessageComponentMentionableSelectResponse"] | components["schemas"]["MessageComponentRoleSelectResponse"] | components["schemas"]["MessageComponentStringSelectResponse"] | components["schemas"]["MessageComponentUserSelectResponse"])[];
      activity?: null | components["schemas"]["MessageActivityResponse"];
      application?: null | components["schemas"]["BasicApplicationResponse"];
      application_id?: null | components["schemas"]["SnowflakeType"];
      interaction?: null | components["schemas"]["MessageInteractionResponse"];
      nonce?: number | string | null;
      webhook_id?: null | components["schemas"]["SnowflakeType"];
      message_reference?: null | components["schemas"]["MessageReferenceResponse"];
      thread?: null | components["schemas"]["ThreadResponse"];
      mention_channels?: ((null | components["schemas"]["MessageMentionChannelResponse"])[]) | null;
      stickers?: ((components["schemas"]["GuildStickerResponse"] | components["schemas"]["StandardStickerResponse"])[]) | null;
      sticker_items?: components["schemas"]["MessageStickerItemResponse"][] | null;
      role_subscription_data?: null | components["schemas"]["MessageRoleSubscriptionDataResponse"];
      purchase_notification?: null | components["schemas"]["PurchaseNotificationResponse"];
      /** Format: int32 */
      position?: number | null;
      resolved?: null | components["schemas"]["ResolvedObjectsResponse"];
      reactions?: components["schemas"]["MessageReactionResponse"][] | null;
      referenced_message?: null | components["schemas"]["BasicMessageResponse"];
    };
    MessageRoleSubscriptionDataResponse: {
      role_subscription_listing_id: components["schemas"]["SnowflakeType"];
      tier_name: string;
      /** Format: int32 */
      total_months_subscribed: number;
      is_renewal: boolean;
    };
    MessageStickerItemResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      format_type: components["schemas"]["StickerFormatTypes"];
    };
    /** Format: int32 */
    MessageType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 31 | 32;
    /** Format: int32 */
    MetadataItemTypes: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    ModalInteractionCallbackData: {
      custom_id: string;
      title: string;
      components: (components["schemas"]["ActionRow"] | components["schemas"]["InputText"])[];
    };
    ModalInteractionCallbackRequest: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 9;
      data: components["schemas"]["ModalInteractionCallbackData"];
    };
    MyGuildResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      owner: boolean;
      permissions: string;
      features: components["schemas"]["GuildFeatures"][];
      /** Format: int32 */
      approximate_member_count?: number | null;
      /** Format: int32 */
      approximate_presence_count?: number | null;
    };
    NewMemberActionResponse: {
      channel_id: components["schemas"]["SnowflakeType"];
      action_type: components["schemas"]["NewMemberActionType"];
      title: string;
      description: string;
      emoji?: null | components["schemas"]["SettingsEmojiResponse"];
      icon?: string | null;
    };
    /** Format: int32 */
    NewMemberActionType: 0 | 1;
    OAuth2GetAuthorizationResponse: {
      application: components["schemas"]["ApplicationResponse"];
      /** Format: date-time */
      expires: string;
      scopes: components["schemas"]["OAuth2Scopes"][];
      user?: null | components["schemas"]["UserResponse"];
    };
    OAuth2Scopes: "identify" | "email" | "connections" | "guilds" | "guilds.join" | "guilds.members.read" | "gdm.join" | "bot" | "rpc" | "rpc.notifications.read" | "rpc.voice.read" | "rpc.voice.write" | "rpc.video.read" | "rpc.video.write" | "rpc.screenshare.read" | "rpc.screenshare.write" | "rpc.activities.write" | "webhook.incoming" | "messages.read" | "applications.builds.upload" | "applications.builds.read" | "applications.commands" | "applications.commands.permissions.update" | "applications.commands.update" | "applications.store.update" | "applications.entitlements" | "activities.read" | "activities.write" | "relationships.read" | "voice" | "dm_channels.read" | "role_connections.write";
    OnboardingPromptOptionRequest: {
      id?: null | components["schemas"]["SnowflakeType"];
      title: string;
      description?: string | null;
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
      emoji_animated?: boolean | null;
      role_ids?: components["schemas"]["SnowflakeType"][] | null;
      channel_ids?: components["schemas"]["SnowflakeType"][] | null;
    };
    OnboardingPromptOptionResponse: {
      id: components["schemas"]["SnowflakeType"];
      title: string;
      description: string;
      emoji: components["schemas"]["SettingsEmojiResponse"];
      role_ids: components["schemas"]["SnowflakeType"][];
      channel_ids: components["schemas"]["SnowflakeType"][];
    };
    OnboardingPromptResponse: {
      id: components["schemas"]["SnowflakeType"];
      title: string;
      options: components["schemas"]["OnboardingPromptOptionResponse"][];
      single_select: boolean;
      required: boolean;
      in_onboarding: boolean;
      type: components["schemas"]["OnboardingPromptType"];
    };
    /** Format: int32 */
    OnboardingPromptType: 0 | 1;
    PartialDiscordIntegrationResponse: {
      id: components["schemas"]["SnowflakeType"];
      /** @enum {string} */
      type: "discord";
      name?: string | null;
      account?: null | components["schemas"]["AccountResponse"];
      application_id: components["schemas"]["SnowflakeType"];
    };
    PartialExternalConnectionIntegrationResponse: {
      id: components["schemas"]["SnowflakeType"];
      /** @enum {string} */
      type: "twitch" | "youtube";
      name?: string | null;
      account?: null | components["schemas"]["AccountResponse"];
    };
    PartialGuildSubscriptionIntegrationResponse: {
      id: components["schemas"]["SnowflakeType"];
      /** @enum {string} */
      type: "guild_subscription";
      name?: string | null;
      account?: null | components["schemas"]["AccountResponse"];
    };
    PongInteractionCallbackRequest: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
    };
    /** Format: int32 */
    PremiumGuildTiers: 0 | 1 | 2 | 3;
    /** Format: int32 */
    PremiumTypes: 0 | 1 | 2 | 3;
    PrivateApplicationResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      icon?: string | null;
      description: string;
      type?: null | components["schemas"]["ApplicationTypes"];
      cover_image?: string | null;
      primary_sku_id?: null | components["schemas"]["SnowflakeType"];
      bot?: null | components["schemas"]["UserResponse"];
      slug?: string | null;
      guild_id?: null | components["schemas"]["SnowflakeType"];
      rpc_origins?: ((string | null)[]) | null;
      bot_public?: boolean | null;
      bot_require_code_grant?: boolean | null;
      /** Format: uri */
      terms_of_service_url?: string | null;
      /** Format: uri */
      privacy_policy_url?: string | null;
      /** Format: uri */
      custom_install_url?: string | null;
      install_params?: null | components["schemas"]["ApplicationOAuth2ParamsResponse"];
      verify_key: string;
      /** Format: int32 */
      flags: number;
      /** Format: int32 */
      max_participants?: number | null;
      tags?: string[] | null;
      redirect_uris: (string | null)[];
      /** Format: uri */
      interactions_endpoint_url?: string | null;
      /** Format: uri */
      role_connections_verification_url?: string | null;
      owner: components["schemas"]["UserResponse"];
      /** Format: int32 */
      approximate_guild_count?: number | null;
      team?: null | components["schemas"]["TeamResponse"];
    };
    PrivateChannelRequestPartial: {
      name?: string | null;
      icon?: string | null;
    };
    PrivateChannelResponse: {
      id: components["schemas"]["SnowflakeType"];
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      last_message_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      flags: number;
      /** Format: date-time */
      last_pin_timestamp?: string | null;
      recipients: components["schemas"]["UserResponse"][];
    };
    PrivateGroupChannelResponse: {
      id: components["schemas"]["SnowflakeType"];
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      last_message_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      flags: number;
      /** Format: date-time */
      last_pin_timestamp?: string | null;
      recipients: components["schemas"]["UserResponse"][];
      name?: string | null;
      icon?: string | null;
      owner_id?: null | components["schemas"]["SnowflakeType"];
      managed?: boolean | null;
      application_id?: null | components["schemas"]["SnowflakeType"];
    };
    PrivateGuildMemberResponse: {
      avatar?: string | null;
      /** Format: date-time */
      communication_disabled_until?: string | null;
      /** Format: int32 */
      flags: number;
      /** Format: date-time */
      joined_at: string;
      nick?: string | null;
      pending: boolean;
      /** Format: date-time */
      premium_since?: string | null;
      roles: components["schemas"]["SnowflakeType"][];
      user: components["schemas"]["UserResponse"];
      mute: boolean;
      deaf: boolean;
      banner?: string | null;
    };
    PurchaseNotificationResponse: {
      type: components["schemas"]["PurchaseType"];
      guild_product_purchase?: null | components["schemas"]["GuildProductPurchaseResponse"];
    };
    /** Format: int32 */
    PurchaseType: never;
    QuarantineUserAction: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 4;
      metadata?: null | components["schemas"]["QuarantineUserActionMetadata"];
    };
    QuarantineUserActionMetadata: Record<string, never>;
    QuarantineUserActionMetadataResponse: Record<string, never>;
    QuarantineUserActionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 4;
      metadata: components["schemas"]["QuarantineUserActionMetadataResponse"];
    };
    ReplyMessageReferenceRequest: {
      guild_id?: null | components["schemas"]["SnowflakeType"];
      channel_id?: null | components["schemas"]["SnowflakeType"];
      message_id: components["schemas"]["SnowflakeType"];
      fail_if_not_exists?: boolean | null;
    };
    ResolvedObjectsResponse: {
      users: {
        [key: string]: components["schemas"]["UserResponse"];
      };
      members: {
        [key: string]: components["schemas"]["GuildMemberResponse"];
      };
      channels: {
        [key: string]: components["schemas"]["GuildChannelResponse"] | components["schemas"]["PrivateChannelResponse"] | components["schemas"]["PrivateGroupChannelResponse"] | components["schemas"]["ThreadResponse"];
      };
      roles: {
        [key: string]: components["schemas"]["GuildRoleResponse"];
      };
    };
    ResourceChannelResponse: {
      channel_id: components["schemas"]["SnowflakeType"];
      title: string;
      emoji?: null | components["schemas"]["SettingsEmojiResponse"];
      icon?: string | null;
      description: string;
    };
    RichEmbed: {
      type?: string | null;
      /** Format: uri */
      url?: string | null;
      title?: string | null;
      color?: number | null;
      /** Format: date-time */
      timestamp?: string | null;
      description?: string | null;
      author?: null | components["schemas"]["RichEmbedAuthor"];
      image?: null | components["schemas"]["RichEmbedImage"];
      thumbnail?: null | components["schemas"]["RichEmbedThumbnail"];
      footer?: null | components["schemas"]["RichEmbedFooter"];
      fields?: components["schemas"]["RichEmbedField"][] | null;
      provider?: null | components["schemas"]["RichEmbedProvider"];
      video?: null | components["schemas"]["RichEmbedVideo"];
    };
    RichEmbedAuthor: {
      name?: string | null;
      /** Format: uri */
      url?: string | null;
      /** Format: uri */
      icon_url?: string | null;
    };
    RichEmbedField: {
      name: string;
      value: string;
      inline?: boolean | null;
    };
    RichEmbedFooter: {
      text?: string | null;
      /** Format: uri */
      icon_url?: string | null;
    };
    RichEmbedImage: {
      /** Format: uri */
      url?: string | null;
      width?: number | null;
      height?: number | null;
      placeholder?: string | null;
      placeholder_version?: number | null;
    };
    RichEmbedProvider: {
      name?: string | null;
      /** Format: uri */
      url?: string | null;
    };
    RichEmbedThumbnail: {
      /** Format: uri */
      url?: string | null;
      width?: number | null;
      height?: number | null;
      placeholder?: string | null;
      placeholder_version?: number | null;
    };
    RichEmbedVideo: {
      /** Format: uri */
      url?: string | null;
      width?: number | null;
      height?: number | null;
      placeholder?: string | null;
      placeholder_version?: number | null;
    };
    RoleSelect: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 6;
      custom_id: string;
      placeholder?: string | null;
      min_values?: number | null;
      max_values?: number | null;
      disabled?: boolean | null;
      default_values?: components["schemas"]["RoleSelectDefaultValue"][] | null;
    };
    RoleSelectDefaultValue: {
      type: components["schemas"]["SnowflakeSelectDefaultValueTypes"];
      id: components["schemas"]["SnowflakeType"];
    };
    ScheduledEventResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      name: string;
      description?: string | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      creator_id?: null | components["schemas"]["SnowflakeType"];
      creator?: null | components["schemas"]["UserResponse"];
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      status: components["schemas"]["GuildScheduledEventStatuses"];
      entity_type: components["schemas"]["GuildScheduledEventEntityTypes"];
      entity_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      user_count?: number | null;
      privacy_level: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      user_rsvp?: null | components["schemas"]["ScheduledEventUserResponse"];
      auto_start: boolean;
    };
    ScheduledEventUserResponse: {
      guild_scheduled_event_id: components["schemas"]["SnowflakeType"];
      user_id: components["schemas"]["SnowflakeType"];
      user?: null | components["schemas"]["UserResponse"];
      member?: null | components["schemas"]["GuildMemberResponse"];
    };
    SelectOption: {
      label: string;
      value: string;
      description?: string | null;
      emoji?: null | components["schemas"]["Emoji"];
      default?: boolean | null;
    };
    SelectOptionResponse: {
      label: string;
      value: string;
      description?: string | null;
      emoji?: null | components["schemas"]["MessageComponentEmojiResponse"];
      default?: boolean | null;
    };
    SettingsEmojiResponse: {
      id?: null | components["schemas"]["SnowflakeType"];
      name?: string | null;
      animated?: boolean | null;
    };
    SlackWebhook: {
      text?: string | null;
      username?: string | null;
      /** Format: uri */
      icon_url?: string | null;
      attachments?: components["schemas"]["WebhookSlackEmbed"][] | null;
    };
    SnowflakeSelectDefaultValueTypes: never;
    /** Format: snowflake */
    SnowflakeType: string;
    SpamLinkRuleResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      creator_id: components["schemas"]["SnowflakeType"];
      name: string;
      event_type: components["schemas"]["AutomodEventType"];
      actions: (components["schemas"]["BlockMessageActionResponse"] | components["schemas"]["FlagToChannelActionResponse"] | components["schemas"]["QuarantineUserActionResponse"] | components["schemas"]["UserCommunicationDisabledActionResponse"])[];
      /**
       * Format: int32
       * @enum {integer}
       */
      trigger_type: 2;
      enabled?: boolean | null;
      exempt_roles?: components["schemas"]["SnowflakeType"][] | null;
      exempt_channels?: components["schemas"]["SnowflakeType"][] | null;
      trigger_metadata: components["schemas"]["SpamLinkTriggerMetadataResponse"];
    };
    SpamLinkTriggerMetadataResponse: Record<string, never>;
    StageInstanceResponse: {
      guild_id: components["schemas"]["SnowflakeType"];
      channel_id: components["schemas"]["SnowflakeType"];
      topic: string;
      privacy_level: components["schemas"]["StageInstancesPrivacyLevels"];
      id: components["schemas"]["SnowflakeType"];
      discoverable_disabled?: boolean | null;
      guild_scheduled_event_id?: null | components["schemas"]["SnowflakeType"];
    };
    /** Format: int32 */
    StageInstancesPrivacyLevels: 1 | 2;
    StageScheduledEventCreateRequest: {
      name: string;
      description?: string | null;
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      privacy_level: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      /**
       * Format: int32
       * @enum {integer}
       */
      entity_type: 1;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      entity_metadata?: null | components["schemas"]["EntityMetadataStageInstance"];
    };
    StageScheduledEventPatchRequestPartial: {
      status?: null | components["schemas"]["GuildScheduledEventStatuses"];
      name?: string;
      description?: string | null;
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time?: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      entity_type?: null | 1;
      privacy_level?: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      channel_id?: null | components["schemas"]["SnowflakeType"];
      entity_metadata?: null | components["schemas"]["EntityMetadataStageInstance"];
    };
    StageScheduledEventResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      name: string;
      description?: string | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      creator_id?: null | components["schemas"]["SnowflakeType"];
      creator?: null | components["schemas"]["UserResponse"];
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      status: components["schemas"]["GuildScheduledEventStatuses"];
      /**
       * Format: int32
       * @enum {integer}
       */
      entity_type: 1;
      entity_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      user_count?: number | null;
      privacy_level: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      user_rsvp?: null | components["schemas"]["ScheduledEventUserResponse"];
      auto_start: boolean;
      entity_metadata?: null | components["schemas"]["EntityMetadataStageInstanceResponse"];
    };
    StandardStickerResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      tags: string;
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 1;
      format_type?: null | components["schemas"]["StickerFormatTypes"];
      description?: string | null;
      pack_id: components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      sort_value: number;
    };
    /** Format: int32 */
    StickerFormatTypes: 1 | 2 | 3 | 4;
    StickerPackCollectionResponse: {
      sticker_packs: components["schemas"]["StickerPackResponse"][];
    };
    StickerPackResponse: {
      id: components["schemas"]["SnowflakeType"];
      sku_id: components["schemas"]["SnowflakeType"];
      name: string;
      description?: string | null;
      stickers: components["schemas"]["StandardStickerResponse"][];
      cover_sticker_id?: null | components["schemas"]["SnowflakeType"];
      banner_asset_id?: null | components["schemas"]["SnowflakeType"];
    };
    /** Format: int32 */
    StickerTypes: 1 | 2;
    StringSelect: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      custom_id: string;
      placeholder?: string | null;
      min_values?: number | null;
      max_values?: number | null;
      disabled?: boolean | null;
      options: components["schemas"]["SelectOption"][];
    };
    TeamMemberResponse: {
      user: components["schemas"]["UserResponse"];
      team_id: components["schemas"]["SnowflakeType"];
      membership_state: components["schemas"]["TeamMembershipStates"];
    };
    /** Format: int32 */
    TeamMembershipStates: 1 | 2;
    TeamResponse: {
      id: components["schemas"]["SnowflakeType"];
      icon?: string | null;
      name: string;
      owner_user_id: components["schemas"]["SnowflakeType"];
      members: components["schemas"]["TeamMemberResponse"][];
    };
    /** Format: int32 */
    TextStyleTypes: 1 | 2;
    /** Format: int32 */
    ThreadAutoArchiveDuration: 60 | 1440 | 4320 | 10080;
    ThreadMemberResponse: {
      id: components["schemas"]["SnowflakeType"];
      user_id: components["schemas"]["SnowflakeType"];
      /** Format: date-time */
      join_timestamp: string;
      /** Format: int32 */
      flags: number;
      member?: null | components["schemas"]["GuildMemberResponse"];
    };
    ThreadMetadataResponse: {
      archived: boolean;
      /** Format: date-time */
      archive_timestamp?: string | null;
      auto_archive_duration: components["schemas"]["ThreadAutoArchiveDuration"];
      locked: boolean;
      /** Format: date-time */
      create_timestamp?: string | null;
      invitable?: boolean | null;
    };
    ThreadResponse: {
      id: components["schemas"]["SnowflakeType"];
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 10 | 11 | 12;
      last_message_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      flags: number;
      /** Format: date-time */
      last_pin_timestamp?: string | null;
      guild_id: components["schemas"]["SnowflakeType"];
      name: string;
      parent_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      rate_limit_per_user?: number | null;
      /** Format: int32 */
      bitrate?: number | null;
      /** Format: int32 */
      user_limit?: number | null;
      rtc_region?: string | null;
      video_quality_mode?: null | components["schemas"]["VideoQualityModes"];
      permissions?: string | null;
      owner_id: components["schemas"]["SnowflakeType"];
      thread_metadata?: null | components["schemas"]["ThreadMetadataResponse"];
      /** Format: int32 */
      message_count: number;
      /** Format: int32 */
      member_count: number;
      /** Format: int32 */
      total_message_sent: number;
      applied_tags?: components["schemas"]["SnowflakeType"][] | null;
      member?: null | components["schemas"]["ThreadMemberResponse"];
    };
    /** Format: int32 */
    ThreadSortOrder: 0 | 1;
    ThreadsResponse: {
      threads: components["schemas"]["ThreadResponse"][];
      members: components["schemas"]["ThreadMemberResponse"][];
      has_more?: boolean | null;
    };
    TypingIndicatorResponse: Record<string, never>;
    /** Format: int64 */
    UInt32Type: number;
    UpdateDefaultReactionEmojiRequest: {
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
    };
    UpdateGuildChannelRequestPartial: {
      type?: null | (0 | 2 | 4 | 5 | 13 | 14 | 15);
      name?: string;
      /** Format: int32 */
      position?: number | null;
      topic?: string | null;
      /** Format: int32 */
      bitrate?: number | null;
      /** Format: int32 */
      user_limit?: number | null;
      nsfw?: boolean | null;
      rate_limit_per_user?: number | null;
      parent_id?: null | components["schemas"]["SnowflakeType"];
      permission_overwrites?: components["schemas"]["ChannelPermissionOverwriteRequest"][] | null;
      rtc_region?: string | null;
      video_quality_mode?: null | components["schemas"]["VideoQualityModes"];
      default_auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      default_reaction_emoji?: null | components["schemas"]["UpdateDefaultReactionEmojiRequest"];
      default_thread_rate_limit_per_user?: number | null;
      default_sort_order?: null | components["schemas"]["ThreadSortOrder"];
      default_forum_layout?: null | components["schemas"]["ForumLayout"];
      flags?: number | null;
      available_tags?: components["schemas"]["UpdateThreadTagRequest"][] | null;
    };
    UpdateGuildOnboardingRequest: {
      prompts?: components["schemas"]["UpdateOnboardingPromptRequest"][] | null;
      enabled?: boolean | null;
      default_channel_ids?: components["schemas"]["SnowflakeType"][] | null;
      mode?: null | components["schemas"]["GuildOnboardingMode"];
    };
    UpdateMessageInteractionCallbackRequest: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 6 | 7;
      data?: null | components["schemas"]["IncomingWebhookUpdateForInteractionCallbackRequestPartial"];
    };
    UpdateOnboardingPromptRequest: {
      title: string;
      options: components["schemas"]["OnboardingPromptOptionRequest"][];
      single_select?: boolean | null;
      required?: boolean | null;
      in_onboarding?: boolean | null;
      type?: null | components["schemas"]["OnboardingPromptType"];
      id: components["schemas"]["SnowflakeType"];
    };
    UpdateThreadRequestPartial: {
      name?: string | null;
      archived?: boolean | null;
      locked?: boolean | null;
      invitable?: boolean | null;
      auto_archive_duration?: null | components["schemas"]["ThreadAutoArchiveDuration"];
      rate_limit_per_user?: number | null;
      flags?: number | null;
      applied_tags?: components["schemas"]["SnowflakeType"][] | null;
      /** Format: int32 */
      bitrate?: number | null;
      user_limit?: number | null;
      rtc_region?: string | null;
      video_quality_mode?: null | components["schemas"]["VideoQualityModes"];
    };
    UpdateThreadTagRequest: {
      name: string;
      emoji_id?: null | components["schemas"]["SnowflakeType"];
      emoji_name?: string | null;
      moderated?: boolean | null;
      id?: null | components["schemas"]["SnowflakeType"];
    };
    UserCommunicationDisabledAction: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      metadata: components["schemas"]["UserCommunicationDisabledActionMetadata"];
    };
    UserCommunicationDisabledActionMetadata: {
      duration_seconds: number;
    };
    UserCommunicationDisabledActionMetadataResponse: {
      /** Format: int32 */
      duration_seconds: number;
    };
    UserCommunicationDisabledActionResponse: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 3;
      metadata: components["schemas"]["UserCommunicationDisabledActionMetadataResponse"];
    };
    UserGuildOnboardingResponse: {
      guild_id: components["schemas"]["SnowflakeType"];
      prompts: components["schemas"]["OnboardingPromptResponse"][];
      default_channel_ids: components["schemas"]["SnowflakeType"][];
      enabled: boolean;
    };
    /** Format: int32 */
    UserNotificationSettings: 0 | 1;
    UserPIIResponse: {
      id: components["schemas"]["SnowflakeType"];
      username: string;
      avatar?: string | null;
      discriminator: string;
      /** Format: int32 */
      public_flags: number;
      premium_type?: null | components["schemas"]["PremiumTypes"];
      flags: components["schemas"]["Int53Type"];
      bot?: boolean | null;
      system?: boolean | null;
      banner?: string | null;
      /** Format: int32 */
      accent_color?: number | null;
      mfa_enabled: boolean;
      locale: components["schemas"]["AvailableLocalesEnum"];
      email?: string | null;
      verified?: boolean | null;
    };
    UserResponse: {
      id: components["schemas"]["SnowflakeType"];
      username: string;
      avatar?: string | null;
      discriminator: string;
      /** Format: int32 */
      public_flags: number;
      premium_type?: null | components["schemas"]["PremiumTypes"];
      flags: components["schemas"]["Int53Type"];
      bot?: boolean | null;
      system?: boolean | null;
      banner?: string | null;
      /** Format: int32 */
      accent_color?: number | null;
    };
    UserSelect: {
      /**
       * Format: int32
       * @enum {integer}
       */
      type: 5;
      custom_id: string;
      placeholder?: string | null;
      min_values?: number | null;
      max_values?: number | null;
      disabled?: boolean | null;
      default_values?: components["schemas"]["UserSelectDefaultValue"][] | null;
    };
    UserSelectDefaultValue: {
      type: components["schemas"]["SnowflakeSelectDefaultValueTypes"];
      id: components["schemas"]["SnowflakeType"];
    };
    VanityURLErrorResponse: {
      message: string;
      /** Format: int32 */
      code: number;
    };
    VanityURLResponse: {
      code?: string | null;
      /** Format: int32 */
      uses: number;
      error?: null | components["schemas"]["VanityURLErrorResponse"];
    };
    /** Format: int32 */
    VerificationLevels: 0 | 1 | 2 | 3 | 4;
    /** Format: int32 */
    VideoQualityModes: 1 | 2;
    VoiceRegionResponse: {
      id: string;
      name: string;
      custom: boolean;
      deprecated: boolean;
      optimal: boolean;
    };
    VoiceScheduledEventCreateRequest: {
      name: string;
      description?: string | null;
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      privacy_level: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      /**
       * Format: int32
       * @enum {integer}
       */
      entity_type: 2;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      entity_metadata?: null | components["schemas"]["EntityMetadataVoice"];
    };
    VoiceScheduledEventPatchRequestPartial: {
      status?: null | components["schemas"]["GuildScheduledEventStatuses"];
      name?: string;
      description?: string | null;
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time?: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      entity_type?: null | 2;
      privacy_level?: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      channel_id?: null | components["schemas"]["SnowflakeType"];
      entity_metadata?: null | components["schemas"]["EntityMetadataVoice"];
    };
    VoiceScheduledEventResponse: {
      id: components["schemas"]["SnowflakeType"];
      guild_id: components["schemas"]["SnowflakeType"];
      name: string;
      description?: string | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
      creator_id?: null | components["schemas"]["SnowflakeType"];
      creator?: null | components["schemas"]["UserResponse"];
      image?: string | null;
      /** Format: date-time */
      scheduled_start_time: string;
      /** Format: date-time */
      scheduled_end_time?: string | null;
      status: components["schemas"]["GuildScheduledEventStatuses"];
      /**
       * Format: int32
       * @enum {integer}
       */
      entity_type: 2;
      entity_id?: null | components["schemas"]["SnowflakeType"];
      /** Format: int32 */
      user_count?: number | null;
      privacy_level: components["schemas"]["GuildScheduledEventPrivacyLevels"];
      user_rsvp?: null | components["schemas"]["ScheduledEventUserResponse"];
      auto_start: boolean;
      entity_metadata?: null | components["schemas"]["EntityMetadataVoiceResponse"];
    };
    WebhookSlackEmbed: {
      title?: string | null;
      /** Format: uri */
      title_link?: string | null;
      text?: string | null;
      color?: string | null;
      ts?: number | null;
      pretext?: string | null;
      footer?: string | null;
      /** Format: uri */
      footer_icon?: string | null;
      author_name?: string | null;
      /** Format: uri */
      author_link?: string | null;
      /** Format: uri */
      author_icon?: string | null;
      /** Format: uri */
      image_url?: string | null;
      /** Format: uri */
      thumb_url?: string | null;
      fields?: components["schemas"]["WebhookSlackEmbedField"][] | null;
    };
    WebhookSlackEmbedField: {
      name?: string | null;
      value?: string | null;
      inline?: boolean | null;
    };
    WebhookSourceChannelResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
    };
    WebhookSourceGuildResponse: {
      id: components["schemas"]["SnowflakeType"];
      icon?: string | null;
      name: string;
    };
    /** Format: int32 */
    WebhookTypes: 1 | 2 | 3;
    WelcomeMessageResponse: {
      author_ids: components["schemas"]["SnowflakeType"][];
      message: string;
    };
    WelcomeScreenPatchRequestPartial: {
      description?: string | null;
      welcome_channels?: components["schemas"]["GuildWelcomeChannel"][] | null;
      enabled?: boolean | null;
    };
    WidgetActivity: {
      name: string;
    };
    WidgetChannel: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      /** Format: int32 */
      position: number;
    };
    WidgetImageStyles: "shield" | "banner1" | "banner2" | "banner3" | "banner4";
    WidgetMember: {
      id: string;
      username: string;
      discriminator: components["schemas"]["WidgetUserDiscriminator"];
      avatar?: null;
      status: string;
      /** Format: uri */
      avatar_url: string;
      activity?: null | components["schemas"]["WidgetActivity"];
      deaf?: boolean | null;
      mute?: boolean | null;
      self_deaf?: boolean | null;
      self_mute?: boolean | null;
      suppress?: boolean | null;
      channel_id?: null | components["schemas"]["SnowflakeType"];
    };
    WidgetResponse: {
      id: components["schemas"]["SnowflakeType"];
      name: string;
      instant_invite?: string | null;
      channels: components["schemas"]["WidgetChannel"][];
      members: components["schemas"]["WidgetMember"][];
      /** Format: int32 */
      presence_count: number;
    };
    WidgetSettingsResponse: {
      enabled: boolean;
      channel_id?: null | components["schemas"]["SnowflakeType"];
    };
    WidgetUserDiscriminator: "0000";
    /** @description A single error, either for an API response or a specific field. */
    Error: {
      /** @description Discord internal error code. See error code reference */
      code: number;
      /** @description Human-readable error message */
      message: string;
    };
    InnerErrors: {
      /** @description The list of errors for this field */
      _errors: components["schemas"]["Error"][];
    };
    ErrorDetails: OneOf<[{
      [key: string]: components["schemas"]["ErrorDetails"];
    }, components["schemas"]["InnerErrors"]]>;
    /** @description Errors object returned by the Discord API */
    ErrorResponse: components["schemas"]["Error"] & {
      errors?: components["schemas"]["ErrorDetails"];
    };
  };
  responses: {
    /** @description Client error response */
    ClientErrorResponse: {
      content: {
        "application/json": components["schemas"]["ErrorResponse"];
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  get_my_oauth2_application: {
    responses: {
      /** @description 200 response for get_my_oauth2_application */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateApplicationResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_my_connections: {
    responses: {
      /** @description 200 response for list_my_connections */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectedAccountResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_dm: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePrivateChannelRequest"];
      };
    };
    responses: {
      /** @description 200 response for create_dm */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateChannelResponse"] | components["schemas"]["PrivateGroupChannelResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_my_guilds: {
    parameters: {
      query?: {
        before?: components["schemas"]["SnowflakeType"];
        after?: components["schemas"]["SnowflakeType"];
        limit?: number;
        with_counts?: boolean;
      };
    };
    responses: {
      /** @description 200 response for list_my_guilds */
      200: {
        content: {
          "application/json": components["schemas"]["MyGuildResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_my_application: {
    responses: {
      /** @description 200 response for get_my_application */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateApplicationResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_my_application: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationFormPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_my_application */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateApplicationResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_bot_gateway: {
    responses: {
      /** @description 200 response for get_bot_gateway */
      200: {
        content: {
          "application/json": components["schemas"]["GatewayBotResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_my_oauth2_authorization: {
    responses: {
      /** @description 200 response for get_my_oauth2_authorization */
      200: {
        content: {
          "application/json": components["schemas"]["OAuth2GetAuthorizationResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_voice_regions: {
    responses: {
      /** @description 200 response for list_voice_regions */
      200: {
        content: {
          "application/json": components["schemas"]["VoiceRegionResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_my_user: {
    responses: {
      /** @description 200 response for get_my_user */
      200: {
        content: {
          "application/json": components["schemas"]["UserPIIResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_my_user: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BotAccountPatchRequest"];
      };
    };
    responses: {
      /** @description 200 response for update_my_user */
      200: {
        content: {
          "application/json": components["schemas"]["UserPIIResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_stage_instance: {
    requestBody: {
      content: {
        "application/json": {
          topic: string;
          channel_id: components["schemas"]["SnowflakeType"];
          privacy_level?: null | components["schemas"]["StageInstancesPrivacyLevels"];
          guild_scheduled_event_id?: null | components["schemas"]["SnowflakeType"];
          send_start_notification?: boolean | null;
        };
      };
    };
    responses: {
      /** @description 200 response for create_stage_instance */
      200: {
        content: {
          "application/json": components["schemas"]["StageInstanceResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_sticker_packs: {
    responses: {
      /** @description 200 response for list_sticker_packs */
      200: {
        content: {
          "application/json": components["schemas"]["StickerPackCollectionResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_gateway: {
    responses: {
      /** @description 200 response for get_gateway */
      200: {
        content: {
          "application/json": components["schemas"]["GatewayResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GuildCreateRequest"];
      };
    };
    responses: {
      /** @description 201 response for create_guild */
      201: {
        content: {
          "application/json": components["schemas"]["GuildResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_my_private_archived_threads: {
    parameters: {
      query?: {
        before?: components["schemas"]["SnowflakeType"];
        limit?: number;
      };
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_my_private_archived_threads */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_application_command_permissions: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_application_command_permissions */
      200: {
        content: {
          "application/json": components["schemas"]["CommandPermissionsResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_application_command_permissions: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_application_command_permissions */
      200: {
        content: {
          "application/json": components["schemas"]["CommandPermissionsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  set_guild_application_command_permissions: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          permissions?: components["schemas"]["ApplicationCommandPermission"][] | null;
        };
      };
    };
    responses: {
      /** @description 200 response for set_guild_application_command_permissions */
      200: {
        content: {
          "application/json": components["schemas"]["CommandPermissionsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  add_my_message_reaction: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
      };
    };
    responses: {
      /** @description 204 response for add_my_message_reaction */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_my_message_reaction: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
      };
    };
    responses: {
      /** @description 204 response for delete_my_message_reaction */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_private_archived_threads: {
    parameters: {
      query?: {
        before?: string;
        limit?: number;
      };
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_private_archived_threads */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_public_archived_threads: {
    parameters: {
      query?: {
        before?: string;
        limit?: number;
      };
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_public_archived_threads */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_application_user_role_connection: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_application_user_role_connection */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationUserRoleConnectionResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_application_user_role_connection: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          platform_name?: string | null;
          platform_username?: string | null;
          metadata?: {
            [key: string]: string;
          } | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_application_user_role_connection */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationUserRoleConnectionResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_my_guild_member: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_my_guild_member */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateGuildMemberResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_application_role_connections_metadata: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_application_role_connections_metadata */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationRoleConnectionsMetadataItemResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_application_role_connections_metadata: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationRoleConnectionsMetadataItemRequest"][] | null;
      };
    };
    responses: {
      /** @description 200 response for update_application_role_connections_metadata */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationRoleConnectionsMetadataItemResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_application_command */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_application_command */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCommandPatchRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_guild_application_command */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_application_commands: {
    parameters: {
      query?: {
        with_localizations?: boolean;
      };
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_application_commands */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  bulk_set_guild_application_commands: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCommandUpdateRequest"][] | null;
      };
    };
    responses: {
      /** @description 200 response for bulk_set_guild_application_commands */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCommandCreateRequest"];
      };
    };
    responses: {
      /** @description 200 response for create_guild_application_command */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      /** @description 201 response for create_guild_application_command */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  join_thread: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for join_thread */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  leave_thread: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for leave_thread */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  bulk_delete_messages: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          messages: components["schemas"]["SnowflakeType"][];
        };
      };
    };
    responses: {
      /** @description 204 response for bulk_delete_messages */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_user_message_reaction: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_user_message_reaction */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_message_reactions_by_emoji: {
    parameters: {
      query?: {
        after?: components["schemas"]["SnowflakeType"];
        limit?: number;
      };
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
      };
    };
    responses: {
      /** @description 200 response for list_message_reactions_by_emoji */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_all_message_reactions_by_emoji: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
        emoji_name: string;
      };
    };
    responses: {
      /** @description 204 response for delete_all_message_reactions_by_emoji */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_all_message_reactions: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_all_message_reactions */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  crosspost_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for crosspost_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_thread_from_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTextThreadWithMessageRequest"];
      };
    };
    responses: {
      /** @description 201 response for create_thread_from_message */
      201: {
        content: {
          "application/json": components["schemas"]["ThreadResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_original_webhook_message: {
    parameters: {
      query?: {
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    responses: {
      /** @description 200 response for get_original_webhook_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_original_webhook_message: {
    parameters: {
      query?: {
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    responses: {
      /** @description 204 response for delete_original_webhook_message */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_original_webhook_message: {
    parameters: {
      query?: {
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomingWebhookUpdateRequestPartial"];
        "application/x-www-form-urlencoded": components["schemas"]["IncomingWebhookUpdateRequestPartial"];
        "multipart/form-data": components["schemas"]["IncomingWebhookUpdateRequestPartial"] & {
          "files[0]"?: string;
          "files[1]"?: string;
          "files[2]"?: string;
          "files[3]"?: string;
          "files[4]"?: string;
          "files[5]"?: string;
          "files[6]"?: string;
          "files[7]"?: string;
          "files[8]"?: string;
          "files[9]"?: string;
        };
      };
    };
    responses: {
      /** @description 200 response for update_original_webhook_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_scheduled_event_users: {
    parameters: {
      query?: {
        with_member?: boolean;
        limit?: number;
        before?: components["schemas"]["SnowflakeType"];
        after?: components["schemas"]["SnowflakeType"];
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        guild_scheduled_event_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_scheduled_event_users */
      200: {
        content: {
          "application/json": components["schemas"]["ScheduledEventUserResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_auto_moderation_rule: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        rule_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_auto_moderation_rule */
      200: {
        content: {
          "application/json": components["schemas"]["DefaultKeywordRuleResponse"] | components["schemas"]["KeywordRuleResponse"] | components["schemas"]["MLSpamRuleResponse"] | components["schemas"]["MentionSpamRuleResponse"] | components["schemas"]["SpamLinkRuleResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_auto_moderation_rule: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        rule_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_auto_moderation_rule */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_auto_moderation_rule: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        rule_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DefaultKeywordListUpsertRequestPartial"] | components["schemas"]["KeywordUpsertRequestPartial"] | components["schemas"]["MLSpamUpsertRequestPartial"] | components["schemas"]["MentionSpamUpsertRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_auto_moderation_rule */
      200: {
        content: {
          "application/json": components["schemas"]["DefaultKeywordRuleResponse"] | components["schemas"]["KeywordRuleResponse"] | components["schemas"]["MLSpamRuleResponse"] | components["schemas"]["MentionSpamRuleResponse"] | components["schemas"]["SpamLinkRuleResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_auto_moderation_rules: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_auto_moderation_rules */
      200: {
        content: {
          "application/json": ((components["schemas"]["DefaultKeywordRuleResponse"] | components["schemas"]["KeywordRuleResponse"] | components["schemas"]["MLSpamRuleResponse"] | components["schemas"]["MentionSpamRuleResponse"] | components["schemas"]["SpamLinkRuleResponse"] | null)[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_auto_moderation_rule: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DefaultKeywordListUpsertRequest"] | components["schemas"]["KeywordUpsertRequest"] | components["schemas"]["MLSpamUpsertRequest"] | components["schemas"]["MentionSpamUpsertRequest"];
      };
    };
    responses: {
      /** @description 200 response for create_auto_moderation_rule */
      200: {
        content: {
          "application/json": components["schemas"]["DefaultKeywordRuleResponse"] | components["schemas"]["KeywordRuleResponse"] | components["schemas"]["MLSpamRuleResponse"] | components["schemas"]["MentionSpamRuleResponse"] | components["schemas"]["SpamLinkRuleResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_self_voice_state: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: date-time */
          request_to_speak_timestamp?: string | null;
          suppress?: boolean | null;
          channel_id?: null | components["schemas"]["SnowflakeType"];
        };
      };
    };
    responses: {
      /** @description 204 response for update_self_voice_state */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  search_guild_members: {
    parameters: {
      query: {
        limit: number;
        query: string;
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for search_guild_members */
      200: {
        content: {
          "application/json": components["schemas"]["GuildMemberResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_active_guild_threads: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_active_guild_threads */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_my_guild_member: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          nick?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_my_guild_member */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateGuildMemberResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  add_guild_member_role: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
        role_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for add_guild_member_role */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_member_role: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
        role_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_member_role */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  leave_guild: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for leave_guild */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_application_command */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_application_command */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
        command_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCommandPatchRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_application_command */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_application_commands: {
    parameters: {
      query?: {
        with_localizations?: boolean;
      };
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_application_commands */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  bulk_set_application_commands: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCommandUpdateRequest"][] | null;
      };
    };
    responses: {
      /** @description 200 response for bulk_set_application_commands */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_application_command: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCommandCreateRequest"];
      };
    };
    responses: {
      /** @description 200 response for create_application_command */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      /** @description 201 response for create_application_command */
      201: {
        content: {
          "application/json": components["schemas"]["ApplicationCommandResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_interaction_response: {
    parameters: {
      path: {
        interaction_id: components["schemas"]["SnowflakeType"];
        interaction_token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationCommandAutocompleteCallbackRequest"] | components["schemas"]["CreateMessageInteractionCallbackRequest"] | components["schemas"]["ModalInteractionCallbackRequest"] | components["schemas"]["PongInteractionCallbackRequest"] | components["schemas"]["UpdateMessageInteractionCallbackRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["ApplicationCommandAutocompleteCallbackRequest"] | components["schemas"]["CreateMessageInteractionCallbackRequest"] | components["schemas"]["ModalInteractionCallbackRequest"] | components["schemas"]["PongInteractionCallbackRequest"] | components["schemas"]["UpdateMessageInteractionCallbackRequest"];
        "multipart/form-data": components["schemas"]["ApplicationCommandAutocompleteCallbackRequest"] | components["schemas"]["CreateMessageInteractionCallbackRequest"] | components["schemas"]["ModalInteractionCallbackRequest"] | components["schemas"]["PongInteractionCallbackRequest"] | components["schemas"]["UpdateMessageInteractionCallbackRequest"];
      };
    };
    responses: {
      /** @description 204 response for create_interaction_response */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_thread_member: {
    parameters: {
      query?: {
        with_member?: boolean;
      };
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_thread_member */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadMemberResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  add_thread_member: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for add_thread_member */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_thread_member: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_thread_member */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_thread_members: {
    parameters: {
      query?: {
        with_member?: boolean;
        limit?: number;
        after?: components["schemas"]["SnowflakeType"];
      };
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_thread_members */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadMemberResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  set_channel_permission_overwrite: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        overwrite_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          type?: null | components["schemas"]["ChannelPermissionOverwrites"];
          allow?: number | null;
          deny?: number | null;
        };
      };
    };
    responses: {
      /** @description 204 response for set_channel_permission_overwrite */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_channel_permission_overwrite: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        overwrite_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_channel_permission_overwrite */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  add_group_dm_user: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          access_token?: string | null;
          nick?: string | null;
        };
      };
    };
    responses: {
      /** @description 201 response for add_group_dm_user */
      201: {
        content: {
          "application/json": components["schemas"]["PrivateChannelResponse"] | components["schemas"]["PrivateGroupChannelResponse"];
        };
      };
      /** @description 204 response for add_group_dm_user */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_group_dm_user: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_group_dm_user */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  follow_channel: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          webhook_channel_id: components["schemas"]["SnowflakeType"];
        };
      };
    };
    responses: {
      /** @description 200 response for follow_channel */
      200: {
        content: {
          "application/json": components["schemas"]["ChannelFollowerResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_message */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageEditRequestPartial"];
        "application/x-www-form-urlencoded": components["schemas"]["MessageEditRequestPartial"];
        "multipart/form-data": components["schemas"]["MessageEditRequestPartial"] & {
          "files[0]"?: string;
          "files[1]"?: string;
          "files[2]"?: string;
          "files[3]"?: string;
          "files[4]"?: string;
          "files[5]"?: string;
          "files[6]"?: string;
          "files[7]"?: string;
          "files[8]"?: string;
          "files[9]"?: string;
        };
      };
    };
    responses: {
      /** @description 200 response for update_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_messages: {
    parameters: {
      query?: {
        around?: components["schemas"]["SnowflakeType"];
        before?: components["schemas"]["SnowflakeType"];
        after?: components["schemas"]["SnowflakeType"];
        limit?: number;
      };
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_messages */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["MessageCreateRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["MessageCreateRequest"];
        "multipart/form-data": components["schemas"]["MessageCreateRequest"] & {
          "files[0]"?: string;
          "files[1]"?: string;
          "files[2]"?: string;
          "files[3]"?: string;
          "files[4]"?: string;
          "files[5]"?: string;
          "files[6]"?: string;
          "files[7]"?: string;
          "files[8]"?: string;
          "files[9]"?: string;
        };
      };
    };
    responses: {
      /** @description 200 response for create_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_channel_webhooks: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_channel_webhooks */
      200: {
        content: {
          "application/json": ((components["schemas"]["ApplicationIncomingWebhookResponse"] | components["schemas"]["ChannelFollowerWebhookResponse"] | components["schemas"]["GuildIncomingWebhookResponse"])[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_webhook: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          avatar?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for create_webhook */
      200: {
        content: {
          "application/json": components["schemas"]["GuildIncomingWebhookResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_channel_invites: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_channel_invites */
      200: {
        content: {
          "application/json": ((components["schemas"]["FriendInviteResponse"] | components["schemas"]["GroupDMInviteResponse"] | components["schemas"]["GuildInviteResponse"])[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_channel_invite: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGroupDMInviteRequest"] | components["schemas"]["CreateGuildInviteRequest"];
      };
    };
    responses: {
      /** @description 200 response for create_channel_invite */
      200: {
        content: {
          "application/json": components["schemas"]["FriendInviteResponse"] | components["schemas"]["GroupDMInviteResponse"] | components["schemas"]["GuildInviteResponse"];
        };
      };
      /** @description 204 response for create_channel_invite */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_thread: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateForumThreadRequest"] | components["schemas"]["CreateTextThreadWithoutMessageRequest"];
        "application/x-www-form-urlencoded": components["schemas"]["CreateForumThreadRequest"] | components["schemas"]["CreateTextThreadWithoutMessageRequest"];
        "multipart/form-data": components["schemas"]["CreateForumThreadRequest"] | components["schemas"]["CreateTextThreadWithoutMessageRequest"];
      };
    };
    responses: {
      /** @description 201 response for create_thread */
      201: {
        content: {
          "application/json": components["schemas"]["CreatedThreadResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  trigger_typing_indicator: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for trigger_typing_indicator */
      200: {
        content: {
          "application/json": components["schemas"]["TypingIndicatorResponse"];
        };
      };
      /** @description 204 response for trigger_typing_indicator */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  pin_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for pin_message */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  unpin_message: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for unpin_message */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_pinned_messages: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_pinned_messages */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_webhook_message: {
    parameters: {
      query?: {
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_webhook_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_webhook_message: {
    parameters: {
      query?: {
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_webhook_message */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_webhook_message: {
    parameters: {
      query?: {
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
        message_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomingWebhookUpdateRequestPartial"];
        "application/x-www-form-urlencoded": components["schemas"]["IncomingWebhookUpdateRequestPartial"];
        "multipart/form-data": components["schemas"]["IncomingWebhookUpdateRequestPartial"] & {
          "files[0]"?: string;
          "files[1]"?: string;
          "files[2]"?: string;
          "files[3]"?: string;
          "files[4]"?: string;
          "files[5]"?: string;
          "files[6]"?: string;
          "files[7]"?: string;
          "files[8]"?: string;
          "files[9]"?: string;
        };
      };
    };
    responses: {
      /** @description 200 response for update_webhook_message */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  execute_github_compatible_webhook: {
    parameters: {
      query?: {
        wait?: boolean;
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GithubWebhook"];
      };
    };
    responses: {
      /** @description 204 response for execute_github_compatible_webhook */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  execute_slack_compatible_webhook: {
    parameters: {
      query?: {
        wait?: boolean;
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SlackWebhook"];
        "application/x-www-form-urlencoded": components["schemas"]["SlackWebhook"];
        "multipart/form-data": components["schemas"]["SlackWebhook"];
      };
    };
    responses: {
      /** @description 200 response for execute_slack_compatible_webhook */
      200: {
        content: {
          "application/json": string | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_template: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** @description 200 response for get_guild_template */
      200: {
        content: {
          "application/json": components["schemas"]["GuildTemplateResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_from_template: {
    parameters: {
      path: {
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          icon?: string | null;
        };
      };
    };
    responses: {
      /** @description 201 response for create_guild_from_template */
      201: {
        content: {
          "application/json": components["schemas"]["GuildResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_new_member_welcome: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_new_member_welcome */
      200: {
        content: {
          "application/json": components["schemas"]["GuildHomeSettingsResponse"];
        };
      };
      /** @description 204 response for get_guild_new_member_welcome */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_scheduled_event: {
    parameters: {
      query?: {
        with_user_count?: boolean;
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        guild_scheduled_event_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_scheduled_event */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalScheduledEventResponse"] | components["schemas"]["StageScheduledEventResponse"] | components["schemas"]["VoiceScheduledEventResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_scheduled_event: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        guild_scheduled_event_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_scheduled_event */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_scheduled_event: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        guild_scheduled_event_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExternalScheduledEventPatchRequestPartial"] | components["schemas"]["StageScheduledEventPatchRequestPartial"] | components["schemas"]["VoiceScheduledEventPatchRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_guild_scheduled_event */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalScheduledEventResponse"] | components["schemas"]["StageScheduledEventResponse"] | components["schemas"]["VoiceScheduledEventResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_scheduled_events: {
    parameters: {
      query?: {
        with_user_count?: boolean;
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_scheduled_events */
      200: {
        content: {
          "application/json": ((components["schemas"]["ExternalScheduledEventResponse"] | components["schemas"]["StageScheduledEventResponse"] | components["schemas"]["VoiceScheduledEventResponse"])[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_scheduled_event: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ExternalScheduledEventCreateRequest"] | components["schemas"]["StageScheduledEventCreateRequest"] | components["schemas"]["VoiceScheduledEventCreateRequest"];
      };
    };
    responses: {
      /** @description 200 response for create_guild_scheduled_event */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalScheduledEventResponse"] | components["schemas"]["StageScheduledEventResponse"] | components["schemas"]["VoiceScheduledEventResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_welcome_screen: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_welcome_screen */
      200: {
        content: {
          "application/json": components["schemas"]["GuildWelcomeScreenResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_welcome_screen: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WelcomeScreenPatchRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_guild_welcome_screen */
      200: {
        content: {
          "application/json": components["schemas"]["GuildWelcomeScreenResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_voice_state: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          suppress?: boolean | null;
          channel_id?: null | components["schemas"]["SnowflakeType"];
        };
      };
    };
    responses: {
      /** @description 204 response for update_voice_state */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_integration: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        integration_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_integration */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_integrations: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_integrations */
      200: {
        content: {
          "application/json": ((components["schemas"]["DiscordIntegrationResponse"] | components["schemas"]["ExternalConnectionIntegrationResponse"] | components["schemas"]["GuildSubscriptionIntegrationResponse"])[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_widget: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_widget */
      200: {
        content: {
          "application/json": components["schemas"]["WidgetResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guilds_onboarding: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guilds_onboarding */
      200: {
        content: {
          "application/json": components["schemas"]["UserGuildOnboardingResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  put_guilds_onboarding: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateGuildOnboardingRequest"];
      };
    };
    responses: {
      /** @description 200 response for put_guilds_onboarding */
      200: {
        content: {
          "application/json": components["schemas"]["GuildOnboardingResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_vanity_url: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_vanity_url */
      200: {
        content: {
          "application/json": components["schemas"]["VanityURLResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_audit_log_entries: {
    parameters: {
      query?: {
        user_id?: components["schemas"]["SnowflakeType"];
        action_type?: number;
        before?: components["schemas"]["SnowflakeType"];
        after?: components["schemas"]["SnowflakeType"];
        limit?: number;
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_audit_log_entries */
      200: {
        content: {
          "application/json": components["schemas"]["GuildAuditLogResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_widget_png: {
    parameters: {
      query?: {
        style?: components["schemas"]["WidgetImageStyles"];
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_widget_png */
      200: {
        content: {
          "image/png": string;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  sync_guild_template: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        code: string;
      };
    };
    responses: {
      /** @description 200 response for sync_guild_template */
      200: {
        content: {
          "application/json": components["schemas"]["GuildTemplateResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_template: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        code: string;
      };
    };
    responses: {
      /** @description 200 response for delete_guild_template */
      200: {
        content: {
          "application/json": components["schemas"]["GuildTemplateResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_template: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        code: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          description?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_guild_template */
      200: {
        content: {
          "application/json": components["schemas"]["GuildTemplateResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_templates: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_templates */
      200: {
        content: {
          "application/json": components["schemas"]["GuildTemplateResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_template: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          description?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for create_guild_template */
      200: {
        content: {
          "application/json": components["schemas"]["GuildTemplateResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_sticker: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        sticker_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_sticker */
      200: {
        content: {
          "application/json": components["schemas"]["GuildStickerResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_sticker: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        sticker_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_sticker */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_sticker: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        sticker_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          tags?: string;
          description?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_guild_sticker */
      200: {
        content: {
          "application/json": components["schemas"]["GuildStickerResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_stickers: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_stickers */
      200: {
        content: {
          "application/json": components["schemas"]["GuildStickerResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_sticker: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          name: string;
          tags: string;
          description?: string | null;
          file: string;
        };
      };
    };
    responses: {
      /** @description 201 response for create_guild_sticker */
      201: {
        content: {
          "application/json": components["schemas"]["GuildStickerResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_webhooks: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_webhooks */
      200: {
        content: {
          "application/json": ((components["schemas"]["ApplicationIncomingWebhookResponse"] | components["schemas"]["ChannelFollowerWebhookResponse"] | components["schemas"]["GuildIncomingWebhookResponse"])[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_channels: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_channels */
      200: {
        content: {
          "application/json": ((components["schemas"]["GuildChannelResponse"] | components["schemas"]["PrivateChannelResponse"] | components["schemas"]["PrivateGroupChannelResponse"] | components["schemas"]["ThreadResponse"])[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_channel: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGuildChannelRequest"];
      };
    };
    responses: {
      /** @description 201 response for create_guild_channel */
      201: {
        content: {
          "application/json": components["schemas"]["GuildChannelResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  bulk_update_guild_channels: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": ({
            id?: components["schemas"]["SnowflakeType"];
            /** Format: int32 */
            position?: number | null;
            parent_id?: null | components["schemas"]["SnowflakeType"];
            lock_permissions?: boolean | null;
          })[];
      };
    };
    responses: {
      /** @description 204 response for bulk_update_guild_channels */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_member: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_member */
      200: {
        content: {
          "application/json": components["schemas"]["GuildMemberResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  add_guild_member: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          nick?: string | null;
          roles?: ((null | components["schemas"]["SnowflakeType"])[]) | null;
          mute?: boolean | null;
          deaf?: boolean | null;
          access_token: string;
          flags?: number | null;
        };
      };
    };
    responses: {
      /** @description 201 response for add_guild_member */
      201: {
        content: {
          "application/json": components["schemas"]["GuildMemberResponse"];
        };
      };
      /** @description 204 response for add_guild_member */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_member: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_member */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_member: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          nick?: string | null;
          roles?: ((null | components["schemas"]["SnowflakeType"])[]) | null;
          mute?: boolean | null;
          deaf?: boolean | null;
          channel_id?: null | components["schemas"]["SnowflakeType"];
          /** Format: date-time */
          communication_disabled_until?: string | null;
          flags?: number | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_guild_member */
      200: {
        content: {
          "application/json": components["schemas"]["GuildMemberResponse"];
        };
      };
      /** @description 204 response for update_guild_member */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_members: {
    parameters: {
      query?: {
        limit?: number;
        after?: number;
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_members */
      200: {
        content: {
          "application/json": components["schemas"]["GuildMemberResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_preview: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_preview */
      200: {
        content: {
          "application/json": components["schemas"]["GuildPreviewResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_invites: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_invites */
      200: {
        content: {
          "application/json": ((components["schemas"]["FriendInviteResponse"] | components["schemas"]["GroupDMInviteResponse"] | components["schemas"]["GuildInviteResponse"])[]) | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_voice_regions: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_voice_regions */
      200: {
        content: {
          "application/json": components["schemas"]["VoiceRegionResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_emoji: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        emoji_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_emoji */
      200: {
        content: {
          "application/json": components["schemas"]["EmojiResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_emoji: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        emoji_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_emoji */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_emoji: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        emoji_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          roles?: ((null | components["schemas"]["SnowflakeType"])[]) | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_guild_emoji */
      200: {
        content: {
          "application/json": components["schemas"]["EmojiResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_emojis: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_emojis */
      200: {
        content: {
          "application/json": components["schemas"]["EmojiResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_emoji: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
          image: string;
          roles?: ((null | components["schemas"]["SnowflakeType"])[]) | null;
        };
      };
    };
    responses: {
      /** @description 201 response for create_guild_emoji */
      201: {
        content: {
          "application/json": components["schemas"]["EmojiResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_widget_settings: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_widget_settings */
      200: {
        content: {
          "application/json": components["schemas"]["WidgetSettingsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_widget_settings: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          channel_id?: null | components["schemas"]["SnowflakeType"];
          enabled?: boolean | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_guild_widget_settings */
      200: {
        content: {
          "application/json": components["schemas"]["WidgetSettingsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild_role: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        role_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild_role */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild_role: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        role_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string | null;
          permissions?: number | null;
          color?: number | null;
          hoist?: boolean | null;
          mentionable?: boolean | null;
          icon?: string | null;
          unicode_emoji?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_guild_role */
      200: {
        content: {
          "application/json": components["schemas"]["GuildRoleResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_roles: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_roles */
      200: {
        content: {
          "application/json": components["schemas"]["GuildRoleResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  create_guild_role: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string | null;
          permissions?: number | null;
          color?: number | null;
          hoist?: boolean | null;
          mentionable?: boolean | null;
          icon?: string | null;
          unicode_emoji?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for create_guild_role */
      200: {
        content: {
          "application/json": components["schemas"]["GuildRoleResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  bulk_update_guild_roles: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": ({
            id?: null | components["schemas"]["SnowflakeType"];
            /** Format: int32 */
            position?: number | null;
          })[];
      };
    };
    responses: {
      /** @description 200 response for bulk_update_guild_roles */
      200: {
        content: {
          "application/json": components["schemas"]["GuildRoleResponse"][];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  preview_prune_guild: {
    parameters: {
      query?: {
        days?: number;
        include_roles?: string | ((null | components["schemas"]["SnowflakeType"])[]);
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for preview_prune_guild */
      200: {
        content: {
          "application/json": components["schemas"]["GuildPruneResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  prune_guild: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          days?: number | null;
          compute_prune_count?: boolean | null;
          include_roles?: string | ((null | components["schemas"]["SnowflakeType"])[]) | null;
        };
      };
    };
    responses: {
      /** @description 200 response for prune_guild */
      200: {
        content: {
          "application/json": components["schemas"]["GuildPruneResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild_ban: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild_ban */
      200: {
        content: {
          "application/json": components["schemas"]["GuildBanResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  ban_user_from_guild: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          delete_message_seconds?: number | null;
          delete_message_days?: number | null;
        };
      };
    };
    responses: {
      /** @description 204 response for ban_user_from_guild */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  unban_user_from_guild: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for unban_user_from_guild */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  list_guild_bans: {
    parameters: {
      query?: {
        limit?: number;
        before?: components["schemas"]["SnowflakeType"];
        after?: components["schemas"]["SnowflakeType"];
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for list_guild_bans */
      200: {
        content: {
          "application/json": components["schemas"]["GuildBanResponse"][] | null;
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  set_guild_mfa_level: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          level: components["schemas"]["GuildMFALevel"];
        };
      };
    };
    responses: {
      /** @description 200 response for set_guild_mfa_level */
      200: {
        content: {
          "application/json": components["schemas"]["GuildMFALevelResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_stage_instance: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_stage_instance */
      200: {
        content: {
          "application/json": components["schemas"]["StageInstanceResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_stage_instance: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_stage_instance */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_stage_instance: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          topic?: string;
          privacy_level?: components["schemas"]["StageInstancesPrivacyLevels"];
        };
      };
    };
    responses: {
      /** @description 200 response for update_stage_instance */
      200: {
        content: {
          "application/json": components["schemas"]["StageInstanceResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_application: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_application */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateApplicationResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_application: {
    parameters: {
      path: {
        application_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationFormPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_application */
      200: {
        content: {
          "application/json": components["schemas"]["PrivateApplicationResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_webhook_by_token: {
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    responses: {
      /** @description 200 response for get_webhook_by_token */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationIncomingWebhookResponse"] | components["schemas"]["ChannelFollowerWebhookResponse"] | components["schemas"]["GuildIncomingWebhookResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  execute_webhook: {
    parameters: {
      query?: {
        wait?: boolean;
        thread_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomingWebhookRequestPartial"] | components["schemas"]["IncomingWebhookUpdateRequestPartial"];
        "application/x-www-form-urlencoded": components["schemas"]["IncomingWebhookRequestPartial"] | components["schemas"]["IncomingWebhookUpdateRequestPartial"];
        "multipart/form-data": components["schemas"]["IncomingWebhookRequestPartial"] | components["schemas"]["IncomingWebhookUpdateRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for execute_webhook */
      200: {
        content: {
          "application/json": components["schemas"]["MessageResponse"];
        };
      };
      /** @description 204 response for execute_webhook */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_webhook_by_token: {
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    responses: {
      /** @description 204 response for delete_webhook_by_token */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_webhook_by_token: {
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
        webhook_token: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          avatar?: string | null;
        };
      };
    };
    responses: {
      /** @description 200 response for update_webhook_by_token */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationIncomingWebhookResponse"] | components["schemas"]["ChannelFollowerWebhookResponse"] | components["schemas"]["GuildIncomingWebhookResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_sticker: {
    parameters: {
      path: {
        sticker_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_sticker */
      200: {
        content: {
          "application/json": components["schemas"]["GuildStickerResponse"] | components["schemas"]["StandardStickerResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_webhook: {
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_webhook */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationIncomingWebhookResponse"] | components["schemas"]["ChannelFollowerWebhookResponse"] | components["schemas"]["GuildIncomingWebhookResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_webhook: {
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_webhook */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_webhook: {
    parameters: {
      path: {
        webhook_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          avatar?: string | null;
          channel_id?: null | components["schemas"]["SnowflakeType"];
        };
      };
    };
    responses: {
      /** @description 200 response for update_webhook */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationIncomingWebhookResponse"] | components["schemas"]["ChannelFollowerWebhookResponse"] | components["schemas"]["GuildIncomingWebhookResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_channel: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_channel */
      200: {
        content: {
          "application/json": components["schemas"]["GuildChannelResponse"] | components["schemas"]["PrivateChannelResponse"] | components["schemas"]["PrivateGroupChannelResponse"] | components["schemas"]["ThreadResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_channel: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for delete_channel */
      200: {
        content: {
          "application/json": components["schemas"]["GuildChannelResponse"] | components["schemas"]["PrivateChannelResponse"] | components["schemas"]["PrivateGroupChannelResponse"] | components["schemas"]["ThreadResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_channel: {
    parameters: {
      path: {
        channel_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PrivateChannelRequestPartial"] | components["schemas"]["UpdateGuildChannelRequestPartial"] | components["schemas"]["UpdateThreadRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_channel */
      200: {
        content: {
          "application/json": components["schemas"]["GuildChannelResponse"] | components["schemas"]["PrivateChannelResponse"] | components["schemas"]["PrivateGroupChannelResponse"] | components["schemas"]["ThreadResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  invite_resolve: {
    parameters: {
      query?: {
        with_counts?: boolean;
        guild_scheduled_event_id?: components["schemas"]["SnowflakeType"];
      };
      path: {
        code: string;
      };
    };
    responses: {
      /** @description 200 response for invite_resolve */
      200: {
        content: {
          "application/json": components["schemas"]["FriendInviteResponse"] | components["schemas"]["GroupDMInviteResponse"] | components["schemas"]["GuildInviteResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  invite_revoke: {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** @description 200 response for invite_revoke */
      200: {
        content: {
          "application/json": components["schemas"]["FriendInviteResponse"] | components["schemas"]["GroupDMInviteResponse"] | components["schemas"]["GuildInviteResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_guild: {
    parameters: {
      query?: {
        with_counts?: boolean;
      };
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_guild */
      200: {
        content: {
          "application/json": components["schemas"]["GuildWithCountsResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  delete_guild: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 204 response for delete_guild */
      204: {
        content: never;
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  update_guild: {
    parameters: {
      path: {
        guild_id: components["schemas"]["SnowflakeType"];
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GuildPatchRequestPartial"];
      };
    };
    responses: {
      /** @description 200 response for update_guild */
      200: {
        content: {
          "application/json": components["schemas"]["GuildResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
  get_user: {
    parameters: {
      path: {
        user_id: components["schemas"]["SnowflakeType"];
      };
    };
    responses: {
      /** @description 200 response for get_user */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      "4XX": components["responses"]["ClientErrorResponse"];
    };
  };
}


export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
