/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };

export interface paths {
  "/asset_report/create": {
    /**
     * Create an Asset Report
     * @description The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.
     *
     * The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).
     *
     * The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
     */
    post: operations["assetReportCreate"];
  };
  "/asset_report/get": {
    /**
     * Retrieve an Asset Report
     * @description The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
     *
     * By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.
     *
     * For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `["fast_assets"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
     */
    post: operations["assetReportGet"];
  };
  "/asset_report/pdf/get": {
    /**
     * Retrieve a PDF Asset Report
     * @description The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
     *
     * The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.
     *
     * [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     */
    post: operations["assetReportPdfGet"];
  };
  "/asset_report/refresh": {
    /**
     * Refresh an Asset Report
     * @description An Asset Report is an immutable snapshot of a user's assets. In order to "refresh" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.
     *
     * The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string ("") for any previously-populated fields you would like set as empty.
     */
    post: operations["assetReportRefresh"];
  };
  "/asset_report/filter": {
    /**
     * Filter Asset Report
     * @description By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.
     *
     * To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.
     *
     * Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.
     *
     * Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
     */
    post: operations["assetReportFilter"];
  };
  "/asset_report/remove": {
    /**
     * Delete an Asset Report
     * @description The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.
     *
     * The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
     */
    post: operations["assetReportRemove"];
  };
  "/asset_report/audit_copy/create": {
    /**
     * Create Asset Report Audit Copy
     * @description Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.
     *
     * To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
     */
    post: operations["assetReportAuditCopyCreate"];
  };
  "/asset_report/audit_copy/get": {
    /**
     * Retrieve an Asset Report Audit Copy
     * @description `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
     */
    post: operations["assetReportAuditCopyGet"];
  };
  "/asset_report/audit_copy/remove": {
    /**
     * Remove Asset Report Audit Copy
     * @description The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     */
    post: operations["assetReportAuditCopyRemove"];
  };
  "/cra/base_report/get": {
    /**
     * Retrieve a Base Report
     * @description This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/link/token/create`.
     */
    post: operations["baseReportGet"];
  };
  "/credit/audit_copy_token/update": {
    /**
     * Update an Audit Copy Token
     * @description The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
     */
    post: operations["creditAuditCopyTokenUpdate"];
  };
  "/cra/bank_income/get": {
    /**
     * Retrieve information from the bank accounts used for income verification
     * @description `/cra/bank_income/get` returns the bank income report(s) for a specified user.
     */
    post: operations["craBankIncomeGet"];
  };
  "/statements/list": {
    /**
     * Retrieve a list of all statements associated with the provided item.
     * @description The `/statements/list` endpoint retrieves a list of all statements associated with the provided item.
     */
    post: operations["statementsList"];
  };
  "/statements/download": {
    /**
     * Retrieve a single statement.
     * @description The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
     */
    post: operations["statementsDownload"];
  };
  "/item/activity/list": {
    /**
     * List a historical log of user consent events
     * @description List a historical log of user consent events
     */
    post: operations["itemActivityList"];
  };
  "/item/application/list": {
    /**
     * List a user’s connected applications
     * @description List a user’s connected applications
     */
    post: operations["itemApplicationList"];
  };
  "/item/application/unlink": {
    /**
     * Unlink a user’s connected application
     * @description Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.
     *
     * This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).
     *
     * This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
     */
    post: operations["itemApplicationUnlink"];
  };
  "/item/application/scopes/update": {
    /**
     * Update the scopes of access for a particular application
     * @description Enable consumers to update product access on selected accounts for an application.
     */
    post: operations["itemApplicationScopesUpdate"];
  };
  "/application/get": {
    /**
     * Retrieve information about a Plaid application
     * @description Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
     */
    post: operations["applicationGet"];
  };
  "/item/get": {
    /**
     * Retrieve an Item
     * @description Returns information about the status of an Item.
     */
    post: operations["itemGet"];
  };
  "/auth/get": {
    /**
     * Retrieve auth data
     * @description The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.
     *
     * Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     *
     * Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
     */
    post: operations["authGet"];
  };
  "/transactions/get": {
    /**
     * Get transaction data
     * @description Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.
     *
     * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.
     *
     * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).
     *
     * Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.
     *
     * Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.
     *
     * Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     */
    post: operations["transactionsGet"];
  };
  "/transactions/refresh": {
    /**
     * Refresh transaction data
     * @description `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.
     *
     * `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     */
    post: operations["transactionsRefresh"];
  };
  "/transactions/recurring/get": {
    /**
     * Fetch recurring transaction streams
     * @description The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.
     *
     * This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     *
     * This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.
     *
     * After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     */
    post: operations["transactionsRecurringGet"];
  };
  "/transactions/recurring/deactivate": {
  };
  "/transactions/sync": {
    /**
     * Get incremental transaction updates on an Item
     * @description The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.
     *
     * `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).
     *
     * This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.
     *
     * Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.
     *
     * In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as "adds"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.
     *
     * Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.
     *
     * When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.
     *
     * Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.
     *
     * For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
     *
     * To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
     *
     * `/transactions/sync` does not directly return balance data. To get the balance for an account, call `/accounts/get`, which is a free-to-use endpoint that will return the cached balance as of the last successful transactions update.
     */
    post: operations["transactionsSync"];
  };
  "/transactions/enrich": {
    /**
     * Enrich locally-held transaction data
     * @description The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
     */
    post: operations["transactionsEnrich"];
  };
  "/institutions/get": {
    /**
     * Get details of all supported institutions
     * @description Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.
     *
     * If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
     */
    post: operations["institutionsGet"];
  };
  "/institutions/search": {
    /**
     * Search institutions
     * @description Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.
     *
     * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
     */
    post: operations["institutionsSearch"];
  };
  "/institutions/get_by_id": {
    /**
     * Get details of an institution
     * @description Returns a JSON response containing details on a specified financial institution currently supported by Plaid.
     *
     * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
     */
    post: operations["institutionsGetById"];
  };
  "/item/remove": {
    /**
     * Remove an Item
     * @description The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.
     *
     * Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.
     *
     * Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.
     *
     * API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
     */
    post: operations["itemRemove"];
  };
  "/accounts/get": {
    /**
     * Retrieve accounts
     * @description The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.
     * For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.
     *
     * `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.
     *
     * For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
     */
    post: operations["accountsGet"];
  };
  "/categories/get": {
    /**
     * Get categories
     * @description Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
     *
     * All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
     */
    post: operations["categoriesGet"];
  };
  "/sandbox/processor_token/create": {
    /**
     * Create a test Item and processor token
     * @description Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
     */
    post: operations["sandboxProcessorTokenCreate"];
  };
  "/sandbox/public_token/create": {
    /**
     * Create a test Item
     * @description Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
     */
    post: operations["sandboxPublicTokenCreate"];
  };
  "/sandbox/item/fire_webhook": {
    /**
     * Fire a test webhook
     * @description The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:
     *
     * `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
     *
     * `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.
     *
     * `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.
     *
     * `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.
     *
     * `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
     *
     * `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
     *
     * `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
     *
     * `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
     *
     * Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type `TRANSFER`).
     */
    post: operations["sandboxItemFireWebhook"];
  };
  "/accounts/balance/get": {
    /**
     * Retrieve real-time balance data
     * @description The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
     */
    post: operations["accountsBalanceGet"];
  };
  "/identity/get": {
    /**
     * Retrieve identity data
     * @description The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.
     *
     * This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     *
     * Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
     */
    post: operations["identityGet"];
  };
  "/identity/match": {
    /**
     * Retrieve identity match score
     * @description The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.
     *
     * Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
     *
     * This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     */
    post: operations["identityMatch"];
  };
  "/identity/refresh": {
    /**
     * Refresh identity data
     * @description `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).
     * `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     */
    post: operations["identityRefresh"];
  };
  "/dashboard_user/get": {
    /**
     * Retrieve a dashboard user
     * @description Retrieve information about a dashboard user.
     */
    post: operations["dashboardUserGet"];
  };
  "/dashboard_user/list": {
    /**
     * List dashboard users
     * @description List all dashboard users associated with your account.
     */
    post: operations["dashboardUserList"];
  };
  "/identity_verification/create": {
    /**
     * Create a new identity verification
     * @description Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided.
     * If you don't know whether the associated user already has an active Identity Verification, you can specify `"is_idempotent": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.
     *
     * You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
     */
    post: operations["identityVerificationCreate"];
  };
  "/identity_verification/get": {
    /**
     * Retrieve Identity Verification
     * @description Retrieve a previously created identity verification.
     */
    post: operations["identityVerificationGet"];
  };
  "/identity_verification/list": {
    /**
     * List Identity Verifications
     * @description Filter and list Identity Verifications created by your account
     */
    post: operations["identityVerificationList"];
  };
  "/identity_verification/retry": {
    /**
     * Retry an Identity Verification
     * @description Allow a customer to retry their identity verification
     */
    post: operations["identityVerificationRetry"];
  };
  "/watchlist_screening/entity/create": {
    /**
     * Create a watchlist screening for an entity
     * @description Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     */
    post: operations["watchlistScreeningEntityCreate"];
  };
  "/watchlist_screening/entity/get": {
    /**
     * Get an entity screening
     * @description Retrieve an entity watchlist screening.
     */
    post: operations["watchlistScreeningEntityGet"];
  };
  "/watchlist_screening/entity/history/list": {
    /**
     * List history for entity watchlist screenings
     * @description List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     */
    post: operations["watchlistScreeningEntityHistoryList"];
  };
  "/watchlist_screening/entity/hit/list": {
    /**
     * List hits for entity watchlist screenings
     * @description List all hits for the entity watchlist screening.
     */
    post: operations["watchlistScreeningEntityHitList"];
  };
  "/watchlist_screening/entity/list": {
    /**
     * List entity watchlist screenings
     * @description List all entity screenings.
     */
    post: operations["watchlistScreeningEntityList"];
  };
  "/watchlist_screening/entity/program/get": {
    /**
     * Get entity watchlist screening program
     * @description Get an entity watchlist screening program
     */
    post: operations["watchlistScreeningEntityProgramGet"];
  };
  "/watchlist_screening/entity/program/list": {
    /**
     * List entity watchlist screening programs
     * @description List all entity watchlist screening programs
     */
    post: operations["watchlistScreeningEntityProgramList"];
  };
  "/watchlist_screening/entity/review/create": {
    /**
     * Create a review for an entity watchlist screening
     * @description Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     */
    post: operations["watchlistScreeningEntityReviewCreate"];
  };
  "/watchlist_screening/entity/review/list": {
    /**
     * List reviews for entity watchlist screenings
     * @description List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     */
    post: operations["watchlistScreeningEntityReviewList"];
  };
  "/watchlist_screening/entity/update": {
    /**
     * Update an entity screening
     * @description Update an entity watchlist screening.
     */
    post: operations["watchlistScreeningEntityUpdate"];
  };
  "/watchlist_screening/individual/create": {
    /**
     * Create a watchlist screening for a person
     * @description Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
     */
    post: operations["watchlistScreeningIndividualCreate"];
  };
  "/watchlist_screening/individual/get": {
    /**
     * Retrieve an individual watchlist screening
     * @description Retrieve a previously created individual watchlist screening
     */
    post: operations["watchlistScreeningIndividualGet"];
  };
  "/watchlist_screening/individual/history/list": {
    /**
     * List history for individual watchlist screenings
     * @description List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
     */
    post: operations["watchlistScreeningIndividualHistoryList"];
  };
  "/watchlist_screening/individual/hit/list": {
    /**
     * List hits for individual watchlist screening
     * @description List all hits found by Plaid for a particular individual watchlist screening.
     */
    post: operations["watchlistScreeningIndividualHitList"];
  };
  "/watchlist_screening/individual/list": {
    /**
     * List Individual Watchlist Screenings
     * @description List previously created watchlist screenings for individuals
     */
    post: operations["watchlistScreeningIndividualList"];
  };
  "/watchlist_screening/individual/program/get": {
    /**
     * Get individual watchlist screening program
     * @description Get an individual watchlist screening program
     */
    post: operations["watchlistScreeningIndividualProgramGet"];
  };
  "/watchlist_screening/individual/program/list": {
    /**
     * List individual watchlist screening programs
     * @description List all individual watchlist screening programs
     */
    post: operations["watchlistScreeningIndividualProgramList"];
  };
  "/watchlist_screening/individual/review/create": {
    /**
     * Create a review for an individual watchlist screening
     * @description Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
     */
    post: operations["watchlistScreeningIndividualReviewCreate"];
  };
  "/watchlist_screening/individual/review/list": {
    /**
     * List reviews for individual watchlist screenings
     * @description List all reviews for the individual watchlist screening.
     */
    post: operations["watchlistScreeningIndividualReviewList"];
  };
  "/watchlist_screening/individual/update": {
    /**
     * Update individual watchlist screening
     * @description Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
     */
    post: operations["watchlistScreeningIndividualUpdate"];
  };
  "/beacon/user/create": {
    /**
     * Create a Beacon User
     * @description Create and scan a Beacon User against your Beacon Program, according to your program's settings.
     *
     * When you submit a new user to `/beacon/user/create`, several checks are performed immediately:
     *
     *   - The user's PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program's "Duplicate Information Filtering" settings, the user will be returned with a status of `pending_review`.
     *
     *   - The user's PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user's data matches a fraud report that your team created, the user will be returned with a status of `rejected`.
     *
     *   - Finally, the user's PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
     */
    post: operations["beaconUserCreate"];
  };
  "/beacon/user/get": {
    /**
     * Get a Beacon User
     * @description Fetch a Beacon User.
     *
     * The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
     */
    post: operations["beaconUserGet"];
  };
  "/beacon/user/review": {
    /**
     * Review a Beacon User
     * @description Update the status of a Beacon User.
     *
     * When updating a Beacon User's status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:
     *
     * 1. Whether there are any associated Beacon Reports connected to the Beacon User, and
     * 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.
     *
     * When updating a Beacon User's status to "rejected", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed.
     * When updating a Beacon User's status to "cleared", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User's status to "cleared".
     * There are no restrictions on updating a Beacon User's status to "pending_review".
     *
     * If these conditions are not met, the request will be rejected with an error explaining the issue.
     */
    post: operations["beaconUserReview"];
  };
  "/beacon/report/create": {
    /**
     * Create a Beacon Report
     * @description Create a fraud report for a given Beacon User.
     *
     * Note: If you are creating users with the express purpose of providing historical fraud data, you should use the `/beacon/user/create` endpoint instead and embed the fraud report in the request. This will ensure that the Beacon User you create will not be subject to any billing costs.
     */
    post: operations["beaconReportCreate"];
  };
  "/beacon/report/list": {
    /**
     * List Beacon Reports for a Beacon User
     * @description Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     */
    post: operations["beaconReportList"];
  };
  "/beacon/report_syndication/list": {
    /**
     * List Beacon Report Syndications for a Beacon User
     * @description Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
     */
    post: operations["beaconReportSyndicationList"];
  };
  "/beacon/report/get": {
    /**
     * Get a Beacon Report
     * @description Returns a Beacon report for a given Beacon report id.
     */
    post: operations["beaconReportGet"];
  };
  "/processor/auth/get": {
    /**
     * Retrieve Auth data
     * @description The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.
     *
     * Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
     */
    post: operations["processorAuthGet"];
  };
  "/processor/account/get": {
    /**
     * Retrieve the account associated with a processor token
     * @description This endpoint returns the account associated with a given processor token.
     *
     * This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
     */
    post: operations["processorAccountGet"];
  };
  "/processor/transactions/get": {
    /**
     * Get transaction data
     * @description The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.
     *
     * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).
     *
     * Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.
     *
     * Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.
     *
     * Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn't. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     *
     * To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
     */
    post: operations["processorTransactionsGet"];
  };
  "/processor/transactions/sync": {
    /**
     * Get incremental transaction updates on a processor token
     * @description This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.
     *
     * The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.
     *
     * This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.
     *
     * Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.
     *
     * In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as "adds"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.
     *
     * Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.
     *
     * When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.
     *
     * Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.
     *
     * Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
     *
     * To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
     */
    post: operations["processorTransactionsSync"];
  };
  "/processor/transactions/refresh": {
    /**
     * Refresh transaction data
     * @description `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on a processor token from that institution.
     *
     * `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     */
    post: operations["processorTransactionsRefresh"];
  };
  "/processor/transactions/recurring/get": {
    /**
     * Fetch recurring transaction streams
     * @description The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.
     *
     * This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     *
     * This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.
     *
     * After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
     *
     * To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
     */
    post: operations["processorTransactionsRecurringGet"];
  };
  "/processor/signal/evaluate": {
    /**
     * Evaluate a planned ACH transaction
     * @description Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
     *
     * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).
     *
     * Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
     */
    post: operations["processorSignalEvaluate"];
  };
  "/processor/signal/decision/report": {
    /**
     * Report whether you initiated an ACH transaction
     * @description After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.
     */
    post: operations["processorSignalDecisionReport"];
  };
  "/processor/signal/return/report": {
    /**
     * Report a return for an ACH transaction
     * @description Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     */
    post: operations["processorSignalReturnReport"];
  };
  "/processor/signal/prepare": {
    /**
     * Opt-in a processor token to Signal
     * @description When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.
     *
     * If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
     */
    post: operations["processorSignalPrepare"];
  };
  "/processor/bank_transfer/create": {
    /**
     * Create a bank transfer as a processor
     * @description Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
     */
    post: operations["processorBankTransferCreate"];
  };
  "/processor/identity/get": {
    /**
     * Retrieve Identity data
     * @description The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
     */
    post: operations["processorIdentityGet"];
  };
  "/processor/identity/match": {
    /**
     * Retrieve identity match score
     * @description The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.
     *
     * Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
     *
     * This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
     */
    post: operations["processorIdentityMatch"];
  };
  "/processor/balance/get": {
    /**
     * Retrieve Balance data
     * @description The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
     */
    post: operations["processorBalanceGet"];
  };
  "/item/webhook/update": {
    /**
     * Update Webhook URL
     * @description The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
     */
    post: operations["itemWebhookUpdate"];
  };
  "/item/access_token/invalidate": {
    /**
     * Invalidate access_token
     * @description By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.
     *
     * You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
     */
    post: operations["itemAccessTokenInvalidate"];
  };
  "/webhook_verification_key/get": {
    /**
     * Get webhook verification key
     * @description Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.
     *
     * The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
     */
    post: operations["webhookVerificationKeyGet"];
  };
  "/liabilities/get": {
    /**
     * Retrieve Liabilities data
     * @description The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).
     *
     * The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
     *
     * Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
     */
    post: operations["liabilitiesGet"];
  };
  "/payment_initiation/recipient/create": {
    /**
     * Create payment recipient
     * @description Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.
     *
     * It is recommended to use `bacs` in the UK and `iban` in EU.
     *
     * The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
     */
    post: operations["paymentInitiationRecipientCreate"];
  };
  "/payment_initiation/payment/reverse": {
    /**
     * Reverse an existing payment
     * @description Reverse a settled payment from a Plaid virtual account.
     *
     * The original payment must be in a settled state to be refunded.
     * To refund partially, specify the amount as part of the request.
     * If the amount is not specified, the refund amount will be equal to all
     * of the remaining payment amount that has not been refunded yet.
     *
     * The refund will go back to the source account that initiated the payment.
     * The original payment must have been initiated to a Plaid virtual account
     * so that this account can be used to initiate the refund.
     */
    post: operations["paymentInitiationPaymentReverse"];
  };
  "/payment_initiation/recipient/get": {
    /**
     * Get payment recipient
     * @description Get details about a payment recipient you have previously created.
     */
    post: operations["paymentInitiationRecipientGet"];
  };
  "/payment_initiation/recipient/list": {
    /**
     * List payment recipients
     * @description The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
     */
    post: operations["paymentInitiationRecipientList"];
  };
  "/payment_initiation/payment/create": {
    /**
     * Create a payment
     * @description After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.
     *
     * Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.
     *
     * In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
     */
    post: operations["paymentInitiationPaymentCreate"];
  };
  "/payment_initiation/payment/token/create": {
    /**
     * Create payment token
     * @deprecated
     * @description The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.
     *
     * The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
     */
    post: operations["createPaymentToken"];
  };
  "/payment_initiation/consent/create": {
    /**
     * Create payment consent
     * @description The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.
     *
     * Consents can be limited in time and scope, and have constraints that describe limitations for payments.
     */
    post: operations["paymentInitiationConsentCreate"];
  };
  "/payment_initiation/consent/get": {
    /**
     * Get payment consent
     * @description The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
     */
    post: operations["paymentInitiationConsentGet"];
  };
  "/payment_initiation/consent/revoke": {
    /**
     * Revoke payment consent
     * @description The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
     */
    post: operations["paymentInitiationConsentRevoke"];
  };
  "/payment_initiation/consent/payment/execute": {
    /**
     * Execute a single payment using consent
     * @description The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
     */
    post: operations["paymentInitiationConsentPaymentExecute"];
  };
  "/sandbox/item/reset_login": {
    /**
     * Force a Sandbox Item into an error state
     * @description `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.
     *
     *
     * In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
     */
    post: operations["sandboxItemResetLogin"];
  };
  "/sandbox/item/set_verification_status": {
    /**
     * Set verification status for Sandbox account
     * @description The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.
     *
     * Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).
     *
     * For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
     */
    post: operations["sandboxItemSetVerificationStatus"];
  };
  "/item/public_token/exchange": {
    /**
     * Exchange public token for an access token
     * @description Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.
     *
     * The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
     */
    post: operations["itemPublicTokenExchange"];
  };
  "/item/public_token/create": {
    /**
     * Create public token
     * @description Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).
     *
     * If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.
     *
     * A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.
     *
     * The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
     */
    post: operations["itemCreatePublicToken"];
  };
  "/user/create": {
    /**
     * Create user
     * @description This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
     *
     * If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.
     *
     * Ensure that you store the `user_token` along with your user's identifier in your database, as it is not possible to retrieve a previously created `user_token`.
     */
    post: operations["userCreate"];
  };
  "/user/update": {
    /**
     * Update user information
     * @description This endpoint is used to update user information associated with an existing `user_token`. The `user_token` should be in the response of `/user/create` call
     *
     * If you call the endpoint with a non-exist `user_token`, the call will fail with an error message indicating that the user token is not found.
     */
    post: operations["userUpdate"];
  };
  "/credit/sessions/get": {
    /**
     * Retrieve Link sessions for your user
     * @description This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.
     *
     * These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
     */
    post: operations["creditSessionsGet"];
  };
  "/payment_initiation/payment/get": {
    /**
     * Get payment details
     * @description The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
     */
    post: operations["paymentInitiationPaymentGet"];
  };
  "/payment_initiation/payment/list": {
    /**
     * List payments
     * @description The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
     */
    post: operations["paymentInitiationPaymentList"];
  };
  "/investments/holdings/get": {
    /**
     * Get Investment holdings
     * @description The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
     */
    post: operations["investmentsHoldingsGet"];
  };
  "/investments/transactions/get": {
    /**
     * Get investment transactions
     * @description The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.
     *
     * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.
     *
     * Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
     *
     * Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
     *
     * Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
     */
    post: operations["investmentsTransactionsGet"];
  };
  "/investments/refresh": {
    /**
     * Refresh investment data
     * @description `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. "Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.
     * `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
     */
    post: operations["investmentsRefresh"];
  };
  "/investments/auth/get": {
    /**
     * Get data needed to authorize an investments transfer
     * @description The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
     */
    post: operations["investmentsAuthGet"];
  };
  "/processor/token/create": {
    /**
     * Create processor token
     * @description Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
     */
    post: operations["processorTokenCreate"];
  };
  "/processor/token/permissions/set": {
    /**
     * Control a processor's access to products
     * @description Used to control a processor's access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor's needs change.
     */
    post: operations["processorTokenPermissionsSet"];
  };
  "/processor/token/permissions/get": {
    /**
     * Get a processor token's product permissions
     * @description Used to get a processor token's product permissions. The `products` field will be an empty list if the processor can access all available products.
     */
    post: operations["processorTokenPermissionsGet"];
  };
  "/processor/token/webhook/update": {
    /**
     * Update a processor token's webhook URL
     * @description This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
     */
    post: operations["processorTokenWebhookUpdate"];
  };
  "/processor/stripe/bank_account_token/create": {
    /**
     * Create Stripe bank account token
     * @description
     * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
     *
     * Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user's bank account information changes or they revoke Plaid's permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.
     *
     * Bank account tokens can also be revoked, using `/item/remove`.
     */
    post: operations["processorStripeBankAccountTokenCreate"];
  };
  "/processor/apex/processor_token/create": {
    /**
     * Create Apex bank account token
     * @description Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
     */
    post: operations["processorApexProcessorTokenCreate"];
  };
  "/deposit_switch/create": {
    /**
     * Create a deposit switch
     * @description This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     */
    post: operations["depositSwitchCreate"];
  };
  "/item/import": {
    /**
     * Import Item
     * @description `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.
     *
     * Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
     */
    post: operations["itemImport"];
  };
  "/deposit_switch/token/create": {
    /**
     * Create a deposit switch token
     * @description In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
     */
    post: operations["depositSwitchTokenCreate"];
  };
  "/link/token/create": {
    /**
     * Create Link Token
     * @description The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.
     *
     * A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
     */
    post: operations["linkTokenCreate"];
  };
  "/link/token/get": {
    /**
     * Get Link Token
     * @description The `/link/token/get` endpoint gets information about a previously-created `link_token` using the
     * `/link/token/create` endpoint. It can be useful for debugging purposes.
     */
    post: operations["linkTokenGet"];
  };
  "/link/oauth/correlation_id/exchange": {
    /**
     * Exchange the Link Correlation Id for a Link Token
     * @description Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for 'payment_initiation' products and is provided to the client via the OAuth `redirect_uri` as a query parameter.
     * The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the 'link_token'.
     */
    post: operations["linkOauthCorrelationIdExchange"];
  };
  "/deposit_switch/get": {
    /**
     * Retrieve a deposit switch
     * @description This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.
     */
    post: operations["depositSwitchGet"];
  };
  "/transfer/get": {
    /**
     * Retrieve a transfer
     * @description The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
     */
    post: operations["transferGet"];
  };
  "/transfer/recurring/get": {
    /**
     * Retrieve a recurring transfer
     * @description The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
     */
    post: operations["transferRecurringGet"];
  };
  "/bank_transfer/get": {
    /**
     * Retrieve a bank transfer
     * @description The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
     */
    post: operations["bankTransferGet"];
  };
  "/transfer/authorization/create": {
    /**
     * Create a transfer authorization
     * @description Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`.
     *
     * There are three possible outcomes to calling this endpoint: If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.
     *
     * In Plaid's Sandbox environment the decisions will be returned as follows:
     *
     *   - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.
     *
     *   - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).
     *
     *   - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).
     *
     *   - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     *
     *   - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
     */
    post: operations["transferAuthorizationCreate"];
  };
  "/transfer/balance/get": {
    /**
     * Retrieve a balance held with Plaid
     * @description Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
     */
    post: operations["transferBalanceGet"];
  };
  "/transfer/capabilities/get": {
    /**
     * Get RTP eligibility information of a transfer
     * @description Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the "First Platypus Bank" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
     */
    post: operations["transferCapabilitiesGet"];
  };
  "/transfer/configuration/get": {
    /**
     * Get transfer product configuration
     * @description Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
     */
    post: operations["transferConfigurationGet"];
  };
  "/transfer/ledger/get": {
    /**
     * Retrieve Plaid Ledger balance
     * @description Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
     */
    post: operations["transferLedgerGet"];
  };
  "/transfer/ledger/distribute": {
    /**
     * Move available balance between the ledgers of the platform and one of its originators
     * @description Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
     */
    post: operations["transferLedgerDistribute"];
  };
  "/transfer/ledger/deposit": {
    /**
     * Deposit funds into a Plaid Ledger balance
     * @description Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
     */
    post: operations["transferLedgerDeposit"];
  };
  "/transfer/ledger/withdraw": {
    /**
     * Withdraw funds from a Plaid Ledger balance
     * @description Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
     */
    post: operations["transferLedgerWithdraw"];
  };
  "/transfer/originator/funding_account/update": {
    /**
     * Update the funding account associated with the originator
     * @description Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
     */
    post: operations["transferOriginatorFundingAccountUpdate"];
  };
  "/transfer/metrics/get": {
    /**
     * Get transfer product usage metrics
     * @description Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
     */
    post: operations["transferMetricsGet"];
  };
  "/transfer/create": {
    /**
     * Create a transfer
     * @description Use the `/transfer/create` endpoint to initiate a new transfer.
     */
    post: operations["transferCreate"];
  };
  "/transfer/recurring/create": {
    /**
     * Create a recurring transfer
     * @description Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
     */
    post: operations["transferRecurringCreate"];
  };
  "/bank_transfer/create": {
    /**
     * Create a bank transfer
     * @description Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
     */
    post: operations["bankTransferCreate"];
  };
  "/transfer/list": {
    /**
     * List transfers
     * @description Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
     */
    post: operations["transferList"];
  };
  "/transfer/recurring/list": {
    /**
     * List recurring transfers
     * @description Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
     */
    post: operations["transferRecurringList"];
  };
  "/bank_transfer/list": {
    /**
     * List bank transfers
     * @description Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
     */
    post: operations["bankTransferList"];
  };
  "/transfer/cancel": {
    /**
     * Cancel a transfer
     * @description Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
     */
    post: operations["transferCancel"];
  };
  "/transfer/recurring/cancel": {
    /**
     * Cancel a recurring transfer.
     * @description Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn't been submitted to bank will be cancelled.
     */
    post: operations["transferRecurringCancel"];
  };
  "/bank_transfer/cancel": {
    /**
     * Cancel a bank transfer
     * @description Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
     */
    post: operations["bankTransferCancel"];
  };
  "/transfer/event/list": {
    /**
     * List transfer events
     * @description Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
     */
    post: operations["transferEventList"];
  };
  "/bank_transfer/event/list": {
    /**
     * List bank transfer events
     * @description Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
     */
    post: operations["bankTransferEventList"];
  };
  "/transfer/event/sync": {
    /**
     * Sync transfer events
     * @description `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
     */
    post: operations["transferEventSync"];
  };
  "/bank_transfer/event/sync": {
    /**
     * Sync bank transfer events
     * @description `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
     */
    post: operations["bankTransferEventSync"];
  };
  "/transfer/sweep/get": {
    /**
     * Retrieve a sweep
     * @description The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
     */
    post: operations["transferSweepGet"];
  };
  "/bank_transfer/sweep/get": {
    /**
     * Retrieve a sweep
     * @description The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
     */
    post: operations["bankTransferSweepGet"];
  };
  "/transfer/sweep/list": {
    /**
     * List sweeps
     * @description The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
     */
    post: operations["transferSweepList"];
  };
  "/bank_transfer/sweep/list": {
    /**
     * List sweeps
     * @description The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
     */
    post: operations["bankTransferSweepList"];
  };
  "/bank_transfer/balance/get": {
    /**
     * Get balance of your Bank Transfer account
     * @description Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.
     *
     * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
     *
     * Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
     */
    post: operations["bankTransferBalanceGet"];
  };
  "/bank_transfer/migrate_account": {
    /**
     * Migrate account into Bank Transfers
     * @description As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     */
    post: operations["bankTransferMigrateAccount"];
  };
  "/transfer/migrate_account": {
    /**
     * Migrate account into Transfers
     * @description As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
     */
    post: operations["transferMigrateAccount"];
  };
  "/transfer/intent/create": {
    /**
     * Create a transfer intent object to invoke the Transfer UI
     * @description Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
     */
    post: operations["transferIntentCreate"];
  };
  "/transfer/intent/get": {
    /**
     * Retrieve more information about a transfer intent
     * @description Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
     */
    post: operations["transferIntentGet"];
  };
  "/transfer/repayment/list": {
    /**
     * Lists historical repayments
     * @description The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
     */
    post: operations["transferRepaymentList"];
  };
  "/transfer/repayment/return/list": {
    /**
     * List the returns included in a repayment
     * @description The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
     */
    post: operations["transferRepaymentReturnList"];
  };
  "/transfer/originator/create": {
    /**
     * Create a new originator
     * @description Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
     */
    post: operations["transferOriginatorCreate"];
  };
  "/transfer/questionnaire/create": {
    /**
     * Generate a Plaid-hosted onboarding UI URL.
     * @description The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
     */
    post: operations["transferQuestionnaireCreate"];
  };
  "/transfer/diligence/submit": {
    /**
     * Submit transfer diligence on behalf of the originator
     * @description Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
     */
    post: operations["transferDiligenceSubmit"];
  };
  "/transfer/diligence/document/upload": {
    /**
     * Upload transfer diligence document on behalf of the originator
     * @description Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data.
     * You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
     */
    post: operations["transferDiligenceDocumentUpload"];
  };
  "/transfer/originator/get": {
    /**
     * Get status of an originator's onboarding
     * @description The `/transfer/originator/get` endpoint gets status updates for an originator's onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
     */
    post: operations["transferOriginatorGet"];
  };
  "/transfer/originator/list": {
    /**
     * Get status of all originators' onboarding
     * @description The `/transfer/originator/list` endpoint gets status updates for all of your originators' onboarding. This information is also available via the Plaid dashboard.
     */
    post: operations["transferOriginatorList"];
  };
  "/transfer/refund/create": {
    /**
     * Create a refund
     * @description Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.
     *
     * Processing of the refund will not occur until at least 4 business days following the transfer's settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
     */
    post: operations["transferRefundCreate"];
  };
  "/transfer/refund/get": {
    /**
     * Retrieve a refund
     * @description The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
     */
    post: operations["transferRefundGet"];
  };
  "/transfer/refund/cancel": {
    /**
     * Cancel a refund
     * @description Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
     */
    post: operations["transferRefundCancel"];
  };
  "/sandbox/bank_transfer/simulate": {
    /**
     * Simulate a bank transfer event in Sandbox
     * @description Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     */
    post: operations["sandboxBankTransferSimulate"];
  };
  "/sandbox/transfer/sweep/simulate": {
    /**
     * Simulate creating a sweep
     * @description Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
     */
    post: operations["sandboxTransferSweepSimulate"];
  };
  "/sandbox/transfer/simulate": {
    /**
     * Simulate a transfer event in Sandbox
     * @description Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     */
    post: operations["sandboxTransferSimulate"];
  };
  "/sandbox/transfer/refund/simulate": {
    /**
     * Simulate a refund event in Sandbox
     * @description Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
     */
    post: operations["sandboxTransferRefundSimulate"];
  };
  "/sandbox/transfer/ledger/simulate_available": {
    /**
     * Simulate converting pending balance to available balance
     * @description Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
     */
    post: operations["sandboxTransferLedgerSimulateAvailable"];
  };
  "/sandbox/transfer/ledger/deposit/simulate": {
    /**
     * Simulate a ledger deposit event in Sandbox
     * @description Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
     */
    post: operations["sandboxTransferLedgerDepositSimulate"];
  };
  "/sandbox/transfer/ledger/withdraw/simulate": {
    /**
     * Simulate a ledger withdraw event in Sandbox
     * @description Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
     */
    post: operations["sandboxTransferLedgerWithdrawSimulate"];
  };
  "/sandbox/transfer/repayment/simulate": {
    /**
     * Trigger the creation of a repayment
     * @description Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
     */
    post: operations["sandboxTransferRepaymentSimulate"];
  };
  "/sandbox/transfer/fire_webhook": {
    /**
     * Manually fire a Transfer webhook
     * @description Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
     */
    post: operations["sandboxTransferFireWebhook"];
  };
  "/sandbox/transfer/test_clock/create": {
    /**
     * Create a test clock
     * @description Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.
     *
     * A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.
     *
     * A test clock can be associated with up to 5 recurring transfers.
     */
    post: operations["sandboxTransferTestClockCreate"];
  };
  "/sandbox/transfer/test_clock/advance": {
    /**
     * Advance a test clock
     * @description Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.
     *
     * A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.
     *
     * If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.
     *
     * For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.
     *
     * The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.
     *
     * For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
     */
    post: operations["sandboxTransferTestClockAdvance"];
  };
  "/sandbox/transfer/test_clock/get": {
    /**
     * Get a test clock
     * @description Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
     */
    post: operations["sandboxTransferTestClockGet"];
  };
  "/sandbox/transfer/test_clock/list": {
    /**
     * List test clocks
     * @description Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
     */
    post: operations["sandboxTransferTestClockList"];
  };
  "/sandbox/payment_profile/reset_login": {
    /**
     * Reset the login of a Payment Profile
     * @deprecated
     * @description `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.
     *
     *  After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.
     *
     *  In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
     */
    post: operations["sandboxPaymentProfileResetLogin"];
  };
  "/employers/search": {
    /**
     * Search employer database
     * @description `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.
     *
     * The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
     */
    post: operations["employersSearch"];
  };
  "/income/verification/create": {
    /**
     * (Deprecated) Create an income verification instance
     * @deprecated
     * @description `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
     */
    post: operations["incomeVerificationCreate"];
  };
  "/income/verification/paystubs/get": {
    /**
     * (Deprecated) Retrieve information from the paystubs used for income verification
     * @deprecated
     * @description `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     */
    post: operations["incomeVerificationPaystubsGet"];
  };
  "/income/verification/documents/download": {
    /**
     * (Deprecated) Download the original documents used for income verification
     * @deprecated
     * @description `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.
     *
     * If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available
     * for download from the payroll provider will be available from this endpoint.
     *
     * The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file.
     * If not, the response will contain all documents associated with the verification.
     *
     * The `request_id` is returned in the `Plaid-Request-ID` header.
     */
    post: operations["incomeVerificationDocumentsDownload"];
  };
  "/income/verification/taxforms/get": {
    /**
     * (Deprecated) Retrieve information from the tax documents used for income verification
     * @deprecated
     * @description `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
     */
    post: operations["incomeVerificationTaxformsGet"];
  };
  "/income/verification/precheck": {
    /**
     * (Deprecated) Check digital income verification eligibility and optimize conversion
     * @deprecated
     * @description `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
     *
     * While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
     */
    post: operations["incomeVerificationPrecheck"];
  };
  "/employment/verification/get": {
    /**
     * (Deprecated) Retrieve a summary of an individual's employment information
     * @deprecated
     * @description `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.
     *
     * This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
     */
    post: operations["employmentVerificationGet"];
  };
  "/deposit_switch/alt/create": {
    /**
     * Create a deposit switch without using Plaid Exchange
     * @description This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
     */
    post: operations["depositSwitchAltCreate"];
  };
  "/credit/audit_copy_token/create": {
    /**
     * Create Asset or Income Report Audit Copy Token
     * @description Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).
     *
     * Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
     */
    post: operations["creditAuditCopyTokenCreate"];
  };
  "/credit/audit_copy_token/remove": {
    /**
     * Remove an Audit Copy token
     * @description The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
     */
    post: operations["creditReportAuditCopyRemove"];
  };
  "/credit/asset_report/freddie_mac/get": {
    /**
     * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
     * @description The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format.
     */
    post: operations["creditAssetReportFreddieMacGet"];
  };
  "/credit/freddie_mac/reports/get": {
    /**
     * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
     * @description The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
     */
    post: operations["creditFreddieMacReportsGet"];
  };
  "/beta/credit/v1/bank_employment/get": {
    /**
     * Retrieve information from the bank accounts used for employment verification
     * @description `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
     */
    post: operations["creditBankEmploymentGet"];
  };
  "/credit/bank_income/get": {
    /**
     * Retrieve information from the bank accounts used for income verification
     * @description `/credit/bank_income/get` returns the bank income report(s) for a specified user.
     */
    post: operations["creditBankIncomeGet"];
  };
  "/credit/bank_income/pdf/get": {
    /**
     * Retrieve information from the bank accounts used for income verification in PDF format
     * @description `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
     */
    post: operations["creditBankIncomePdfGet"];
  };
  "/credit/bank_income/refresh": {
    /**
     * Refresh a user's bank income information
     * @description `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
     */
    post: operations["creditBankIncomeRefresh"];
  };
  "/credit/bank_income/webhook/update": {
    /**
     * Subscribe and unsubscribe to proactive notifications for a user's income profile
     * @description `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.
     *
     * If a user is subscribed, on significant changes to the user's income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
     */
    post: operations["creditBankIncomeWebhookUpdate"];
  };
  "/credit/payroll_income/parsing_config/update": {
    /**
     * Update the parsing configuration for a document income verification
     * @description `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
     */
    post: operations["creditPayrollIncomeParsingConfigUpdate"];
  };
  "/credit/bank_statements/uploads/get": {
    /**
     * Retrieve data for a user's uploaded bank statements
     * @description `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
     */
    post: operations["creditBankStatementsUploadsGet"];
  };
  "/credit/payroll_income/get": {
    /**
     * Retrieve a user's payroll information
     * @description This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
     */
    post: operations["creditPayrollIncomeGet"];
  };
  "/credit/payroll_income/risk_signals/get": {
    /**
     * Retrieve fraud insights for a user's manually uploaded document(s).
     * @description `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.
     *
     * To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `fraud_risk`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.
     *
     * `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
     */
    post: operations["creditPayrollIncomeRiskSignalsGet"];
  };
  "/credit/payroll_income/precheck": {
    /**
     * Check income verification eligibility and optimize conversion
     * @deprecated
     * @description `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
     *
     * While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
     *
     * When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
     */
    post: operations["creditPayrollIncomePrecheck"];
  };
  "/credit/employment/get": {
    /**
     * Retrieve a summary of an individual's employment information
     * @description `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user.
     */
    post: operations["creditEmploymentGet"];
  };
  "/credit/payroll_income/refresh": {
    /**
     * Refresh a digital payroll income verification
     * @description `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
     */
    post: operations["creditPayrollIncomeRefresh"];
  };
  "/credit/relay/create": {
    /**
     * Create a relay token to share an Asset Report with a partner client (beta)
     * @description Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.
     *
     * To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
     */
    post: operations["creditRelayCreate"];
  };
  "/credit/relay/get": {
    /**
     * Retrieve the reports associated with a relay token that was shared with you (beta)
     * @description `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
     */
    post: operations["creditRelayGet"];
  };
  "/credit/relay/pdf/get": {
    /**
     * Retrieve the pdf reports associated with a relay token that was shared with you (beta)
     * @description `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.
     *
     * The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
     *
     * The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
     *
     * [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
     */
    post: operations["creditRelayPdfGet"];
  };
  "/credit/relay/refresh": {
    /**
     * Refresh a report of a relay token (beta)
     * @description The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
     */
    post: operations["creditRelayRefresh"];
  };
  "/credit/relay/remove": {
    /**
     * Remove relay token (beta)
     * @description The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
     */
    post: operations["creditRelayRemove"];
  };
  "/sandbox/bank_transfer/fire_webhook": {
    /**
     * Manually fire a Bank Transfer webhook
     * @description Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
     */
    post: operations["sandboxBankTransferFireWebhook"];
  };
  "/sandbox/income/fire_webhook": {
    /**
     * Manually fire an Income webhook
     * @description Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
     */
    post: operations["sandboxIncomeFireWebhook"];
  };
  "/sandbox/bank_income/fire_webhook": {
    /**
     * Manually fire a bank income webhook in sandbox
     * @description Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
     */
    post: operations["sandboxBankIncomeFireWebhook"];
  };
  "/sandbox/oauth/select_accounts": {
    /**
     * Save the selected accounts when connecting to the Platypus Oauth institution
     * @description Save the selected accounts when connecting to the Platypus Oauth institution
     */
    post: operations["sandboxOauthSelectAccounts"];
  };
  "/signal/evaluate": {
    /**
     * Evaluate a planned ACH transaction
     * @description Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
     *
     * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).
     *
     * Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
     */
    post: operations["signalEvaluate"];
  };
  "/signal/decision/report": {
    /**
     * Report whether you initiated an ACH transaction
     * @description After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
     */
    post: operations["signalDecisionReport"];
  };
  "/signal/return/report": {
    /**
     * Report a return for an ACH transaction
     * @description Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
     */
    post: operations["signalReturnReport"];
  };
  "/signal/prepare": {
    /**
     * Opt-in an Item to Signal
     * @description When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.
     *
     * If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.
     *
     * Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
     *
     * If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
     */
    post: operations["signalPrepare"];
  };
  "/wallet/create": {
    /**
     * Create an e-wallet
     * @description Create an e-wallet. The response is the newly created e-wallet object.
     */
    post: operations["walletCreate"];
  };
  "/wallet/get": {
    /**
     * Fetch an e-wallet
     * @description Fetch an e-wallet. The response includes the current balance.
     */
    post: operations["walletGet"];
  };
  "/wallet/list": {
    /**
     * Fetch a list of e-wallets
     * @description This endpoint lists all e-wallets in descending order of creation.
     */
    post: operations["walletList"];
  };
  "/wallet/transaction/execute": {
    /**
     * Execute a transaction using an e-wallet
     * @description Execute a transaction using the specified e-wallet.
     * Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction.
     * Transactions will settle in seconds to several days, depending on the underlying payment rail.
     */
    post: operations["walletTransactionExecute"];
  };
  "/wallet/transaction/get": {
    /**
     * Fetch an e-wallet transaction
     * @description Fetch a specific e-wallet transaction
     */
    post: operations["walletTransactionGet"];
  };
  "/wallet/transaction/list": {
    /**
     * List e-wallet transactions
     * @description This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
     */
    post: operations["walletTransactionList"];
  };
  "/beta/transactions/v1/enhance": {
    /**
     * enhance locally-held transaction data
     * @description The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.
     *
     * The product is currently in beta.
     */
    post: operations["transactionsEnhance"];
  };
  "/beta/transactions/rules/v1/create": {
    /**
     * Create transaction category rule
     * @description The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.
     *
     * Rules will be applied on the Item's transactions returned in `/transactions/get` response.
     *
     * The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
     */
    post: operations["transactionsRulesCreate"];
  };
  "/beta/transactions/rules/v1/list": {
    /**
     * Return a list of rules created for the Item associated with the access token.
     * @description The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
     */
    post: operations["transactionsRulesList"];
  };
  "/beta/transactions/rules/v1/remove": {
    /**
     * Remove transaction rule
     * @description The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
     */
    post: operations["transactionsRulesRemove"];
  };
  "/beta/transactions/user_insights/v1/get": {
    /**
     * Obtain user insights based on transactions sent through /transactions/enrich
     * @description The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.
     *
     * The product is currently in beta.
     */
    post: operations["transactionsUserInsightsGet"];
  };
  "/payment_profile/create": {
    /**
     * Create payment profile
     * @deprecated
     * @description Use `/payment_profile/create` endpoint to create a new payment profile.
     * To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field.
     * You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
     */
    post: operations["paymentProfileCreate"];
  };
  "/payment_profile/get": {
    /**
     * Get payment profile
     * @deprecated
     * @description Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
     */
    post: operations["paymentProfileGet"];
  };
  "/payment_profile/remove": {
    /**
     * Remove payment profile
     * @deprecated
     * @description Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
     */
    post: operations["paymentProfileRemove"];
  };
  "/partner/customer/create": {
    /**
     * Creates a new end customer for a Plaid reseller.
     * @description The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
     */
    post: operations["partnerCustomerCreate"];
  };
  "/partner/customer/get": {
    /**
     * Returns a Plaid reseller's end customer.
     * @description The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
     */
    post: operations["partnerCustomerGet"];
  };
  "/partner/customer/enable": {
    /**
     * Enables a Plaid reseller's end customer in the Production environment.
     * @description The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
     */
    post: operations["partnerCustomerEnable"];
  };
  "/partner/customer/remove": {
    /**
     * Removes a Plaid reseller's end customer.
     * @description The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
     */
    post: operations["partnerCustomerRemove"];
  };
  "/partner/customer/oauth_institutions/get": {
    /**
     * Returns OAuth-institution registration information for a given end customer.
     * @description The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
     */
    post: operations["partnerCustomerOauthInstitutionsGet"];
  };
  "/link_delivery/create": {
    /**
     * Create Hosted Link session
     * @description Use the `/link_delivery/create` endpoint to create a Hosted Link session.
     */
    post: operations["linkDeliveryCreate"];
  };
  "/link_delivery/get": {
    /**
     * Get Hosted Link session
     * @description Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
     */
    post: operations["linkDeliveryGet"];
  };
  "/fdx/notifications": {
    /**
     * Webhook receiver for fdx notifications
     * @description A generic webhook receiver endpoint for FDX Event Notifications
     */
    post: operations["fdxNotifications"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * @description The OAuth status of the update
     * @enum {string}
     */
    PartnerEndCustomerOAuthStatusUpdatedValues: "not-started" | "processing" | "approved" | "enabled" | "attention-required";
    /**
     * @description The Plaid environment the webhook was sent from
     * @enum {string}
     */
    WebhookEnvironmentValues: "development" | "sandbox" | "production";
    /** @description AuthGetRequest defines the request schema for `/auth/get` */
    AuthGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["AuthGetRequestOptions"];
    };
    /** @description An optional object to filter `/auth/get` results. */
    AuthGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item.
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
    };
    /** @description AuthGetResponse defines the response schema for `/auth/get` */
    AuthGetResponse: {
      /** @description The `accounts` for which numbers are being retrieved. */
      accounts: components["schemas"]["AccountBase"][];
      numbers: components["schemas"]["AuthGetNumbers"];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description An object containing identifying numbers used for making electronic transfers to and from the `accounts`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by any `accounts` for which data has been requested, the array for that type will be empty. */
    AuthGetNumbers: {
      /** @description An array of ACH numbers identifying accounts. */
      ach: components["schemas"]["NumbersACH"][];
      /** @description An array of EFT numbers identifying accounts. */
      eft: components["schemas"]["NumbersEFT"][];
      /** @description An array of IBAN numbers identifying accounts. */
      international: components["schemas"]["NumbersInternational"][];
      /** @description An array of BACS numbers identifying accounts. */
      bacs: components["schemas"]["NumbersBACS"][];
      [key: string]: unknown;
    };
    /** @description TransactionsGetRequest defines the request schema for `/transactions/get` */
    TransactionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      options?: components["schemas"]["TransactionsGetRequestOptions"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date
       * @description The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
       */
      start_date: string;
      /**
       * Format: date
       * @description The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
       */
      end_date: string;
    };
    /** @description An optional object to be used with the request. If specified, `options` must not be `null`. */
    TransactionsGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item
       *
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
      /**
       * @description The number of transactions to fetch.
       * @default 100
       */
      count?: number;
      /**
       * @description The number of transactions to skip. The default value is 0.
       * @default 0
       */
      offset?: number;
      /**
       * @description Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager, or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality).
       * @default false
       */
      include_original_description?: boolean | null;
      /**
       * @deprecated
       * @description Personal finance categories are now returned by default.
       * @default false
       */
      include_personal_finance_category_beta?: boolean;
      /**
       * @deprecated
       * @description Personal finance categories are now returned by default.
       * @default false
       */
      include_personal_finance_category?: boolean;
      /**
       * @deprecated
       * @description Counterparties and extra merchant fields are now returned by default.
       * @default false
       */
      include_logo_and_counterparty_beta?: boolean;
      /**
       * @description This option only applies to calls for Items that were not initialized with Transactions during Link and are now adding the Transactions product to the Item for the first time. In these cases, this option controls the maximum number of days of transaction history that Plaid will request from the financial institution. For developer accounts created after December 3, 2023, if no value is specified, this will default to 90 days. For developer accounts created on December 3, 2023 or earlier, if no value is specified, this will default to 730 days until June 24, 2024, at which point it will default to 90 days.
       *
       * If Transactions has already been added to the Item prior to this call, this field will have no effect.
       * @default 90
       */
      days_requested?: number;
    };
    /** @description TransactionsGetResponse defines the response schema for `/transactions/get` */
    TransactionsGetResponse: {
      /** @description An array containing the `accounts` associated with the Item for which transactions are being returned. Each transaction can be mapped to its corresponding account via the `account_id` field. */
      accounts: components["schemas"]["AccountBase"][];
      /** @description An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter. */
      transactions: components["schemas"]["Transaction"][];
      /** @description The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter. */
      total_transactions: number;
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description TransactionsRefreshRequest defines the request schema for `/transactions/refresh` */
    TransactionsRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description TransactionsRefreshResponse defines the response schema for `/transactions/refresh` */
    TransactionsRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description TransactionsRecurringUpdateRequest defined the request schema for `/transactions/recurring/streams/update` endpoint. */
    TransactionsRecurringUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /** @description A list of all the operations to be performed. This will either all succeed or all fail. */
      inputs: components["schemas"]["TransactionsRecurringUpdateInput"][];
    };
    /** @description TransactionsRecurringUpdateInput defines a single operation to the `/transactions/recurring/streams/update` endpoint. */
    TransactionsRecurringUpdateInput: {
      /** @description ID of the stream that all the transactions will be added in to. */
      stream_id: string;
      /** @description IDs of all the transactions that will be added into the stream. If any transaction currently exist in another stream, it will be removed from the other stream. */
      transaction_ids: string[];
    };
    /** @description TransactionsRecurringUpdateResponse defines the response schema for the `/transactions/recurring/streams/update` endpoint. */
    TransactionsRecurringUpdateResponse: {
      /** @description Directly modified stream, along with other streams with transactions removed from them as a result of the operation (in no particular order). */
      modified_streams: components["schemas"]["TransactionStream"][];
      /** @description The ids of streams that are no longer qualified as recurring transaction streams (in no particular order). */
      removed_stream_ids?: string[];
      [key: string]: unknown;
    };
    /** @description TransactionsRecurringMergeRequest defined the request schema for `/transactions/recurring/streams/merge` endpoint. */
    TransactionsRecurringMergeRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /** @description A list of all the operations to be performed. This will either all succeed or all fail. */
      inputs: components["schemas"]["TransactionsRecurringMergeInput"][];
    };
    /** @description TransactionsRecurringMergeInput defines a single input to the `/transactions/recurring/streams/merge` endpoint. */
    TransactionsRecurringMergeInput: {
      /** @description IDs of all the streams that will be merged into the first stream. This operation will retain the stream_id of the first stream. */
      stream_ids: string[];
    };
    /** @description TransactionsRecurringMergeResponse defines the response schema for the `/transactions/recurring/streams/merge` endpoint. */
    TransactionsRecurringMergeResponse: {
      /** @description Directly modified stream, along with other streams with transactions removed from them as a result of the operation (in no particular order). */
      modified_streams: components["schemas"]["TransactionStream"][];
      /** @description The ids of streams that are no longer qualified as recurring transaction streams (in no particular order). */
      removed_stream_ids?: string[];
      [key: string]: unknown;
    };
    /** @description TransactionsRecurringCreateRequest defined the request schema for `/transactions/recurring/streams/create` endpoint. */
    TransactionsRecurringCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /** @description A list of all the operations to be performed. This will either all succeed or all fail. */
      inputs: components["schemas"]["TransactionsRecurringCreateInput"][];
    };
    /** @description TransactionsRecurringCreateInput defines a single input to the `/transactions/recurring/streams/create` endpoint. */
    TransactionsRecurringCreateInput: {
      /** @description IDs of all the transactions that will be merged into one stream. If any transaction currently exists in another stream, it will be removed from the other stream. */
      transaction_ids?: string[];
    };
    /** @description TransactionsRecurringCreateResponse defines the response schema for the `/transactions/recurring/streams/create` endpoint. */
    TransactionsRecurringCreateResponse: {
      /** @description Streams created as a result of the operation. */
      added_streams: components["schemas"]["TransactionStream"][];
      /** @description Other streams with transactions removed from them as a result of the operation (in no particular order). */
      modified_streams?: components["schemas"]["TransactionStream"][];
      /** @description The ids of streams that are no longer qualified as recurring transaction streams (in no particular order). */
      removed_stream_ids?: string[];
      [key: string]: unknown;
    };
    /** @description TransactionsRecurringGetRequest defines the request schema for `/transactions/recurring/get` */
    TransactionsRecurringGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      options?: components["schemas"]["TransactionsRecurringGetRequestOptions"];
      /**
       * @description A list of `account_ids` to retrieve for the Item
       *
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids: string[];
    };
    /** @description An optional object to be used with the request. If specified, `options` must not be `null`. */
    TransactionsRecurringGetRequestOptions: {
      /**
       * @deprecated
       * @description Personal finance categories are now returned by default.
       * @default false
       */
      include_personal_finance_category?: boolean;
    };
    /** @description TransactionsRecurringGetResponse defines the response schema for `/transactions/recurring/get` */
    TransactionsRecurringGetResponse: {
      /** @description An array of depository transaction streams. */
      inflow_streams: components["schemas"]["TransactionStream"][];
      /** @description An array of expense transaction streams. */
      outflow_streams: components["schemas"]["TransactionStream"][];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
       */
      updated_datetime: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description TransactionsRulesCreateRequest defines the request schema for `beta/transactions/rules/v1/create` */
    TransactionsRulesCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @description Personal finance detailed category.
       *
       * All implementations are encouraged to use this field instead of `category`, as it provides more meaningful and accurate categorization.
       *
       * See the [`taxonomy csv file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories.
       */
      personal_finance_category: string;
      rule_details: components["schemas"]["TransactionsRuleDetails"];
    };
    /** @description TransactionsRulesCreateResponse defines the response schema for `/beta/transactions/rules/v1/create` */
    TransactionsRulesCreateResponse: {
      rule: components["schemas"]["TransactionsCategoryRule"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description TransactionsRulesListRequest defines the request schema for `/beta/transactions/rules/v1/list` */
    TransactionsRulesListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description TransactionsRulesListResponse defines the response schema for `/beta/transactions/rules/v1/list` */
    TransactionsRulesListResponse: {
      /** @description A list of the Item's transaction rules */
      rules: components["schemas"]["TransactionsCategoryRule"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description TransactionsRulesRemoveRequest defines the request schema for `/beta/transactions/rules/v1/remove` */
    TransactionsRulesRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /** @description A rule's unique identifier */
      rule_id: string;
    };
    /** @description TransactionsRulesRemoveResponse defines the response schema for `/beta/transactions/rules/v1/remove` */
    TransactionsRulesRemoveResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description TransactionsSyncRequest defines the request schema for `/transactions/sync` */
    TransactionsSyncRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @description The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update.
       * If omitted, the entire history of updates will be returned, starting with the first-added transactions on the Item. The cursor also accepts the special value of `"now"`, which can be used to fast-forward the cursor as part of migrating an existing Item from `/transactions/get` to `/transactions/sync`. For more information, see the [Transactions sync migration guide](https://plaid.com/docs/transactions/sync-migration/). Note that using the `"now` value is not supported for any use case other than migrating existing Items from `/transactions/get`.
       *
       * The upper-bound length of this cursor is 256 characters of base64.
       */
      cursor?: string;
      /**
       * @description The number of transaction updates to fetch.
       * @default 100
       */
      count?: number;
      options?: components["schemas"]["TransactionsSyncRequestOptions"];
    };
    /** @description An optional object to be used with the request. If specified, `options` must not be `null`. */
    TransactionsSyncRequestOptions: {
      /**
       * @description Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality).
       * @default false
       */
      include_original_description?: boolean | null;
      /**
       * @deprecated
       * @description Personal finance categories are now returned by default.
       * @default false
       */
      include_personal_finance_category?: boolean;
      /**
       * @deprecated
       * @description Counterparties and extra merchant fields are now returned by default.
       * @default false
       */
      include_logo_and_counterparty_beta?: boolean;
      /**
       * @description This option only applies to calls for Items that were not initialized with Transactions during Link and are now adding the Transactions product to the Item for the first time. In these cases, this option controls the maximum number of days of transaction history that Plaid will request from the financial institution. For developer accounts created after December 3, 2023, if no value is specified, this will default to 90 days. For developer accounts created on December 3, 2023 or earlier, if no value is specified, this will default to 730 days until June 24, 2024, at which point it will default to 90 days.
       *
       * If Transactions has already been added to the Item prior to this call, this field will have no effect.
       * @default 90
       */
      days_requested?: number;
    };
    /** @description TransactionsSyncResponse defines the response schema for `/transactions/sync` */
    TransactionsSyncResponse: {
      /** @description Transactions that have been added to the Item since `cursor` ordered by ascending last modified time. */
      added: components["schemas"]["Transaction"][];
      /** @description Transactions that have been modified on the Item since `cursor` ordered by ascending last modified time. */
      modified: components["schemas"]["Transaction"][];
      /** @description Transactions that have been removed from the Item since `cursor` ordered by ascending last modified time. */
      removed: components["schemas"]["RemovedTransaction"][];
      /** @description Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_more` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls. If transactions are not yet available, this will be an empty string. */
      next_cursor: string;
      /** @description Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_more` is true, it’s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination. */
      has_more: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description InstitutionsGetRequest defines the request schema for `/institutions/get` */
    InstitutionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The total number of Institutions to return. */
      count: number;
      /** @description The number of Institutions to skip. */
      offset: number;
      /**
       * @description Specify which country or countries to include institutions from, using the ISO-3166-1 alpha-2 country code standard.
       *
       * In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied.
       */
      country_codes: components["schemas"]["CountryCode"][];
      options?: components["schemas"]["InstitutionsGetRequestOptions"];
    };
    /** @description An optional object to filter `/institutions/get` results. */
    InstitutionsGetRequestOptions: {
      /** @description Filter the Institutions based on which products they support. */
      products?: components["schemas"]["Products"][] | null;
      /** @description Specify an array of routing numbers to filter institutions. The response will only return institutions that match all of the routing numbers in the array. Routing number records used for this matching are not comprehensive; failure to match a given routing number to an institution does not mean that the institution is unsupported by Plaid. */
      routing_numbers?: string[] | null;
      /** @description Limit results to institutions with or without OAuth login flows. Note that institutions will have `oauth` set to `true` if some Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth will have the `oauth` attribute set to `true`. */
      oauth?: boolean | null;
      /**
       * @description When `true`, return the institution's homepage URL, logo and primary brand color.
       *
       * Note that Plaid does not own any of the logos shared by the API, and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
       */
      include_optional_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
       * @default false
       */
      include_auth_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
       * @default false
       */
      include_payment_initiation_metadata?: boolean;
    };
    /** @description InstitutionsGetResponse defines the response schema for `/institutions/get` */
    InstitutionsGetResponse: {
      /** @description A list of Plaid institutions */
      institutions: components["schemas"]["Institution"][];
      /** @description The total number of institutions available via this endpoint */
      total: number;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description InstitutionsSearchRequest defines the request schema for `/institutions/search` */
    InstitutionsSearchRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The search query. Institutions with names matching the query are returned */
      query: string;
      /** @description Filter the Institutions based on whether they support all products listed in `products`. Provide `null` to get institutions regardless of supported products. Note that when `auth` is specified as a product, if you are enabled for Instant Match or Automated Micro-deposits, institutions that support those products will be returned even if `auth` is not present in their product array. */
      products?: components["schemas"]["Products"][] | null;
      /** @description Specify which country or countries to include institutions from, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. */
      country_codes: components["schemas"]["CountryCode"][];
      options?: components["schemas"]["InstitutionsSearchRequestOptions"];
    };
    /** @description An optional object to filter `/institutions/search` results. */
    InstitutionsSearchRequestOptions: {
      /** @description Limit results to institutions with or without OAuth login flows. Note that institutions will have `oauth` set to `true` if some Items associated with that institution are required to use OAuth flows; institutions in a state of migration to OAuth will have the `oauth` attribute set to `true`. */
      oauth?: boolean | null;
      /** @description When true, return the institution's homepage URL, logo and primary brand color. */
      include_optional_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
       * @default false
       */
      include_auth_metadata?: boolean | null;
      /**
       * @description When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
       * @default false
       */
      include_payment_initiation_metadata?: boolean | null;
      payment_initiation?: components["schemas"]["InstitutionsSearchPaymentInitiationOptions"];
    };
    /** @description Additional options that will be used to filter institutions by various Payment Initiation configurations. */
    InstitutionsSearchPaymentInitiationOptions: ({
      /** @description A unique ID identifying the payment */
      payment_id?: string | null;
      /** @description A unique ID identifying the payment consent */
      consent_id?: string | null;
    }) | null;
    /** @description InstitutionsSearchResponse defines the response schema for `/institutions/search` */
    InstitutionsSearchResponse: {
      /** @description An array of institutions matching the search criteria */
      institutions: components["schemas"]["Institution"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description InstitutionsGetByIdRequest defines the request schema for `/institutions/get_by_id` */
    InstitutionsGetByIdRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the institution to get details about */
      institution_id: string;
      /** @description Specify which country or countries to include institutions from, using the ISO-3166-1 alpha-2 country code standard. In API versions 2019-05-29 and earlier, the `country_codes` parameter is an optional parameter within the `options` object and will default to `[US]` if it is not supplied. */
      country_codes: components["schemas"]["CountryCode"][];
      options?: components["schemas"]["InstitutionsGetByIdRequestOptions"];
    };
    /** @description Specifies optional parameters for `/institutions/get_by_id`. If provided, must not be `null`. */
    InstitutionsGetByIdRequestOptions: {
      /**
       * @description When `true`, return an institution's logo, brand color, and URL. When available, the bank's logo is returned as a base64 encoded 152x152 PNG, the brand color is in hexadecimal format. The default value is `false`.
       *
       * Note that Plaid does not own any of the logos shared by the API and that by accessing or using these logos, you agree that you are doing so at your own risk and will, if necessary, obtain all required permissions from the appropriate rights holders and adhere to any applicable usage guidelines. Plaid disclaims all express or implied warranties with respect to the logos.
       * @default false
       */
      include_optional_metadata?: boolean;
      /**
       * @description If `true`, the response will include status information about the institution. Default value is `false`.
       * @default false
       */
      include_status?: boolean;
      /**
       * @description When `true`, returns metadata related to the Auth product indicating which auth methods are supported.
       * @default false
       */
      include_auth_metadata?: boolean;
      /**
       * @description When `true`, returns metadata related to the Payment Initiation product indicating which payment configurations are supported.
       * @default false
       */
      include_payment_initiation_metadata?: boolean;
    };
    /** @description InstitutionsGetByIdResponse defines the response schema for `/institutions/get_by_id` */
    InstitutionsGetByIdResponse: {
      institution: components["schemas"]["Institution"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description AccountsGetRequest defines the request schema for `/accounts/get` */
    AccountsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["AccountsGetRequestOptions"];
    };
    /** @description An optional object to filter `/accounts/get` results. */
    AccountsGetRequestOptions: {
      /** @description An array of `account_ids` to retrieve for the Account. */
      account_ids?: string[];
    };
    /** @description AccountsGetResponse defines the response schema for `/accounts/get` and `/accounts/balance/get`. */
    AccountsGetResponse: {
      /**
       * @description An array of financial institution accounts associated with the Item.
       * If `/accounts/balance/get` was called, each account will include real-time balance information.
       */
      accounts: components["schemas"]["AccountBase"][];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description CategoriesGetRequest defines the request schema for `/categories/get` */
    CategoriesGetRequest: Record<string, never>;
    /** @description CategoriesGetResponse defines the response schema for `/categories/get` */
    CategoriesGetResponse: {
      /** @description An array of all of the transaction categories used by Plaid. */
      categories: components["schemas"]["Category"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * @description Test password to use for the creation of the Sandbox Item. Default value is `pass_good`.
     * @default pass_good
     */
    SandboxOverridePassword: string | null;
    /**
     * @description Test username to use for the creation of the Sandbox Item. Default value is `user_good`.
     * @default user_good
     */
    SandboxOverrideUsername: string | null;
    /** @description SandboxProcessorTokenCreateRequest defines the request schema for `/sandbox/processor_token/create` */
    SandboxProcessorTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the institution the Item will be associated with */
      institution_id: string;
      options?: components["schemas"]["SandboxProcessorTokenCreateRequestOptions"];
    };
    /** @description An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
    SandboxProcessorTokenCreateRequestOptions: {
      override_username?: components["schemas"]["SandboxOverrideUsername"];
      override_password?: components["schemas"]["SandboxOverridePassword"];
    };
    /** @description SandboxProcessorTokenCreateResponse defines the response schema for `/sandbox/processor_token/create` */
    SandboxProcessorTokenCreateResponse: {
      /** @description A processor token that can be used to call the `/processor/` endpoints. */
      processor_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description SandboxPublicTokenCreateRequest defines the request schema for `/sandbox/public_token/create` */
    SandboxPublicTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the institution the Item will be associated with */
      institution_id: string;
      /** @description The products to initially pull for the Item. May be any products that the specified `institution_id`  supports. This array may not be empty. */
      initial_products: components["schemas"]["Products"][];
      options?: components["schemas"]["SandboxPublicTokenCreateRequestOptions"];
      user_token?: components["schemas"]["UserToken"];
    };
    /** @description An optional set of options to be used when configuring the Item. If specified, must not be `null`. */
    SandboxPublicTokenCreateRequestOptions: {
      /** @description Specify a webhook to associate with the new Item. */
      webhook?: string;
      override_username?: components["schemas"]["SandboxOverrideUsername"];
      override_password?: components["schemas"]["SandboxOverridePassword"];
      transactions?: components["schemas"]["SandboxPublicTokenCreateRequestOptionsTransactions"];
      income_verification?: components["schemas"]["SandboxPublicTokenCreateRequestOptionsIncomeVerification"];
    };
    /**
     * SandboxPublicTokenCreateRequestOptionsTransactions
     * @description An optional set of parameters corresponding to transactions options.
     */
    SandboxPublicTokenCreateRequestOptionsTransactions: {
      /**
       * Format: date
       * @description The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      start_date?: string;
      /**
       * Format: date
       * @description The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      end_date?: string;
      /**
       * @description The maximum number of days of transaction history to request for the Transactions product.
       * @default 90
       */
      days_requested?: number;
    };
    /** @description A set of parameters for income verification options. This field is required if `income_verification` is included in the `initial_products` array. */
    SandboxPublicTokenCreateRequestOptionsIncomeVerification: {
      /** @description The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
      income_source_types?: components["schemas"]["IncomeVerificationSourceType"][];
      bank_income?: components["schemas"]["SandboxPublicTokenCreateRequestIncomeVerificationBankIncome"];
    };
    /** @description Specifies options for Bank Income. This field is required if `income_verification` is included in the `initial_products` array and `bank` is specified in `income_source_types`. */
    SandboxPublicTokenCreateRequestIncomeVerificationBankIncome: {
      /** @description The number of days of data to request for the Bank Income product */
      days_requested?: number;
    };
    /** @description SandboxPublicTokenCreateResponse defines the response schema for `/sandbox/public_token/create` */
    SandboxPublicTokenCreateResponse: {
      /** @description A public token that can be exchanged for an access token using `/item/public_token/exchange` */
      public_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description SandboxItemFireWebhookRequest defines the request schema for `/sandbox/item/fire_webhook` */
    SandboxItemFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      webhook_type?: components["schemas"]["WebhookType"];
      /**
       * @description The webhook codes that can be fired by this test endpoint.
       * @enum {string}
       */
      webhook_code: "DEFAULT_UPDATE" | "NEW_ACCOUNTS_AVAILABLE" | "AUTH_DATA_UPDATE" | "AUTHORIZATION_GRANTED" | "RECURRING_TRANSACTIONS_UPDATE" | "SYNC_UPDATES_AVAILABLE" | "PRODUCT_READY" | "ERROR";
    };
    /**
     * @description The webhook types that can be fired by this test endpoint.
     * @enum {string}
     */
    WebhookType: "AUTH" | "HOLDINGS" | "INVESTMENTS_TRANSACTIONS" | "ITEM" | "LIABILITIES" | "TRANSACTIONS" | "ASSETS";
    /** @description SandboxItemFireWebhookResponse defines the response schema for `/sandbox/item/fire_webhook` */
    SandboxItemFireWebhookResponse: {
      /** @description Value is `true`  if the test` webhook_code`  was successfully fired. */
      webhook_fired: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description AccountsBalanceGetRequest defines the request schema for `/accounts/balance/get` */
    AccountsBalanceGetRequest: {
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      options?: components["schemas"]["AccountsBalanceGetRequestOptions"];
    };
    /** @description An optional object to filter `/accounts/balance/get` results. */
    AccountsBalanceGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item. The default value is `null`.
       *
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
      min_last_updated_datetime?: components["schemas"]["MinLastUpdatedDatetime"];
    };
    /**
     * MinLastUpdatedDatetime
     * Format: date-time
     * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the oldest acceptable balance when making a request to `/accounts/balance/get`.
     *
     * If the balance that is pulled for `ins_128026` (Capital One) is older than the given timestamp, an `INVALID_REQUEST` error with the code of `LAST_UPDATED_DATETIME_OUT_OF_RANGE` will be returned with the most recent timestamp for the requested account contained in the response.
     *
     * This field is only used when the institution is `ins_128026` (Capital One), in which case a value must be provided or an `INVALID_REQUEST` error with the code of `INVALID_FIELD` will be returned. For all other institutions, this field is ignored.
     */
    MinLastUpdatedDatetime: string;
    /** @description IdentityGetRequest defines the request schema for `/identity/get` */
    IdentityGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["IdentityGetRequestOptions"];
    };
    /** @description An optional object to filter `/identity/get` results. */
    IdentityGetRequestOptions: {
      /**
       * @description A list of `account_ids` to retrieve for the Item.
       * Note: An error will be returned if a provided `account_id` is not associated with the Item.
       */
      account_ids?: string[];
    };
    /** @description IdentityGetResponse defines the response schema for `/identity/get` */
    IdentityGetResponse: {
      /** @description The accounts for which Identity data has been requested */
      accounts: components["schemas"]["AccountIdentity"][];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description IdentityMatchRequest defines the request schema for `/identity/match` */
    IdentityMatchRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      user?: components["schemas"]["IdentityMatchUser"];
      options?: components["schemas"]["IdentityMatchRequestOptions"];
    };
    /** @description An optional object to filter /identity/match results */
    IdentityMatchRequestOptions: {
      /** @description An array of `account_ids` to perform fuzzy match */
      account_ids?: string[];
    };
    /**
     * IdentityMatchUser
     * @description The user's legal name, phone number, email address and address used to perform fuzzy match. If Financial Account Matching is enabled in the Identity Verification product, leave this field empty to automatically match against PII collected from the Identity Verification checks.
     */
    IdentityMatchUser: {
      /** @description The user's full legal name. */
      legal_name?: string | null;
      /** @description The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
      phone_number?: string | null;
      /** @description The user's email address. */
      email_address?: string | null;
      address?: components["schemas"]["AddressDataNullableNoRequiredFields"];
      [key: string]: unknown;
    };
    /** @description IdentityMatchResponse defines the response schema for `/identity/match` */
    IdentityMatchResponse: {
      /** @description The accounts for which Identity match has been requested */
      accounts: components["schemas"]["AccountIdentityMatchScore"][];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description IdentityRefreshRequest defines the request schema for `/identity/refresh` */
    IdentityRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description IdentityRefreshResponse defines the response schema for `/identity/refresh` */
    IdentityRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorAuthGetRequest defines the request schema for `/processor/auth/get` */
    ProcessorAuthGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
    };
    /** @description ProcessorAuthGetResponse defines the response schema for `/processor/auth/get` */
    ProcessorAuthGetResponse: {
      request_id: components["schemas"]["RequestID"];
      numbers: components["schemas"]["ProcessorNumber"];
      account: components["schemas"]["AccountBase"];
      [key: string]: unknown;
    };
    /** @description ProcessorAccountGetRequest defines the request schema for `/processor/account/get` */
    ProcessorAccountGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      processor_token: components["schemas"]["ProcessorToken"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description ProcessorAccountGetResponse defines the response schema for `/processor/account/get` */
    ProcessorAccountGetResponse: {
      account: components["schemas"]["AccountBase"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description An optional object to be used with the request. If specified, `options` must not be `null`. */
    ProcessorTransactionsGetRequestOptions: {
      /**
       * @description The number of transactions to fetch.
       * @default 100
       */
      count?: number;
      /**
       * @description The number of transactions to skip. The default value is 0.
       * @default 0
       */
      offset?: number;
      /**
       * @description Include the raw unparsed transaction description from the financial institution. This field is disabled by default. If you need this information in addition to the parsed data provided, contact your Plaid Account Manager, or submit a [Support request](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/product-functionality).
       * @default false
       */
      include_original_description?: boolean | null;
      /**
       * @deprecated
       * @description Personal finance categories are now returned by default.
       * @default false
       */
      include_personal_finance_category_beta?: boolean;
      /**
       * @deprecated
       * @description Personal finance categories are now returned by default.
       * @default false
       */
      include_personal_finance_category?: boolean;
      /**
       * @deprecated
       * @description Counterparties and extra merchant fields are now returned by default.
       * @default false
       */
      include_logo_and_counterparty_beta?: boolean;
    };
    /** @description ProcessorTransactionsGetRequest defines the request schema for `/processor/transactions/get` */
    ProcessorTransactionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      options?: components["schemas"]["ProcessorTransactionsGetRequestOptions"];
      processor_token: components["schemas"]["ProcessorToken"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date
       * @description The earliest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
       */
      start_date: string;
      /**
       * Format: date
       * @description The latest date for which data should be returned. Dates should be formatted as YYYY-MM-DD.
       */
      end_date: string;
    };
    /** @description ProcessorTransactionsGetResponse defines the response schema for `/processor/transactions/get` */
    ProcessorTransactionsGetResponse: {
      account: components["schemas"]["AccountBase"];
      /** @description An array containing transactions from the account. Transactions are returned in reverse chronological order, with the most recent at the beginning of the array. The maximum number of transactions returned is determined by the `count` parameter. */
      transactions: components["schemas"]["Transaction"][];
      /** @description The total number of transactions available within the date range specified. If `total_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter. */
      total_transactions: number;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorTransactionsSyncRequest defines the request schema for `/processor/transactions/sync` */
    ProcessorTransactionsSyncRequest: {
      client_id?: components["schemas"]["APIClientID"];
      processor_token: components["schemas"]["ProcessorToken"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @description The cursor value represents the last update requested. Providing it will cause the response to only return changes after this update.
       * If omitted, the entire history of updates will be returned, starting with the first-added transactions on the item.
       * Note: The upper-bound length of this cursor is 256 characters of base64.
       */
      cursor?: string;
      /**
       * @description The number of transaction updates to fetch.
       * @default 100
       */
      count?: number;
      options?: components["schemas"]["TransactionsSyncRequestOptions"];
    };
    /** @description ProcessorTransactionsSyncResponse defines the response schema for `/processor/transactions/sync` */
    ProcessorTransactionsSyncResponse: {
      /** @description Transactions that have been added to the Item since `cursor` ordered by ascending last modified time. */
      added: components["schemas"]["Transaction"][];
      /** @description Transactions that have been modified on the Item since `cursor` ordered by ascending last modified time. */
      modified: components["schemas"]["Transaction"][];
      /** @description Transactions that have been removed from the Item since `cursor` ordered by ascending last modified time. */
      removed: components["schemas"]["RemovedTransaction"][];
      /** @description Cursor used for fetching any future updates after the latest update provided in this response. The cursor obtained after all pages have been pulled (indicated by `has_more` being `false`) will be valid for at least 1 year. This cursor should be persisted for later calls. If transactions are not yet available, this will be an empty string. */
      next_cursor: string;
      /** @description Represents if more than requested count of transaction updates exist. If true, the additional updates can be fetched by making an additional request with `cursor` set to `next_cursor`. If `has_more` is true, it’s important to pull all available pages, to make it less likely for underlying data changes to conflict with pagination. */
      has_more: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorTransactionsRefreshRequest defines the request schema for `/processor/transactions/refresh` */
    ProcessorTransactionsRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      processor_token: components["schemas"]["ProcessorToken"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description ProcessorTransactionsRefreshResponse defines the response schema for `/processor/transactions/refresh` */
    ProcessorTransactionsRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorTransactionsRecurringGetRequest defines the request schema for `/processor/transactions/recurring/get` */
    ProcessorTransactionsRecurringGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      processor_token: components["schemas"]["ProcessorToken"];
      secret?: components["schemas"]["APISecret"];
      options?: components["schemas"]["TransactionsRecurringGetRequestOptions"];
    };
    /** @description ProcessorTransactionsRecurringGetResponse defines the response schema for `/processor/transactions/recurring/get` */
    ProcessorTransactionsRecurringGetResponse: {
      /** @description An array of depository transaction streams. */
      inflow_streams: components["schemas"]["TransactionStream"][];
      /** @description An array of expense transaction streams. */
      outflow_streams: components["schemas"]["TransactionStream"][];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time transaction streams for the given account were updated on
       */
      updated_datetime: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * ProcessorSignalEvaluateRequest
     * @description ProcessorSignalEvaluateRequest defines the request schema for `/processor/signal/evaluate`
     */
    ProcessorSignalEvaluateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      /** @description The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters. */
      client_transaction_id: string;
      /**
       * Format: double
       * @description The transaction amount, in USD (e.g. `102.05`)
       */
      amount: number;
      /** @description `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing). */
      user_present?: boolean | null;
      /** @description A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. */
      client_user_id?: string;
      /** @description **true** if the ACH transaction is a recurring transaction; **false** otherwise */
      is_recurring?: boolean | null;
      /**
       * @description The default ACH or non-ACH payment method to complete the transaction.
       * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
       * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
       * `STANDARD_ACH`: standard ACH by NACHA
       * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
       * `DEBIT_CARD`: if the default payment is over debit card networks
       * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
       * Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
       */
      default_payment_method?: string | null;
      user?: components["schemas"]["SignalUser"];
      device?: components["schemas"]["SignalDevice"];
    };
    /**
     * ProcessorSignalEvaluateResponse
     * @description ProcessorSignalEvaluateResponse defines the response schema for `/processor/signal/evaluate`
     */
    ProcessorSignalEvaluateResponse: {
      request_id: components["schemas"]["RequestID"];
      scores: components["schemas"]["SignalScores"];
      core_attributes?: components["schemas"]["SignalEvaluateCoreAttributes"];
      /** @description If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager. */
      warnings?: components["schemas"]["SignalWarning"][];
      [key: string]: unknown;
    };
    /**
     * ProcessorSignalDecisionReportRequest
     * @description ProcessorSignalDecisionReportRequest defines the request schema for `/processor/signal/decision/report`
     */
    ProcessorSignalDecisionReportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      /** @description Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate` */
      client_transaction_id: string;
      /**
       * @description `true` if the ACH transaction was initiated, `false` otherwise.
       *
       * This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
       */
      initiated: boolean;
      /**
       * @description The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.
       *
       * For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
       */
      days_funds_on_hold?: number | null;
      decision_outcome?: components["schemas"]["SignalDecisionOutcome"];
      payment_method?: components["schemas"]["SignalPaymentMethod"];
      /**
       * Format: double
       * @description The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
       */
      amount_instantly_available?: number | null;
    };
    /**
     * ProcessorSignalDecisionReportResponse
     * @description ProcessorSignalDecisionReportResponse defines the response schema for `/processor/signal/decision/report`
     */
    ProcessorSignalDecisionReportResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * ProcessorSignalReturnReportRequest
     * @description ProcessorSignalReturnReportRequest defines the request schema for `/processor/signal/return/report`
     */
    ProcessorSignalReturnReportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      /** @description Must be the same as the `client_transaction_id` supplied when calling `/processor/signal/evaluate` */
      client_transaction_id: string;
      /**
       * @description Must be a valid ACH return code (e.g. "R01")
       *
       * If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
       */
      return_code: string;
      /**
       * Format: date-time
       * @description Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
       */
      returned_at?: string | null;
    };
    /**
     * ProcessorSignalReturnReportResponse
     * @description ProcessorSignalReturnReportResponse defines the response schema for `/processor/signal/return/report`
     */
    ProcessorSignalReturnReportResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * ProcessorSignalPrepareRequest
     * @description ProcessorSignalPrepareRequest defines the request schema for `/processor/signal/prepare`
     */
    ProcessorSignalPrepareRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
    };
    /**
     * ProcessorSignalPrepareResponse
     * @description ProcessorSignalPrepareResponse defines the response schema for `/processor/signal/prepare`
     */
    ProcessorSignalPrepareResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * ProcessorBankTransferCreateRequest
     * @description Defines the request schema for `/processor/bank_transfer/create`
     */
    ProcessorBankTransferCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key: components["schemas"]["BankTransferIdempotencyKey"];
      processor_token: components["schemas"]["ProcessorToken"];
      type: components["schemas"]["BankTransferType"];
      network: components["schemas"]["BankTransferNetwork"];
      amount: components["schemas"]["BankTransferAmount"];
      /** @description The currency of the transfer amount – should be set to "USD". */
      iso_currency_code: string;
      /** @description The transfer description. Maximum of 10 characters. */
      description: string;
      ach_class?: components["schemas"]["ACHClass"];
      user: components["schemas"]["BankTransferUser"];
      /** @description An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters. */
      custom_tag?: string | null;
      metadata?: components["schemas"]["BankTransferMetadata"];
      /** @description Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. */
      origination_account_id?: string | null;
    };
    /**
     * ProcessorBankTransferCreateResponse
     * @description Defines the response schema for `/processor/bank_transfer/create`
     */
    ProcessorBankTransferCreateResponse: {
      bank_transfer: components["schemas"]["BankTransfer"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description An object containing identifying numbers used for making electronic transfers to and from the `account`. The identifying number type (ACH, EFT, IBAN, or BACS) used will depend on the country of the account. An account may have more than one number type. If a particular identifying number type is not used by the `account` for which auth data has been requested, a null value will be returned. */
    ProcessorNumber: {
      ach?: components["schemas"]["NumbersACHNullable"];
      eft?: components["schemas"]["NumbersEFTNullable"];
      international?: components["schemas"]["NumbersInternationalNullable"];
      bacs?: components["schemas"]["NumbersBACSNullable"];
      [key: string]: unknown;
    };
    /** @description ProcessorIdentityGetRequest defines the request schema for `/processor/identity/get` */
    ProcessorIdentityGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
    };
    /** @description ProcessorIdentityGetResponse defines the response schema for `/processor/identity/get` */
    ProcessorIdentityGetResponse: {
      account: components["schemas"]["AccountIdentity"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorIdentityMatchRequest defines the request schema for `/processor/identity/match` */
    ProcessorIdentityMatchRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      user?: components["schemas"]["IdentityMatchUser"];
    };
    /** @description ProcessorIdentityMatchResponse defines the response schema for `/processor/identity/match` */
    ProcessorIdentityMatchResponse: {
      account: components["schemas"]["AccountIdentityMatchScore"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorBalanceGetRequest defines the request schema for `/processor/balance/get` */
    ProcessorBalanceGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      options?: components["schemas"]["ProcessorBalanceGetRequestOptions"];
    };
    /** @description An optional object to filter `/processor/balance/get` results. */
    ProcessorBalanceGetRequestOptions: {
      min_last_updated_datetime?: components["schemas"]["MinLastUpdatedDatetime"];
    };
    /** @description ProcessorBalanceGetResponse defines the response schema for `/processor/balance/get` */
    ProcessorBalanceGetResponse: {
      account: components["schemas"]["AccountBase"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description WebhookVerificationKeyGetRequest defines the request schema for `/webhook_verification_key/get` */
    WebhookVerificationKeyGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The key ID ( `kid` ) from the JWT header. */
      key_id: string;
    };
    /** @description WebhookVerificationKeyGetResponse defines the response schema for `/webhook_verification_key/get` */
    WebhookVerificationKeyGetResponse: {
      key: components["schemas"]["JWKPublicKey"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description A JSON Web Key (JWK) that can be used in conjunction with [JWT libraries](https://jwt.io/#libraries-io) to verify Plaid webhooks */
    JWKPublicKey: {
      /** @description The alg member identifies the cryptographic algorithm family used with the key. */
      alg: string;
      /** @description The crv member identifies the cryptographic curve used with the key. */
      crv: string;
      /** @description The kid (Key ID) member can be used to match a specific key. This can be used, for instance, to choose among a set of keys within the JWK during key rollover. */
      kid: string;
      /** @description The kty (key type) parameter identifies the cryptographic algorithm family used with the key, such as RSA or EC. */
      kty: string;
      /** @description The use (public key use) parameter identifies the intended use of the public key. */
      use: string;
      /** @description The x member contains the x coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation. */
      x: string;
      /** @description The y member contains the y coordinate for the elliptic curve point, provided as a base64url-encoded string of the coordinate's big endian representation. */
      y: string;
      /** @description The timestamp when the key was created, in Unix time. */
      created_at: number;
      /** @description The timestamp when the key expired, in Unix time. */
      expired_at: number | null;
      [key: string]: unknown;
    };
    /** @description LiabilitiesGetRequest defines the request schema for `/liabilities/get` */
    LiabilitiesGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["LiabilitiesGetRequestOptions"];
    };
    /** @description An optional object to filter `/liabilities/get` results. If provided, `options` cannot be null. */
    LiabilitiesGetRequestOptions: {
      /**
       * @description A list of accounts to retrieve for the Item.
       *
       * An error will be returned if a provided `account_id` is not associated with the Item
       */
      account_ids?: string[];
    };
    /** @description LiabilitiesGetResponse defines the response schema for `/liabilities/get` */
    LiabilitiesGetResponse: {
      /** @description An array of accounts associated with the Item */
      accounts: components["schemas"]["AccountBase"][];
      item: components["schemas"]["Item"];
      liabilities: components["schemas"]["LiabilitiesObject"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationRecipientCreateRequest defines the request schema for `/payment_initiation/recipient/create` */
    PaymentInitiationRecipientCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The name of the recipient. We recommend using strings of length 18 or less and avoid special characters to ensure compatibility with all institutions. */
      name: string;
      /** @description The International Bank Account Number (IBAN) for the recipient. If BACS data is not provided, an IBAN is required. */
      iban?: string | null;
      bacs?: components["schemas"]["RecipientBACSNullable"];
      address?: components["schemas"]["PaymentInitiationAddress"];
    };
    /** @description PaymentInitiationRecipientCreateResponse defines the response schema for `/payment_initation/recipient/create` */
    PaymentInitiationRecipientCreateResponse: {
      /** @description A unique ID identifying the recipient */
      recipient_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationPaymentReverseResponse defines the response schema for `/payment_initation/payment/reverse` */
    PaymentInitiationPaymentReverseResponse: {
      /** @description A unique ID identifying the refund */
      refund_id: string;
      status: components["schemas"]["WalletTransactionStatus"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationRecipientGetRequest defines the request schema for `/payment_initiation/recipient/get` */
    PaymentInitiationRecipientGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the recipient */
      recipient_id: string;
    };
    /** @description PaymentInitiationRecipientGetResponse defines the response schema for `/payment_initiation/recipient/get` */
    PaymentInitiationRecipientGetResponse: WithRequired<{
      [key: string]: unknown;
    } & components["schemas"]["PaymentInitiationRecipient"] & {
      request_id?: components["schemas"]["RequestID"];
    }, "recipient_id" | "name" | "request_id">;
    /**
     * PaymentInitiationRecipient
     * @description PaymentInitiationRecipient defines a payment initiation recipient
     */
    PaymentInitiationRecipient: {
      /** @description The ID of the recipient. */
      recipient_id: string;
      /** @description The name of the recipient. */
      name: string;
      address?: components["schemas"]["PaymentInitiationAddress"];
      /** @description The International Bank Account Number (IBAN) for the recipient. */
      iban?: string | null;
      bacs?: components["schemas"]["RecipientBACSNullable"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationRecipientListRequest defines the request schema for `/payment_initiation/recipient/list` */
    PaymentInitiationRecipientListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description PaymentInitiationRecipientListResponse defines the response schema for `/payment_initiation/recipient/list` */
    PaymentInitiationRecipientListResponse: {
      /** @description An array of payment recipients created for Payment Initiation */
      recipients: components["schemas"]["PaymentInitiationRecipient"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationPaymentCreateRequest defines the request schema for `/payment_initiation/payment/create` */
    PaymentInitiationPaymentCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the recipient the payment is for. */
      recipient_id: string;
      /**
       * @description A reference for the payment. This must be an alphanumeric string with at most 18 characters and must not contain any special characters (since not all institutions support them).
       * In order to track settlement via Payment Confirmation, each payment must have a unique reference. If the reference provided through the API is not unique, Plaid will adjust it.
       * Both the originally provided and automatically adjusted references (if any) can be found in the `reference` and `adjusted_reference` fields, respectively.
       */
      reference: string;
      amount: components["schemas"]["PaymentAmount"];
      schedule?: components["schemas"]["ExternalPaymentScheduleRequest"];
      options?: components["schemas"]["ExternalPaymentOptions"];
    };
    /** @description PaymentInitiationPaymentReverseRequest defines the request schema for `/payment_initiation/payment/reverse` */
    PaymentInitiationPaymentReverseRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the payment to reverse */
      payment_id: string;
      idempotency_key: components["schemas"]["WalletTransactionIdempotencyKey"];
      /** @description A reference for the refund. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces. */
      reference: string;
      amount?: components["schemas"]["PaymentAmountToRefund"];
    };
    /**
     * @description For a payment returned by this endpoint, there is only one possible value:
     *
     * `PAYMENT_STATUS_INPUT_NEEDED`: The initial phase of the payment
     * @enum {string}
     */
    PaymentInitiationPaymentCreateStatus: "PAYMENT_STATUS_INPUT_NEEDED";
    /** @description PaymentInitiationPaymentCreateResponse defines the response schema for `/payment_initiation/payment/create` */
    PaymentInitiationPaymentCreateResponse: {
      /** @description A unique ID identifying the payment */
      payment_id: string;
      status: components["schemas"]["PaymentInitiationPaymentCreateStatus"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description SandboxItemResetLoginRequest defines the request schema for `/sandbox/item/reset_login` */
    SandboxItemResetLoginRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description SandboxItemResetLoginResponse defines the response schema for `/sandbox/item/reset_login` */
    SandboxItemResetLoginResponse: {
      /** @description `true` if the call succeeded */
      reset_login: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description SandboxPaymentProfileResetLoginRequest defines the request schema for `/sandbox/payment_profile/reset_login` */
    SandboxPaymentProfileResetLoginRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      payment_profile_token: components["schemas"]["PaymentProfileToken"];
    };
    /** @description SandboxPaymentProfileResetLoginResponse defines the response schema for `/sandbox/payment_profile/reset_login` */
    SandboxPaymentProfileResetLoginResponse: {
      /** @description `true` if the call succeeded */
      reset_login: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description SandboxItemSetVerificationStatusRequest defines the request schema for `/sandbox/item/set_verification_status` */
    SandboxItemSetVerificationStatusRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` of the account whose verification status is to be modified */
      account_id: string;
      /**
       * @description The verification status to set the account to.
       * @enum {string}
       */
      verification_status: "automatically_verified" | "verification_expired";
    };
    /** @description SandboxItemSetVerificationStatusResponse defines the response schema for `/sandbox/item/set_verification_status` */
    SandboxItemSetVerificationStatusResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description UserCreateRequest defines the request schema for `/user/create` */
    UserCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A unique ID representing the end user. Maximum of 128 characters. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. */
      client_user_id: string;
      consumer_report_user_identity?: components["schemas"]["ConsumerReportUserIdentity"];
    };
    /** @description UserCreateResponse defines the response schema for `/user/create` */
    UserCreateResponse: {
      user_token: components["schemas"]["UserToken"];
      user_id: components["schemas"]["UserId"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description UserUpdateRequest defines the request schema for `/user/update` */
    UserUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
      consumer_report_user_identity?: components["schemas"]["ConsumerReportUserIdentity"];
    };
    /** @description UserUpdateResponse defines the response schema for `/user/update` */
    UserUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ConsumerReportUserIdentity defines the user identity data collected for consumer report purpose. This field is required to be set if you later use the created user for consumer report purpose. */
    ConsumerReportUserIdentity: {
      /** @description The user's first name */
      first_name: string;
      /** @description The user's last name */
      last_name: string;
      /** @description The user's phone numbers. The format of phone number will be validated and for better normalization, it is expected to be in E.164 format +{countrycode}{number}, for example `+14151234567`. */
      phone_numbers: string[];
      /** @description The user's emails */
      emails: string[];
      primary_address: components["schemas"]["AddressData"];
      [key: string]: unknown;
    } | null;
    /** @description CreditSessionsGetRequest defines the request schema for `/credit/sessions/get` */
    CreditSessionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /** @description CreditSessionsGetResponse defines the response schema for `/credit/sessions/get` */
    CreditSessionsGetResponse: {
      /** @description A list of Link sessions for the user. Sessions will be sorted in reverse chronological order. */
      sessions?: components["schemas"]["CreditSession"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Metadata and results for a Link session */
    CreditSession: {
      /** @description The unique identifier associated with the Link session. This identifier matches the `link_session_id` returned in the onSuccess/onExit callbacks. */
      link_session_id?: string;
      /**
       * Format: date-time
       * @description The time when the Link session started
       */
      session_start_time?: string;
      results?: components["schemas"]["CreditSessionResults"];
      /** @description The set of errors that occurred during the Link session. */
      errors?: components["schemas"]["CreditSessionError"][];
    };
    /** @description The set of results for a Link session. */
    CreditSessionResults: {
      /** @description The set of Item adds for the Link session. */
      item_add_results?: components["schemas"]["CreditSessionItemAddResult"][];
      /** @description The set of bank income verifications for the Link session. */
      bank_income_results?: components["schemas"]["CreditSessionBankIncomeResult"][];
      /** @description The set of bank employment verifications for the Link session. */
      bank_employment_results?: components["schemas"]["CreditSessionBankEmploymentResult"][];
      /** @description The set of payroll income verifications for the Link session. */
      payroll_income_results?: components["schemas"]["CreditSessionPayrollIncomeResult"][];
      document_income_results?: components["schemas"]["CreditSessionDocumentIncomeResult"];
    };
    /** @description The details of an Item add in Link. */
    CreditSessionItemAddResult: {
      /** @description Returned once a user has successfully linked their Item. */
      public_token?: string;
      /** @description The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
      item_id?: string;
      /** @description The Plaid Institution ID associated with the Item. */
      institution_id?: string;
    };
    /** @description The details of a bank income verification in Link */
    CreditSessionBankIncomeResult: {
      status?: components["schemas"]["CreditSessionBankIncomeStatus"];
      /** @description The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
      item_id?: string;
      /** @description The Plaid Institution ID associated with the Item. */
      institution_id?: string;
    };
    /** @description The details of a bank employment verification in Link. */
    CreditSessionBankEmploymentResult: {
      status?: components["schemas"]["CreditSessionBankEmploymentStatus"];
      /** @description The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
      item_id?: string;
      /** @description The Plaid Institution ID associated with the Item. */
      institution_id?: string;
    };
    /** @description The details of a Link error. */
    CreditSessionError: {
      /** @description A broad categorization of the error. */
      error_type?: string;
      /** @description The particular error code. */
      error_code?: string;
      /** @description A developer-friendly representation of the error code. */
      error_message?: string;
      /** @description A user-friendly representation of the error code. `null` if the error is not related to user action. */
      display_message?: string | null;
    };
    /** @description The details of a digital payroll income verification in Link */
    CreditSessionPayrollIncomeResult: {
      /** @description The number of paystubs retrieved from a payroll provider. */
      num_paystubs_retrieved?: number;
      /** @description The number of w2s retrieved from a payroll provider. */
      num_w2s_retrieved?: number;
      /** @description The Plaid Institution ID associated with the Item. */
      institution_id?: string;
      /** @description The Institution Name associated with the Item. */
      institution_name?: string;
    };
    /** @description The details of a document income verification in Link */
    CreditSessionDocumentIncomeResult: {
      /** @description The number of paystubs uploaded by the user. */
      num_paystubs_uploaded: number;
      /** @description The number of w2s uploaded by the user. */
      num_w2s_uploaded: number;
      /** @description The number of bank statements uploaded by the user. */
      num_bank_statements_uploaded: number;
    } | null;
    /**
     * @description Status of the Bank Income Link session.
     *
     * `APPROVED`: User has approved and verified their income
     *
     * `NO_DEPOSITS_FOUND`: We attempted, but were unable to find any income in the connected account.
     *
     * `USER_REPORTED_NO_INCOME`: The user explicitly indicated that they don't receive income in the connected account.
     *
     * `STARTED`: The user began the bank income portion of the link flow.
     *
     * `INTERNAL_ERROR`: The user encountered an internal error.
     * @enum {string}
     */
    CreditSessionBankIncomeStatus: "APPROVED" | "NO_DEPOSITS_FOUND" | "USER_REPORTED_NO_INCOME";
    /**
     * @description Status of the Bank Employment Link session.
     *
     * `APPROVED`: User has approved and verified their employment.
     *
     * `NO_EMPLOYMENTS_FOUND`: We attempted, but were unable to find any employment in the connected account.
     *
     * `EMPLOYER_NOT_LISTED`: The user explicitly indicated that they did not see their current or previous employer in the list of employer names found.
     *
     * `STARTED`: The user began the bank income portion of the link flow.
     *
     * `INTERNAL_ERROR`: The user encountered an internal error.
     * @enum {string}
     */
    CreditSessionBankEmploymentStatus: "APPROVED" | "NO_EMPLOYERS_FOUND" | "EMPLOYER_NOT_LISTED";
    /**
     * @description The explicit pay basis on the paystub (if present).
     * @enum {string}
     */
    CreditPayStubPayBasisType: "SALARY" | "HOURLY" | "COMMISSION";
    /** @description PaymentInitiationPaymentGetRequest defines the request schema for `/payment_initiation/payment/get` */
    PaymentInitiationPaymentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `payment_id` returned from `/payment_initiation/payment/create`. */
      payment_id: string;
    };
    /** @description PaymentInitiationPaymentGetResponse defines the response schema for `/payment_initation/payment/get` */
    PaymentInitiationPaymentGetResponse: WithRequired<{
      [key: string]: unknown;
    } & components["schemas"]["PaymentInitiationPayment"] & {
      request_id?: components["schemas"]["RequestID"];
    }, "request_id" | "payment_id" | "amount" | "status" | "recipient_id" | "reference" | "last_status_update" | "bacs" | "iban">;
    /**
     * @description The status of the payment.
     *
     * `PAYMENT_STATUS_INPUT_NEEDED`: This is the initial state of all payments. It indicates that the payment is waiting on user input to continue processing. A payment may re-enter this state later on if further input is needed.
     *
     * `PAYMENT_STATUS_INITIATED`: The payment has been successfully authorised and accepted by the financial institution. For successful payments, this is a potential terminal status. Further status transitions can be to REJECTED and, when supported by the institution, to EXECUTED.
     *
     * `PAYMENT_STATUS_INSUFFICIENT_FUNDS`: The payment has failed due to insufficient funds.
     *
     * `PAYMENT_STATUS_FAILED`: The payment has failed to be initiated. This error may be caused by transient system outages and is retryable once the root cause is resolved.
     *
     * `PAYMENT_STATUS_BLOCKED`: The payment has been blocked by Plaid. This can occur, for example, due to Plaid flagging the payment as potentially risky. This is a retryable error.
     *
     * `PAYMENT_STATUS_AUTHORISING`: The payment is currently being processed. The payment will automatically exit this state when the financial institution has authorised the transaction.
     *
     * `PAYMENT_STATUS_CANCELLED`: The payment was cancelled (typically by the end user) during authorisation.
     *
     * `PAYMENT_STATUS_EXECUTED`: The funds have successfully left the payer account and payment is considered complete. Not all institutions support this status: support is more common in the UK, and less common in the EU. For institutions where this status is not supported, the terminal status for a successful payment will be `PAYMENT_STATUS_INITIATED`.
     *
     * `PAYMENT_STATUS_SETTLED`: The payment has settled and funds are available for use. A payment will typically settle within seconds to several days, depending on which payment rail is used. This status is only available to customers using [Plaid Virtual Accounts](https://plaid.com/docs/virtual-accounts/).
     *
     * `PAYMENT_STATUS_ESTABLISHED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
     *
     * `PAYMENT_STATUS_REJECTED`: The payment was rejected by the financial institution.
     *
     * Deprecated:
     * These statuses will be removed in a future release.
     *
     * `PAYMENT_STATUS_UNKNOWN`: The payment status is unknown.
     *
     * `PAYMENT_STATUS_PROCESSING`: The payment is currently being processed. The payment will automatically exit this state when processing is complete.
     *
     * `PAYMENT_STATUS_COMPLETED`: Indicates that the standing order has been successfully established. This state is only used for standing orders.
     * @enum {string}
     */
    PaymentInitiationPaymentStatus: "PAYMENT_STATUS_INPUT_NEEDED" | "PAYMENT_STATUS_PROCESSING" | "PAYMENT_STATUS_INITIATED" | "PAYMENT_STATUS_COMPLETED" | "PAYMENT_STATUS_INSUFFICIENT_FUNDS" | "PAYMENT_STATUS_FAILED" | "PAYMENT_STATUS_BLOCKED" | "PAYMENT_STATUS_UNKNOWN" | "PAYMENT_STATUS_EXECUTED" | "PAYMENT_STATUS_SETTLED" | "PAYMENT_STATUS_AUTHORISING" | "PAYMENT_STATUS_CANCELLED" | "PAYMENT_STATUS_ESTABLISHED" | "PAYMENT_STATUS_REJECTED";
    /** @description PaymentInitiationPayment defines a payment initiation payment */
    PaymentInitiationPayment: {
      /** @description The ID of the payment. Like all Plaid identifiers, the `payment_id` is case sensitive. */
      payment_id: string;
      amount: components["schemas"]["PaymentAmount"];
      status: components["schemas"]["PaymentInitiationPaymentStatus"];
      /** @description The ID of the recipient */
      recipient_id: string;
      /** @description A reference for the payment. */
      reference: string;
      /** @description The value of the reference sent to the bank after adjustment to pass bank validation rules. */
      adjusted_reference?: string | null;
      /**
       * Format: date-time
       * @description The date and time of the last time the `status` was updated, in IS0 8601 format
       */
      last_status_update: string;
      schedule?: components["schemas"]["ExternalPaymentScheduleGet"];
      refund_details?: components["schemas"]["ExternalPaymentRefundDetails"];
      bacs: components["schemas"]["SenderBACSNullable"];
      /** @description The International Bank Account Number (IBAN) for the sender, if specified in the `/payment_initiation/payment/create` call. */
      iban: string | null;
      /** @description Refund IDs associated with the payment. */
      refund_ids?: string[] | null;
      amount_refunded?: components["schemas"]["PaymentAmountRefunded"];
      /** @description The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
      wallet_id?: string | null;
      scheme?: components["schemas"]["PaymentScheme"];
      adjusted_scheme?: components["schemas"]["PaymentScheme"];
      /** @description The payment consent ID that this payment was initiated with. Is present only when payment was initiated using the payment consent. */
      consent_id?: string | null;
      /** @description The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts. */
      transaction_id?: string | null;
      [key: string]: unknown;
    };
    /** @description PaymentInitiationPaymentTokenCreateRequest defines the request schema for `/payment_initiation/payment/token/create` */
    PaymentInitiationPaymentTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `payment_id` returned from `/payment_initiation/payment/create`. */
      payment_id: string;
    };
    /** @description PaymentInitiationPaymentTokenCreateResponse defines the response schema for `/payment_initiation/payment/token/create` */
    PaymentInitiationPaymentTokenCreateResponse: {
      /** @description A `payment_token` that can be provided to Link initialization to enter the payment initiation flow */
      payment_token: string;
      /**
       * Format: date-time
       * @description The date and time at which the token will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `payment_token` expires after 15 minutes.
       */
      payment_token_expiration_time: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationConsentCreateRequest defines the request schema for `/payment_initiation/consent/create` */
    PaymentInitiationConsentCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the recipient the payment consent is for. The created consent can be used to transfer funds to this recipient only. */
      recipient_id: string;
      /** @description A reference for the payment consent. This must be an alphanumeric string with at most 18 characters and must not contain any special characters. */
      reference: string;
      /** @description An array of payment consent scopes. */
      scopes: components["schemas"]["PaymentInitiationConsentScope"][];
      constraints: components["schemas"]["PaymentInitiationConsentConstraints"];
      options?: components["schemas"]["ExternalPaymentInitiationConsentOptions"];
    };
    /** @description PaymentInitiationConsentCreateResponse defines the response schema for `/payment_initiation/consent/create` */
    PaymentInitiationConsentCreateResponse: {
      /** @description A unique ID identifying the payment consent. */
      consent_id: string;
      status: components["schemas"]["PaymentInitiationConsentStatus"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationConsentGetRequest defines the request schema for `/payment_initiation/consent/get` */
    PaymentInitiationConsentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `consent_id` returned from `/payment_initiation/consent/create`. */
      consent_id: string;
    };
    /** @description PaymentInitiationConsentGetResponse defines the response schema for `/payment_initation/consent/get` */
    PaymentInitiationConsentGetResponse: WithRequired<{
      [key: string]: unknown;
    } & components["schemas"]["PaymentInitiationConsent"] & {
      request_id?: components["schemas"]["RequestID"];
    }, "request_id">;
    /** @description PaymentInitiationConsent defines a payment initiation consent. */
    PaymentInitiationConsent: {
      /** @description The consent ID. */
      consent_id: string;
      status: components["schemas"]["PaymentInitiationConsentStatus"];
      /**
       * Format: date-time
       * @description Consent creation timestamp, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /** @description The ID of the recipient the payment consent is for. */
      recipient_id: string;
      /** @description A reference for the payment consent. */
      reference: string;
      constraints: components["schemas"]["PaymentInitiationConsentConstraints"];
      /** @description An array of payment consent scopes. */
      scopes: components["schemas"]["PaymentInitiationConsentScope"][];
      [key: string]: unknown;
    };
    /**
     * @description The status of the payment consent.
     *
     * `UNAUTHORISED`: Consent created, but requires user authorisation.
     *
     * `REJECTED`: Consent authorisation was rejected by the user and/or the bank.
     *
     * `AUTHORISED`: Consent is active and ready to be used.
     *
     * `REVOKED`: Consent has been revoked and can no longer be used.
     *
     * `EXPIRED`: Consent is no longer valid.
     * @enum {string}
     */
    PaymentInitiationConsentStatus: "UNAUTHORISED" | "AUTHORISED" | "REVOKED" | "REJECTED" | "EXPIRED";
    /** @description PaymentInitiationConsentRevokeRequest defines the request schema for `/payment_initiation/consent/revoke` */
    PaymentInitiationConsentRevokeRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The consent ID. */
      consent_id: string;
    };
    /** @description PaymentInitiationConsentRevokeResponse defines the response schema for `/payment_initation/consent/revoke` */
    PaymentInitiationConsentRevokeResponse: {
      request_id?: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationConsentPaymentExecuteRequest defines the request schema for `/payment_initiation/consent/payment/execute` */
    PaymentInitiationConsentPaymentExecuteRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The consent ID. */
      consent_id: string;
      amount: components["schemas"]["PaymentAmount"];
      idempotency_key: components["schemas"]["ConsentPaymentIdempotencyKey"];
    };
    /** @description PaymentInitiationConsentPaymentExecuteResponse defines the response schema for `/payment_initiation/consent/payment/execute` */
    PaymentInitiationConsentPaymentExecuteResponse: {
      /** @description A unique ID identifying the payment */
      payment_id: string;
      status: components["schemas"]["PaymentInitiationPaymentStatus"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description PaymentInitiationPaymentListRequest defines the request schema for `/payment_initiation/payment/list` */
    PaymentInitiationPaymentListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @description The maximum number of payments to return. If `count` is not specified, a maximum of 10 payments will be returned, beginning with the most recent payment before the cursor (if specified).
       * @default 10
       */
      count?: number | null;
      /**
       * Format: date-time
       * @description A string in RFC 3339 format (i.e. "2019-12-06T22:35:49Z"). Only payments created before the cursor will be returned.
       */
      cursor?: string | null;
      /** @description The consent ID. If specified, only payments, executed using this consent, will be returned. */
      consent_id?: string | null;
    };
    /** @description PaymentInitiationPaymentListResponse defines the response schema for `/payment_initiation/payment/list` */
    PaymentInitiationPaymentListResponse: {
      /** @description An array of payments that have been created, associated with the given `client_id`. */
      payments: components["schemas"]["PaymentInitiationPayment"][];
      /**
       * Format: date-time
       * @description The value that, when used as the optional `cursor` parameter to `/payment_initiation/payment/list`, will return the next unreturned payment as its first payment.
       */
      next_cursor: string | null;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description InvestmentsHoldingsGetRequest defines the request schema for `/investments/holdings/get` */
    InvestmentsHoldingsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["InvestmentHoldingsGetRequestOptions"];
    };
    /** @description An optional object to filter `/investments/holdings/get` results. If provided, must not be `null`. */
    InvestmentHoldingsGetRequestOptions: {
      /** @description An array of `account_id`s to retrieve for the Item. An error will be returned if a provided `account_id` is not associated with the Item. */
      account_ids?: string[];
    };
    /** @description InvestmentsHoldingsGetResponse defines the response schema for `/investments/holdings/get` */
    InvestmentsHoldingsGetResponse: {
      /** @description The accounts associated with the Item */
      accounts: components["schemas"]["AccountBase"][];
      /** @description The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field. */
      holdings: components["schemas"]["Holding"][];
      /** @description Objects describing the securities held in the accounts associated with the Item. */
      securities: components["schemas"]["Security"][];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      /** @description When true, this field indicates that the Item's portfolio was manually created with the Investments Fallback flow. */
      is_investments_fallback_item?: boolean;
      [key: string]: unknown;
    };
    /** @description InvestmentsAuthGetRequest defines the request schema for `/investments/auth/get` */
    InvestmentsAuthGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      options?: components["schemas"]["InvestmentsAuthGetRequestOptions"];
    };
    /** @description An optional object to filter `/investments/auth/get` results. */
    InvestmentsAuthGetRequestOptions: {
      /** @description An array of `account_id`s to retrieve for the Item. An error will be returned if a provided `account_id` is not associated with the Item. */
      account_ids?: string[];
    };
    /** @description InvestmentsAuthGetResponse defines the response schema for `/investments/auth/get` */
    InvestmentsAuthGetResponse: {
      /** @description The accounts for which data is being retrieved */
      accounts: components["schemas"]["AccountBase"][];
      /** @description The holdings belonging to investment accounts associated with the Item. Details of the securities in the holdings are provided in the `securities` field. */
      holdings: components["schemas"]["Holding"][];
      /** @description Objects describing the securities held in the accounts associated with the Item. */
      securities: components["schemas"]["Security"][];
      /** @description Information about the account owners for the accounts associated with the Item. */
      owners: components["schemas"]["InvestmentsAuthOwner"][];
      numbers: components["schemas"]["InvestmentsAuthGetNumbers"];
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description InvestmentsTransactionsGetRequest defines the request schema for `/investments/transactions/get` */
    InvestmentsTransactionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /**
       * Format: date
       * @description The earliest date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      start_date: string;
      /**
       * Format: date
       * @description The most recent date for which to fetch transaction history. Dates should be formatted as YYYY-MM-DD.
       */
      end_date: string;
      options?: components["schemas"]["InvestmentsTransactionsGetRequestOptions"];
    };
    /** @description An optional object to filter `/investments/transactions/get` results. If provided, must be non-`null`. */
    InvestmentsTransactionsGetRequestOptions: {
      /** @description An array of `account_ids` to retrieve for the Item. */
      account_ids?: string[];
      /**
       * @description The number of transactions to fetch.
       *
       * @default 100
       */
      count?: number;
      /**
       * @description The number of transactions to skip when fetching transaction history
       * @default 0
       */
      offset?: number;
      /**
       * @description If the Item was not initialized with the investments product via the `products` array when calling `/link/token/create`, and `async_update` is set to true, the initial Investments extraction will happen asynchronously. Plaid will subsequently fire a `HISTORICAL_UPDATE` webhook when the extraction completes. When `false`, Plaid will wait to return a response until extraction completion and no `HISTORICAL_UPDATE` webhook will fire. Note that while the extraction is happening asynchronously, calls to `/investments/transactions/get` and `/investments/refresh` will return `PRODUCT_NOT_READY` errors until the extraction completes.
       * @default false
       */
      async_update?: boolean;
    };
    /** @description InvestmentsTransactionsGetResponse defines the response schema for `/investments/transactions/get` */
    InvestmentsTransactionsGetResponse: {
      item: components["schemas"]["Item"];
      /** @description The accounts for which transaction history is being fetched. */
      accounts: components["schemas"]["AccountBase"][];
      /** @description All securities for which there is a corresponding transaction being fetched. */
      securities: components["schemas"]["Security"][];
      /** @description The transactions being fetched */
      investment_transactions: components["schemas"]["InvestmentTransaction"][];
      /** @description The total number of transactions available within the date range specified. If `total_investment_transactions` is larger than the size of the `transactions` array, more transactions are available and can be fetched via manipulating the `offset` parameter. */
      total_investment_transactions: number;
      request_id: components["schemas"]["RequestID"];
      /** @description When true, this field indicates that the Item's portfolio was manually created with the Investments Fallback flow. */
      is_investments_fallback_item?: boolean;
      [key: string]: unknown;
    };
    /** @description InvestmentsRefreshRequest defines the request schema for `/investments/refresh` */
    InvestmentsRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      access_token: components["schemas"]["AccessToken"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description InvestmentsRefreshResponse defines the response schema for `/investments/refresh` */
    InvestmentsRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorTokenCreateRequest defines the request schema for `/processor/token/create` */
    ProcessorTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` value obtained from the `onSuccess` callback in Link */
      account_id: string;
      /**
       * @description The processor you are integrating with.
       * @enum {string}
       */
      processor: "dwolla" | "galileo" | "modern_treasury" | "ocrolus" | "prime_trust" | "vesta" | "drivewealth" | "vopay" | "achq" | "check" | "checkbook" | "circle" | "sila_money" | "rize" | "svb_api" | "unit" | "wyre" | "lithic" | "alpaca" | "astra" | "moov" | "treasury_prime" | "marqeta" | "checkout" | "solid" | "highnote" | "gemini" | "apex_clearing" | "gusto" | "adyen" | "atomic" | "i2c" | "wepay" | "riskified" | "utb" | "adp_roll" | "fortress_trust" | "bond" | "bakkt" | "teal" | "zero_hash" | "taba_pay" | "knot";
    };
    /** @description ProcessorTokenCreateResponse defines the response schema for `/processor/token/create` and `/processor/apex/processor_token/create` */
    ProcessorTokenCreateResponse: {
      /** @description The `processor_token` that can then be used by the Plaid partner to make API requests */
      processor_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorTokenPermissionsSetRequest defines the request schema for `/processor/token/permissions/set` */
    ProcessorTokenPermissionsSetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      /** @description A list of products the processor token should have access to. An empty list will grant access to all products. */
      products: components["schemas"]["Products"][];
    };
    /** @description ProcessorTokenPermissionsSetResponse defines the response schema for `/processor/token/permissions/set` */
    ProcessorTokenPermissionsSetResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorTokenPermissionsGetRequest defines the request schema for `/processor/token/permissions/get` */
    ProcessorTokenPermissionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
    };
    /** @description ProcessorTokenPermissionsGetResponse defines the response schema for `/processor/token/permissions/get` */
    ProcessorTokenPermissionsGetResponse: {
      request_id: components["schemas"]["RequestID"];
      /** @description A list of products the processor token should have access to. An empty list means that the processor has access to all available products, including future products. */
      products: components["schemas"]["Products"][];
      [key: string]: unknown;
    };
    /** @description ProcessorTokenWebhookUpdateRequest defines the request schema for `/processor/token/webhook/update` */
    ProcessorTokenWebhookUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      processor_token: components["schemas"]["ProcessorToken"];
      /** @description The new webhook URL to associate with the processor token. To remove a webhook from a processor token, set to `null`. */
      webhook: string | null;
    };
    /** @description ProcessorTokenWebhookUpdateResponse defines the response schema for `/processor/token/webhook/update` */
    ProcessorTokenWebhookUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorStripeBankAccountTokenCreateRequest defines the request schema for `/processor/stripe/bank_account/create` */
    ProcessorStripeBankAccountTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` value obtained from the `onSuccess` callback in Link */
      account_id: string;
    };
    /** @description ProcessorStripeBankAccountTokenCreateResponse defines the response schema for `/processor/stripe/bank_account/create` */
    ProcessorStripeBankAccountTokenCreateResponse: {
      /** @description A token that can be sent to Stripe for use in making API calls to Plaid */
      stripe_bank_account_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ProcessorApexProcessorTokenCreateRequest defines the request schema for `/processor/apex/processor_token/create` */
    ProcessorApexProcessorTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The `account_id` value obtained from the `onSuccess` callback in Link */
      account_id: string;
    };
    /** @description DepositSwitchCreateRequest defines the request schema for `/deposit_switch/create` */
    DepositSwitchCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Access token for the target Item, typically provided in the Import Item response. */
      target_access_token: string;
      /** @description Plaid Account ID that specifies the target bank account. This account will become the recipient for a user's direct deposit. */
      target_account_id: string;
      /**
       * CountryCode
       * @description ISO-3166-1 alpha-2 country code standard.
       * @enum {string|null}
       */
      country_code?: "US" | "CA" | null;
      options?: components["schemas"]["DepositSwitchCreateRequestOptions"];
    };
    /**
     * DepositSwitchCreateRequestOptions
     * @description Options to configure the `/deposit_switch/create` request. If provided, cannot be `null`.
     */
    DepositSwitchCreateRequestOptions: {
      /** @description The URL registered to receive webhooks when the status of a deposit switch request has changed. */
      webhook?: string | null;
      /** @description An array of access tokens corresponding to transaction items to use when attempting to match the user to their Payroll Provider. These tokens must be created by the same client id as the one creating the switch, and have access to the transactions product. */
      transaction_item_access_tokens?: components["schemas"]["AccessToken"][];
    };
    /** @description DepositSwitchCreateResponse defines the response schema for `/deposit_switch/create` */
    DepositSwitchCreateResponse: {
      /** @description ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch. */
      deposit_switch_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description DepositSwitchTokenCreateRequest defines the request schema for `/deposit_switch/token/create` */
    DepositSwitchTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the deposit switch */
      deposit_switch_id: string;
    };
    /** @description DepositSwitchTokenCreateResponse defines the response schema for `/deposit_switch/token/create` */
    DepositSwitchTokenCreateResponse: {
      /** @description Deposit switch token, used to initialize Link for the Deposit Switch product */
      deposit_switch_token: string;
      /** @description Expiration time of the token, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format */
      deposit_switch_token_expiration_time: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description LinkTokenGetRequest defines the request schema for `/link/token/get` */
    LinkTokenGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A `link_token` from a previous invocation of `/link/token/create` */
      link_token: string;
    };
    /** @description LinkTokenCreateRequest defines the request schema for `/link/token/create` */
    LinkTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The name of your application, as it should be displayed in Link. Maximum length of 30 characters. If a value longer than 30 characters is provided, Link will display "This Application" instead. */
      client_name: string;
      /**
       * @description The language that Link should be displayed in. When initializing with Identity Verification, this field is not used; for more details, see [Identity Verification supported languages](https://www.plaid.com/docs/identity-verification/#supported-languages).
       *
       * Supported languages are:
       * - Danish (`'da'`)
       * - Dutch (`'nl'`)
       * - English (`'en'`)
       * - Estonian (`'et'`)
       * - French (`'fr'`)
       * - German (`'de'`)
       * - Italian (`'it'`)
       * - Latvian (`'lv'`)
       * - Lithuanian (`'lt'`)
       * - Norwegian (`'no'`)
       * - Polish (`'pl'`)
       * - Portuguese (`'pt'`)
       * - Romanian (`'ro'`)
       * - Spanish (`'es'`)
       * - Swedish (`'sv'`)
       *
       * When using a Link customization, the language configured here must match the setting in the customization, or the customization will not be applied.
       */
      language: string;
      /**
       * @description Specify an array of Plaid-supported country codes using the ISO-3166-1 alpha-2 country code standard. Institutions from all listed countries will be shown. For a complete mapping of supported products by country, see https://plaid.com/global/.
       *
       * If using Identity Verification, `country_codes` should be set to the country where your company is based, not the country where your user is located. For all other products, `country_codes` represents the location of your user's financial institution.
       *
       * If Link is launched with multiple country codes, only products that you are enabled for in all countries will be used by Link. Note that while all countries are enabled by default in Sandbox and Development, in Production only US and Canada are enabled by default. Access to European institutions requires additional compliance steps. To request access to European institutions in the Production environment, [file a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access) via the Plaid dashboard. If you initialize with a European country code, your users will see the European consent panel during the Link flow.
       *
       * If using a Link customization, make sure the country codes in the customization match those specified in `country_codes`, or the customization may not be applied.
       *
       * If using the Auth features Instant Match, Same-day Micro-deposits, or Automated Micro-deposits, `country_codes` must be set to `['US']`.
       */
      country_codes: components["schemas"]["CountryCode"][];
      user: components["schemas"]["LinkTokenCreateRequestUser"];
      /**
       * @description List of Plaid product(s) you wish to use. If launching Link in update mode, should be omitted (unless you are using update mode to add Income or Assets to an Item); required otherwise.
       *
       * `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically be initialized when any other product is initialized.
       *
       * The products specified here will determine which institutions will be available to your users in Link. Only institutions that support *all* requested products can be selected; a if a user attempts to select an institution that does not support a listed product, a "Connectivity not supported" error message will appear in Link. To maximize the number of institutions available, initialize Link with the minimal product set required for your use case. Additional products can be included via the [`optional_products`](https://plaid.com/docs/api/tokens/#link-token-create-request-optional-products) or  [`required_if_supported_products`](https://plaid.com/docs/api/tokens/#link-token-create-request-required-if-supported-products) fields, or can be initialized by calling the endpoint after obtaining an access token. For details and exceptions, see [Choosing when to initialize products](https://plaid.com/docs/link/initializing-products/).
       *
       * Note that, unless you have opted to disable Instant Match support, institutions that support Instant Match will also be shown in Link if `auth` is specified as a product, even though these institutions do not contain `auth` in their product array.
       *
       * In Production, you will be billed for each product that you specify when initializing Link. Note that a product cannot be removed from an Item once the Item has been initialized with that product. To stop billing on an Item for subscription-based products, such as Liabilities, Investments, and Transactions, remove the Item via `/item/remove`.
       */
      products?: components["schemas"]["Products"][] | null;
      /**
       * @description List of Plaid product(s) you wish to use only if the institution and account(s) selected by the user support the product. Institutions that do not support these products will still be shown in Link. The products will only be extracted and billed if the user selects an institution and account type that supports them.
       *
       * There should be no overlap between this array and the `products`, `optional_products`, or `additional_consented_products` arrays. The `products` array must have at least one product.
       *
       * For more details on using this feature, see [Required if Supported Products](https://www.plaid.com/docs/link/initializing-products/#required-if-supported-products).
       */
      required_if_supported_products?: components["schemas"]["Products"][] | null;
      /**
       * @description List of Plaid product(s) that you may wish to use but that are not required for your use case. Plaid will attempt to fetch data for these products on a best-effort basis, and failure to support these products will not affect Item creation.
       *
       * There should be no overlap between this array and the `products`, `required_if_supported_products`, or `additional_consented_products` arrays. The `products` array must have at least one product.
       *
       * For more details on using this feature, see [Optional Products](https://www.plaid.com/docs/link/initializing-products/#optional-products).
       */
      optional_products?: components["schemas"]["Products"][] | null;
      /**
       * @description (Beta) This field has no effect unless you are participating in the [Data Transparency](https://plaid.com/docs/link/data-transparency-messaging-migration-guide) beta program.
       * List of additional Plaid product(s) you wish to collect consent for. These products will not be billed until you start using them by calling the relevant endpoints.
       *
       * `balance` is *not* a valid value, the Balance product does not require explicit initialization and will automatically have consent collected.
       *
       * Institutions that do not support these products will still be shown in Link.
       *
       * There should be no overlap between this array and the `products` or `required_if_supported_products` arrays.
       */
      additional_consented_products?: components["schemas"]["Products"][] | null;
      /** @description The destination URL to which any webhooks should be sent. Note that webhooks for Payment Initiation (e-wallet transactions only), Transfer, Bank Transfer (including Auth micro-deposit notification webhooks) and Identity Verification are configured via the Dashboard instead. */
      webhook?: string;
      /** @description The `access_token` associated with the Item to update or reference, used when updating, modifying, or accessing an existing `access_token`. Used when launching Link in update mode, when completing the Same-day (manual) Micro-deposit flow, or (optionally) when initializing Link for a returning user as part of the Transfer UI flow. */
      access_token?: string | null;
      /** @description A list of access tokens associated with the items to update in Link update mode for the Assets product. Using this instead of the `access_token` field allows the updating of multiple items at once. This feature is in closed beta, please contact your account manager for more info. */
      access_tokens?: string[];
      /** @description The name of the Link customization from the Plaid Dashboard to be applied to Link. If not specified, the `default` customization will be used. When using a Link customization, the language in the customization must match the language selected via the `language` parameter, and the countries in the customization should match the country codes selected via `country_codes`. */
      link_customization_name?: string;
      /** @description A URI indicating the destination where a user should be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. The `redirect_uri` should not contain any query parameters. When used in Production or Development, must be an https URI. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. Note that any redirect URI must also be added to the Allowed redirect URIs list in the [developer dashboard](https://dashboard.plaid.com/team/api). If initializing on Android, `android_package_name` must be specified instead and `redirect_uri` should be left blank. */
      redirect_uri?: string;
      /** @description The name of your app's Android package. Required if using the `link_token` to initialize Link on Android. Any package name specified here must also be added to the Allowed Android package names setting on the [developer dashboard](https://dashboard.plaid.com/team/api). When creating a `link_token` for initializing Link on other platforms, `android_package_name` must be left blank and `redirect_uri` should be used instead. */
      android_package_name?: string;
      institution_data?: components["schemas"]["LinkTokenCreateInstitutionData"];
      card_switch?: components["schemas"]["LinkTokenCreateCardSwitch"];
      account_filters?: components["schemas"]["LinkTokenAccountFilters"];
      eu_config?: components["schemas"]["LinkTokenEUConfig"];
      /** @description Used for certain Europe-only configurations, as well as certain legacy use cases in other regions. */
      institution_id?: string;
      payment_initiation?: components["schemas"]["LinkTokenCreateRequestPaymentInitiation"];
      deposit_switch?: components["schemas"]["LinkTokenCreateRequestDepositSwitch"];
      employment?: components["schemas"]["LinkTokenCreateRequestEmployment"];
      income_verification?: components["schemas"]["LinkTokenCreateRequestIncomeVerification"];
      base_report?: components["schemas"]["LinkTokenCreateRequestBaseReport"];
      consumer_report_permissible_purpose?: components["schemas"]["ConsumerReportPermissiblePurpose"];
      auth?: components["schemas"]["LinkTokenCreateRequestAuth"];
      transfer?: components["schemas"]["LinkTokenCreateRequestTransfer"];
      update?: components["schemas"]["LinkTokenCreateRequestUpdate"];
      identity_verification?: components["schemas"]["LinkTokenCreateRequestIdentityVerification"];
      statements?: components["schemas"]["LinkTokenCreateRequestStatements"];
      /** @description A user token generated using `/user/create`. Any Item created during the Link session will be associated with the user. */
      user_token?: string;
      investments?: components["schemas"]["LinkTokenInvestments"];
      investments_auth?: components["schemas"]["LinkTokenInvestmentsAuth"];
      hosted_link?: components["schemas"]["LinkTokenCreateHostedLink"];
      transactions?: components["schemas"]["LinkTokenTransactions"];
      /** @description If `true`, request a CRA connection. Defaults to `false`. */
      cra_enabled?: boolean;
    };
    /**
     * @description By default, Link will provide limited account filtering: it will only display Institutions that are compatible with all products supplied in the `products` parameter of `/link/token/create`, and, if `auth` is specified in the `products` array, will also filter out accounts other than `checking` and `savings` accounts on the Account Select pane. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     *
     * The filter may or may not impact the list of accounts shown by the institution in the OAuth account selection flow, depending on the specific institution. If the user selects excluded account subtypes in the OAuth flow, these accounts will not be added to the Item. If the user selects only excluded account subtypes, the link attempt will fail and the user will be prompted to try again.
     */
    LinkTokenAccountFilters: {
      depository?: components["schemas"]["DepositoryFilter"];
      credit?: components["schemas"]["CreditFilter"];
      loan?: components["schemas"]["LoanFilter"];
      investment?: components["schemas"]["InvestmentFilter"];
      other?: components["schemas"]["OtherFilter"];
      [key: string]: unknown;
    };
    /** @description Configuration parameters for EU flows */
    LinkTokenEUConfig: {
      /** @description If `true`, open Link without an initial UI. Defaults to `false`. */
      headless?: boolean;
    };
    /** @description Configuration parameters for the Investments product */
    LinkTokenInvestments: {
      /** @description If `true`, allow self-custody crypto wallets to be added without requiring signature verification. Defaults to `false`. */
      allow_unverified_crypto_wallets?: boolean;
      /** @description If `true`, allow users to manually enter Investments account and holdings information. Defaults to `false`. */
      allow_manual_entry?: boolean;
    };
    /** @description Configuration parameters for the Investments Auth Product */
    LinkTokenInvestmentsAuth: {
      /**
       * @description If `true`, show institutions that use the manual entry fallback flow.
       * @default false
       */
      manual_entry_enabled?: boolean | null;
      /**
       * @description If `true`, show institutions that use the masked number match fallback flow.
       * @default false
       */
      masked_number_match_enabled?: boolean | null;
    };
    /** @description Configuration parameters for the Transactions product */
    LinkTokenTransactions: {
      /**
       * @description The maximum number of days of transaction history to request for the Transactions product. For developer accounts created after December 3, 2023, if no value is specified, this will default to 90 days. For developer accounts created on December 3, 2023 or earlier, if no value is specified, this will default to 730 days until June 24, 2024, at which point it will default to 90 days.
       * @default 90
       */
      days_requested?: number;
    };
    /** @description Configuration parameters for Hosted Link */
    LinkTokenCreateHostedLink: {
      delivery_method?: components["schemas"]["HostedLinkDeliveryMethod"];
      completion_redirect_uri?: components["schemas"]["HostedLinkCompletionRedirectURI"];
      url_lifetime_seconds?: components["schemas"]["HostedLinkURLLifetimeSeconds"];
      [key: string]: unknown;
    };
    /**
     * @description How Plaid should deliver the Plaid Link session to the customer.
     * 'sms' will deliver via SMS. Must pass `user.phone_number`.
     * 'email' will deliver via email. Must pass `user.email_address`.
     *
     * @enum {string}
     */
    HostedLinkDeliveryMethod: "sms" | "email";
    /**
     * @description URI that Hosted Link will redirect to upon completion of the Link flow. This will only occur in Hosted Link
     * sessions, not in other implementation methods.
     */
    HostedLinkCompletionRedirectURI: string;
    /** @description How many seconds the link will be valid for. Must be positive. Cannot be longer than 21 days. */
    HostedLinkURLLifetimeSeconds: number;
    /** @description Specifies options for initializing Link for use with the Payment Initiation (Europe) product. This field is required if `payment_initiation` is included in the `products` array. Either `payment_id` or `consent_id` must be provided. */
    LinkTokenCreateRequestPaymentInitiation: {
      /** @description The `payment_id` provided by the `/payment_initiation/payment/create` endpoint. */
      payment_id?: string;
      /** @description The `consent_id` provided by the `/payment_initiation/consent/create` endpoint. */
      consent_id?: string;
    };
    /** @description Specifies options for initializing Link for use with the Deposit Switch (beta) product. This field is required if `deposit_switch` is included in the `products` array. */
    LinkTokenCreateRequestDepositSwitch: {
      /** @description The `deposit_switch_id` provided by the `/deposit_switch/create` endpoint. */
      deposit_switch_id: string;
    };
    /** @description Specifies options for initializing Link for use with the Transfer product. */
    LinkTokenCreateRequestTransfer: {
      /** @description The `id` returned by the `/transfer/intent/create` endpoint. */
      intent_id?: string;
      /** @description The `payment_profile_token` returned by the `/payment_profile/create` endpoint. */
      payment_profile_token?: string;
    };
    /** @description Specifies user stated income sources for the Income product */
    LinkTokenCreateRequestUserStatedIncomeSource: {
      /** @description The employer corresponding to an income source specified by the user */
      employer?: string;
      category?: components["schemas"]["UserStatedIncomeSourceCategory"];
      /**
       * Format: double
       * @description The income amount paid per cycle for a specified income source
       */
      pay_per_cycle?: number;
      /**
       * Format: double
       * @description The income amount paid annually for a specified income source
       */
      pay_annual?: number;
      pay_type?: components["schemas"]["UserStatedIncomeSourcePayType"];
      pay_frequency?: components["schemas"]["UserStatedIncomeSourceFrequency"];
    };
    /** @description Specifies options for initializing Link for use with the Statements product. */
    LinkTokenCreateRequestStatements: {
      /**
       * Format: date
       * @description The start date for statements, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) “YYYY-MM-DD” format, e.g. "2020-10-30". If no value is provided, this will default to 3 months prior to the current date.
       */
      start_date?: string;
      /**
       * Format: date
       * @description The end date for statements, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) “YYYY-MM-DD” format, e.g. "2020-10-30". If no value is provided, this will default to the current date. You can request up to two years of data.
       */
      end_date?: string;
    };
    /**
     * @description The income category for a specified income source
     * @enum {string}
     */
    UserStatedIncomeSourceCategory: "OTHER" | "SALARY" | "UNEMPLOYMENT" | "CASH" | "GIG_ECONOMY" | "RENTAL" | "CHILD_SUPPORT" | "MILITARY" | "RETIREMENT" | "LONG_TERM_DISABILITY" | "BANK_INTEREST";
    /**
     * @description The pay frequency of a specified income source
     * @enum {string}
     */
    UserStatedIncomeSourceFrequency: "UNKNOWN" | "WEEKLY" | "BIWEEKLY" | "SEMI_MONTHLY" | "MONTHLY";
    /**
     * @description The pay type - `GROSS`, `NET`, or `UNKNOWN` for a specified income source
     * @enum {string}
     */
    UserStatedIncomeSourcePayType: "UNKNOWN" | "GROSS" | "NET";
    /** @description Specifies options for initializing Link for use with the Auth product. This field can be used to enable or disable extended Auth flows for the resulting Link session. Omitting any field will result in a default that can be configured by your account manager. */
    LinkTokenCreateRequestAuth: {
      /**
       * @description Specifies whether Auth Type Select is enabled for the Link session, allowing the end user to choose between linking instantly or manually prior to selecting their financial institution. Note that this can only be true if `same_day_microdeposits_enabled` is set to true.
       * @default false
       */
      auth_type_select_enabled?: boolean;
      /** @description Specifies whether the Link session is enabled for the Automated Micro-deposits flow. */
      automated_microdeposits_enabled?: boolean;
      /** @description Specifies whether the Link session is enabled for the Instant Match flow. As of November 2022, Instant Match will be enabled by default. Instant Match can be disabled by setting this field to `false`. */
      instant_match_enabled?: boolean;
      /** @description Specifies whether the Link session is enabled for the Same Day Micro-deposits flow. */
      same_day_microdeposits_enabled?: boolean;
      /** @description Specifies whether the Link session is enabled for the Instant Micro-deposits flow. */
      instant_microdeposits_enabled?: boolean;
      /**
       * @description Specifies what type of [Reroute to Credentials](https://plaid.com/docs/auth/coverage/same-day/#reroute-to-credentials) pane should be used in the Link session for the Same Day Micro-deposits flow. As of October 15 2023, the default setting is `OPTIONAL`.
       * @enum {string}
       */
      reroute_to_credentials?: "OFF" | "OPTIONAL" | "FORCED";
      /** @description Specifies whether the Link session is enabled for the Database Match flow. */
      database_match_enabled?: boolean;
      /**
       * @deprecated
       * @description This field has been deprecated in favor of `auth_type_select_enabled`.
       * @enum {string}
       */
      flow_type?: "FLEXIBLE_AUTH";
    };
    /** @description Specifies option for initializing Link for use with the Identity Verification product. */
    LinkTokenCreateRequestIdentityVerification: {
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      consent?: components["schemas"]["IdentityVerificationConsent"];
      gave_consent?: components["schemas"]["IdentityVerificationConsent"];
    };
    /** @description A map containing data used to highlight institutions in Link. */
    LinkTokenCreateInstitutionData: {
      /** @description The routing number of the bank to highlight. */
      routing_number?: string;
    };
    /** @description A map containing data to pass in for the Card Switch flow. */
    LinkTokenCreateCardSwitch: {
      /** @description The BIN (Bank Identification Number) of the card to switch. */
      card_bin: string;
    };
    /** @description An object specifying information about the end user who will be linking their account. */
    LinkTokenCreateRequestUser: {
      /** @description A unique ID representing the end user. Typically this will be a user ID number from your application. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. It is currently used as a means of searching logs for the given user in the Plaid Dashboard. */
      client_user_id: string;
      /** @description The user's full legal name, used for [micro-deposit based verification flows](https://plaid.com/docs/auth/coverage/). For a small number of customers on legacy flows, providing this field is required to enable micro-deposit-based flows. For all other customers, this field is optional, but providing the user's name in this field when using micro-deposit-based verification will enable certain risk checks and can reduce micro-deposit fraud. */
      legal_name?: string;
      name?: components["schemas"]["IdentityVerificationRequestUserName"];
      /** @description The user's phone number in [E.164](https://en.wikipedia.org/wiki/E.164) format. This field is optional, but required to enable the [returning user experience](https://plaid.com/docs/link/returning-user). Can also be used to prefill Link fields when used with Identity Verification. */
      phone_number?: string;
      /**
       * Format: date-time
       * @deprecated
       * @description The date and time the phone number was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.
       *
       *  Only pass a verification time for a phone number that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.
       *
       *  Example: `2020-01-01T00:00:00Z`
       */
      phone_number_verified_time?: string | null;
      /** @description The user's email address. This field is optional, but required to enable the [pre-authenticated returning user flow](https://plaid.com/docs/link/returning-user/#pre-authenticated-rux). Can also be used to prefill Link fields when used with Identity Verification. */
      email_address?: string;
      /**
       * Format: date-time
       * @deprecated
       * @description The date and time the email address was verified in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDThh:mm:ssZ`). This was previously an optional field used in the [returning user experience](https://plaid.com/docs/link/returning-user). This field is no longer required to enable the returning user experience.
       *
       *  Only pass a verification time for an email address that you have verified. If you have performed verification but don’t have the time, you may supply a signal value of the start of the UNIX epoch.
       *
       *  Example: `2020-01-01T00:00:00Z`
       */
      email_address_verified_time?: string | null;
      /**
       * @deprecated
       * @description Deprecated and not currently used, use the `id_number` field instead.
       */
      ssn?: string;
      /**
       * Format: date
       * @description To be provided in the format "yyyy-mm-dd". Can be used to prefill Link fields when used with Identity Verification.
       */
      date_of_birth?: string | null;
      address?: components["schemas"]["UserAddress"];
      id_number?: components["schemas"]["UserIDNumber"];
    };
    /** @description Specifies options for initializing Link for [update mode](https://plaid.com/docs/link/update-mode). */
    LinkTokenCreateRequestUpdate: {
      /**
       * @description If `true`, enables [update mode with Account Select](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts) for institutions that do not use OAuth, or that use OAuth but do not have their own account selection flow. For institutions that have an OAuth account selection flow (i.e. most OAuth-enabled institutions), update mode with Account Select will always be enabled, regardless of the value of this field.
       * @default false
       */
      account_selection_enabled?: boolean;
    };
    /**
     * @description By default, Link will only display account types that are compatible with all products supplied in the `products` parameter of `/link/token/create`. You can further limit the accounts shown in Link by using `account_filters` to specify the account subtypes to be shown in Link. Only the specified subtypes will be shown. This filtering applies to both the Account Select view (if enabled) and the Institution Select view. Institutions that do not support the selected subtypes will be omitted from Link. To indicate that all subtypes should be shown, use the value `"all"`. If the `account_filters` filter is used, any account type for which a filter is not specified will be entirely omitted from Link.
     *
     * For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     *
     * For institutions using OAuth, the filter will not affect the list of institutions or accounts shown by the bank in the OAuth window.
     */
    LinkTokenCreateRequestAccountSubtypes: {
      depository?: components["schemas"]["LinkTokenCreateDepositoryFilter"];
      credit?: components["schemas"]["LinkTokenCreateCreditFilter"];
      loan?: components["schemas"]["LinkTokenCreateLoanFilter"];
      investment?: components["schemas"]["LinkTokenCreateInvestmentFilter"];
    };
    /** @description A filter to apply to `depository`-type accounts */
    LinkTokenCreateDepositoryFilter: {
      account_subtypes?: components["schemas"]["DepositoryAccountSubtypes"];
    };
    /** @description A filter to apply to `credit`-type accounts */
    LinkTokenCreateCreditFilter: {
      account_subtypes?: components["schemas"]["CreditAccountSubtypes"];
    };
    /** @description A filter to apply to `loan`-type accounts */
    LinkTokenCreateLoanFilter: {
      account_subtypes?: components["schemas"]["LoanAccountSubtypes"];
    };
    /** @description A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier). */
    LinkTokenCreateInvestmentFilter: {
      account_subtypes?: components["schemas"]["InvestmentAccountSubtypes"];
    };
    /** @description LinkOAuthCorrelationIdExchangeRequest defines the request schema for `/link/oauth/correlation_id/exchange` */
    LinkOAuthCorrelationIdExchangeRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A `link_correlation_id` from a received OAuth redirect URI callback */
      link_correlation_id: string;
    };
    /** @description LinkOAuthCorrelationIdExchangeResponse defines the response schema for `/link/oauth/correlation_id/exchange` */
    LinkOAuthCorrelationIdExchangeResponse: {
      /** @description The `link_token` associated to the given `link_correlation_id`, which can be used to re-initialize Link. */
      link_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description LinkTokenGetResponse defines the response schema for `/link/token/get` */
    LinkTokenGetResponse: {
      /** @description A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`. */
      link_token: string;
      /**
       * Format: date-time
       * @description The creation timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string | null;
      /**
       * Format: date-time
       * @description The expiration timestamp for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      expiration: string | null;
      /** @description Information about link sessions created using this `link_token`. */
      link_sessions?: components["schemas"]["LinkTokenGetSessionsResponse"][];
      metadata: components["schemas"]["LinkTokenGetMetadataResponse"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description An object containing information about a link session. */
    LinkTokenGetSessionsResponse: {
      /** @description The unique ID for the link session. */
      link_session_id: string;
      /**
       * Format: date-time
       * @description The timestamp at which the link session was first started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      started_at?: string;
      /**
       * Format: date-time
       * @description The timestamp at which the link session was finished, if available, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      finished_at?: string | null;
      on_success?: components["schemas"]["LinkSessionSuccess"];
      on_exit?: components["schemas"]["LinkSessionExit"];
      [key: string]: unknown;
    };
    /** @description An object representing an [onSuccess](https://plaid.com/docs/link/web/#onsuccess) callback from Link. */
    LinkSessionSuccess: {
      /** @description Displayed once a user has successfully linked their Item. */
      public_token: string;
      metadata: components["schemas"]["LinkSessionSuccessMetadata"];
    } | null;
    /** @description Displayed once a user has successfully linked their Item. */
    LinkSessionSuccessMetadata: {
      institution?: components["schemas"]["LinkSessionSuccessMetadataInstitution"];
      /** @description A list of accounts attached to the connected Item. If Account Select is enabled via the developer dashboard, `accounts` will only include selected accounts. */
      accounts?: components["schemas"]["LinkSessionSuccessMetadataAccount"][];
      /** @description A unique identifier associated with a user's actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround. */
      link_session_id?: string;
      transfer_status?: components["schemas"]["LinkSessionSuccessMetadataTransferStatus"];
    } | null;
    /** @description An institution object. If the Item was created via Same-Day micro-deposit verification, will be `null`. */
    LinkSessionSuccessMetadataInstitution: {
      /** @description The full institution name, such as `'Wells Fargo'` */
      name?: string;
      /** @description The Plaid institution identifier */
      institution_id?: string;
    } | null;
    /** @description An account attached to the connected Item. */
    LinkSessionSuccessMetadataAccount: {
      /** @description The Plaid `account_id` */
      id?: string;
      /** @description The official account name */
      name?: string;
      /** @description The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts. It may also not match the mask that the bank displays to the user. */
      mask?: string | null;
      /** @description The account type. See the [Account schema](/docs/api/accounts#account-type-schema) for a full list of possible values */
      type?: string;
      /** @description The account subtype. See the [Account schema](/docs/api/accounts#account-type-schema) for a full list of possible values */
      subtype?: string;
      /**
       * @description Indicates an Item's micro-deposit-based verification status. Possible values are:
       *
       * `pending_automatic_verification`: The Item is pending automatic verification
       *
       * `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the two amounts.
       *
       * `automatically_verified`: The Item has successfully been automatically verified
       *
       * `manually_verified`: The Item has successfully been manually verified
       *
       * `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.
       *
       * `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.
       *
       * `database_matched`: The Item has successfully been verified using Plaid's data sources. Note: Database Match is currently a beta feature, please contact your account manager for more information.
       *
       * `null`: micro-deposit-based verification is not being used for the Item.
       */
      verification_status?: string | null;
      /** @description If micro-deposit verification is being used, indicates whether the account being verified is a `business` or `personal` account. */
      class_type?: string | null;
    };
    /**
     * @description The status of a transfer. Returned only when [Transfer UI](/docs/transfer/using-transfer-ui) is implemented.
     *
     * - `COMPLETE` – The transfer was completed.
     * - `INCOMPLETE` – The transfer could not be completed. For help, see [Troubleshooting transfers](/docs/transfer/using-transfer-ui#troubleshooting-transfers).
     * @enum {string|null}
     */
    LinkSessionSuccessMetadataTransferStatus: "COMPLETE" | "INCOMPLETE" | null;
    /** @description An object representing an [onExit](https://plaid.com/docs/link/web/#onexit) callback from Link. */
    LinkSessionExit: {
      error: components["schemas"]["PlaidError"];
      metadata: components["schemas"]["LinkSessionExitMetadata"];
      [key: string]: unknown;
    } | null;
    /** @description Displayed if a user exits Link without successfully linking an Item. */
    LinkSessionExitMetadata: {
      institution?: components["schemas"]["LinkSessionExitMetadataInstitution"];
      /** @description The point at which the user exited the Link flow. One of the following values. */
      status?: string;
      /** @description A unique identifier associated with a user's actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround. */
      link_session_id?: string;
      /** @description The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. */
      request_id?: string;
    } | null;
    /** @description An institution object. If the Item was created via Same-Day micro-deposit verification, will be `null`. */
    LinkSessionExitMetadataInstitution: {
      /** @description The full institution name, such as `Wells Fargo` */
      name?: string;
      /** @description The Plaid institution identifier */
      institution_id?: string;
    } | null;
    /** @description An object specifying the arguments originally provided to the `/link/token/create` call. */
    LinkTokenGetMetadataResponse: {
      /** @description The `products` specified in the `/link/token/create` call. */
      initial_products: components["schemas"]["Products"][];
      /** @description The `webhook` specified in the `/link/token/create` call. */
      webhook: string | null;
      /** @description The `country_codes` specified in the `/link/token/create` call. */
      country_codes: components["schemas"]["CountryCode"][];
      /** @description The `language` specified in the `/link/token/create` call. */
      language: string | null;
      institution_data?: components["schemas"]["LinkTokenCreateInstitutionData"];
      account_filters?: components["schemas"]["AccountFiltersResponse"];
      /** @description The `redirect_uri` specified in the `/link/token/create` call. */
      redirect_uri: string | null;
      /** @description The `client_name` specified in the `/link/token/create` call. */
      client_name: string | null;
      [key: string]: unknown;
    };
    /** @description LinkTokenCreateResponse defines the response schema for `/link/token/create` */
    LinkTokenCreateResponse: {
      /** @description A `link_token`, which can be supplied to Link in order to initialize it and receive a `public_token`, which can be exchanged for an `access_token`. */
      link_token: string;
      /**
       * Format: date-time
       * @description The expiration date for the `link_token`, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. A `link_token` created to generate a `public_token` that will be exchanged for a new `access_token` expires after 4 hours. A `link_token` created for an existing Item (such as when updating an existing `access_token` by launching Link in update mode) expires after 30 minutes.
       */
      expiration: string;
      request_id: components["schemas"]["RequestID"];
      /** @description A URL of a Plaid-hosted Link flow that will use the Link token returned by this request */
      hosted_link_url?: string;
      [key: string]: unknown;
    };
    /**
     * Error
     * @description We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. An Item with a non-`null` error object will only be part of an API response when calling `/item/get` to view Item status. Otherwise, error fields will be `null` if no error has occurred; if an error has occurred, an error code will be returned instead.
     */
    PlaidError: ({
      error_type: components["schemas"]["PlaidErrorType"];
      /** @description The particular error code. Safe for programmatic use. */
      error_code: string;
      /** @description A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
      error_message: string;
      /**
       * @description A user-friendly representation of the error code. `null` if the error is not related to user action.
       *
       * This may change over time and is not safe for programmatic use.
       */
      display_message: string | null;
      /** @description A unique ID identifying the request, to be used for troubleshooting purposes. This field will be omitted in errors provided by webhooks. */
      request_id?: string;
      /**
       * @description In the Assets product, a request can pertain to more than one Item. If an error is returned for such a request, `causes` will return an array of errors containing a breakdown of these errors on the individual Item level, if any can be identified.
       *
       * `causes` will only be provided for the `error_type` `ASSET_REPORT_ERROR`. `causes` will also not be populated inside an error nested within a `warning` object.
       */
      causes?: unknown[];
      /** @description The HTTP status code associated with the error. This will only be returned in the response body when the error information is provided via a webhook. */
      status?: number | null;
      /** @description The URL of a Plaid documentation page with more information about the error */
      documentation_url?: string;
      /** @description Suggested steps for resolving the error */
      suggested_action?: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * PlaidErrorType
     * @description A broad categorization of the error. Safe for programmatic use.
     * @enum {string}
     */
    PlaidErrorType: "INVALID_REQUEST" | "INVALID_RESULT" | "INVALID_INPUT" | "INSTITUTION_ERROR" | "RATE_LIMIT_EXCEEDED" | "API_ERROR" | "ITEM_ERROR" | "ASSET_REPORT_ERROR" | "RECAPTCHA_ERROR" | "OAUTH_ERROR" | "PAYMENT_ERROR" | "BANK_TRANSFER_ERROR" | "INCOME_VERIFICATION_ERROR" | "MICRODEPOSITS_ERROR";
    /**
     * AccountType
     * @description `investment:` Investment account. In API versions 2018-05-22 and earlier, this type is called `brokerage` instead.
     *
     * `credit:` Credit card
     *
     * `depository:` Depository account
     *
     * `loan:` Loan account
     *
     * `other:` Non-specified account type
     *
     * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
     * @enum {string}
     */
    AccountType: "investment" | "credit" | "depository" | "loan" | "brokerage" | "other";
    /**
     * OverrideAccountType
     * @description `investment:` Investment account.
     *
     * `credit:` Credit card
     *
     * `depository:` Depository account
     *
     * `loan:` Loan account
     *
     * `payroll:` Payroll account
     *
     * `other:` Non-specified account type
     *
     * See the [Account type schema](https://plaid.com/docs/api/accounts#account-type-schema) for a full listing of account types and corresponding subtypes.
     * @enum {string}
     */
    OverrideAccountType: "investment" | "credit" | "depository" | "loan" | "payroll" | "other";
    /**
     * Account
     * @description A single account at a financial institution.
     */
    AccountBase: {
      /**
       * @description Plaid’s unique identifier for the account. This value will not change unless Plaid can't reconcile the account with the data returned by the financial institution. This may occur, for example, when the name of the account changes. If this happens a new `account_id` will be assigned to the account.
       *
       * The `account_id` can also change if the `access_token` is deleted and the same credentials that were used to generate that `access_token` are used to generate a new `access_token` on a later date. In that case, the new `account_id` will be different from the old `account_id`.
       *
       * If an account with a specific `account_id` disappears instead of changing, the account is likely closed. Closed accounts are not returned by the Plaid API.
       *
       * Like all Plaid identifiers, the `account_id` is case sensitive.
       */
      account_id: string;
      balances: components["schemas"]["AccountBalance"];
      /** @description The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user. */
      mask: string | null;
      /** @description The name of the account, either assigned by the user or by the financial institution itself */
      name: string;
      /** @description The official name of the account as given by the financial institution */
      official_name: string | null;
      type: components["schemas"]["AccountType"];
      subtype: components["schemas"]["AccountSubtype"];
      /**
       * @description The current verification status of an Auth Item initiated through Automated or Manual micro-deposits.  Returned for Auth Items only.
       *
       * `pending_automatic_verification`: The Item is pending automatic verification
       *
       * `pending_manual_verification`: The Item is pending manual micro-deposit verification. Items remain in this state until the user successfully verifies the micro-deposit.
       *
       * `automatically_verified`: The Item has successfully been automatically verified
       *
       * `manually_verified`: The Item has successfully been manually verified
       *
       * `verification_expired`: Plaid was unable to automatically verify the deposit within 7 calendar days and will no longer attempt to validate the Item. Users may retry by submitting their information again through Link.
       *
       * `verification_failed`: The Item failed manual micro-deposit verification because the user exhausted all 3 verification attempts. Users may retry by submitting their information again through Link.
       *
       * `database_matched`: The Item has successfully been verified using Plaid's data sources. Note: Database Match is currently a beta feature, please contact your account manager for more information.
       *
       * @enum {string}
       */
      verification_status?: "automatically_verified" | "pending_automatic_verification" | "pending_manual_verification" | "manually_verified" | "verification_expired" | "verification_failed" | "database_matched";
      /** @description A unique and persistent identifier for accounts that can be used to trace multiple instances of the same account across different Items for depository accounts. This is currently an opt-in field and only supported for Chase Items. */
      persistent_account_id?: string;
      [key: string]: unknown;
    };
    /**
     * AccountBalance
     * @description A set of fields describing the balance for an account. Balance information may be cached unless the balance object was returned by `/accounts/balance/get`.
     */
    AccountBalance: {
      /**
       * Format: double
       * @description The amount of funds available to be withdrawn from the account, as determined by the financial institution.
       *
       * For `credit`-type accounts, the `available` balance typically equals the `limit` less the `current` balance, less any pending outflows plus any pending inflows.
       *
       * For `depository`-type accounts, the `available` balance typically equals the `current` balance less any pending outflows plus any pending inflows. For `depository`-type accounts, the `available` balance does not include the overdraft limit.
       *
       * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the `available` balance is the total cash available to withdraw as presented by the institution.
       *
       * Note that not all institutions calculate the `available`  balance. In the event that `available` balance is unavailable, Plaid will return an `available` balance value of `null`.
       *
       * Available balance may be cached and is not guaranteed to be up-to-date in realtime unless the value was returned by `/accounts/balance/get`.
       *
       * If `current` is `null` this field is guaranteed not to be `null`.
       */
      available: number | null;
      /**
       * Format: double
       * @description The total amount of funds in or owed by the account.
       *
       * For `credit`-type accounts, a positive balance indicates the amount owed; a negative amount indicates the lender owing the account holder.
       *
       * For `loan`-type accounts, the current balance is the principal remaining on the loan, except in the case of student loan accounts at Sallie Mae (`ins_116944`). For Sallie Mae student loans, the account's balance includes both principal and any outstanding interest.
       *
       * For `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier), the current balance is the total value of assets as presented by the institution.
       *
       * Note that balance information may be cached unless the value was returned by `/accounts/balance/get`; if the Item is enabled for Transactions, the balance will be at least as recent as the most recent Transaction update. If you require realtime balance information, use the `available` balance as provided by `/accounts/balance/get`.
       *
       * When returned by `/accounts/balance/get`, this field may be `null`. When this happens, `available` is guaranteed not to be `null`.
       */
      current: number | null;
      /**
       * Format: double
       * @description For `credit`-type accounts, this represents the credit limit.
       *
       * For `depository`-type accounts, this represents the pre-arranged overdraft limit, which is common for current (checking) accounts in Europe.
       *
       * In North America, this field is typically only available for `credit`-type accounts.
       */
      limit: number | null;
      /** @description The ISO-4217 currency code of the balance. Always null if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the balance. Always null if `iso_currency_code` is non-null. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time that the balance for the given account has been updated
       *
       * This is currently only provided when the `min_last_updated_datetime` is passed when calling `/accounts/balance/get` for `ins_128026` (Capital One).
       */
      last_updated_datetime?: string | null;
      [key: string]: unknown;
    };
    /**
     * AccountSubtype
     * @description See the [Account type schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full listing of account types and corresponding subtypes.
     * @enum {string|null}
     */
    AccountSubtype: "401a" | "401k" | "403B" | "457b" | "529" | "brokerage" | "cash isa" | "crypto exchange" | "education savings account" | "ebt" | "fixed annuity" | "gic" | "health reimbursement arrangement" | "hsa" | "isa" | "ira" | "lif" | "life insurance" | "lira" | "lrif" | "lrsp" | "non-custodial wallet" | "non-taxable brokerage account" | "other" | "other insurance" | "other annuity" | "prif" | "rdsp" | "resp" | "rlif" | "rrif" | "pension" | "profit sharing plan" | "retirement" | "roth" | "roth 401k" | "rrsp" | "sep ira" | "simple ira" | "sipp" | "stock plan" | "thrift savings plan" | "tfsa" | "trust" | "ugma" | "utma" | "variable annuity" | "credit card" | "paypal" | "cd" | "checking" | "savings" | "money market" | "prepaid" | "auto" | "business" | "commercial" | "construction" | "consumer" | "home equity" | "loan" | "mortgage" | "overdraft" | "line of credit" | "student" | "cash management" | "keogh" | "mutual fund" | "recurring" | "rewards" | "safe deposit" | "sarsep" | "payroll" | null;
    /**
     * LinkEventName
     * @description A string representing the event that has just occurred in the Link flow.
     * @enum {string}
     */
    LinkEventName: "BANK_INCOME_INSIGHTS_COMPLETED" | "CLOSE_OAUTH" | "ERROR" | "EXIT" | "FAIL_OAUTH" | "HANDOFF" | "OPEN" | "OPEN_MY_PLAID" | "OPEN_OAUTH" | "SEARCH_INSTITUTION" | "SELECT_AUTH_TYPE" | "SELECT_BRAND" | "SELECT_DEGRADED_INSTITUTION" | "SELECT_DOWN_INSTITUTION" | "SELECT_FILTERED_INSTITUTION" | "SELECT_INSTITUTION" | "SUBMIT_ACCOUNT_NUMBER" | "SUBMIT_CREDENTIALS" | "SUBMIT_DOCUMENTS" | "SUBMIT_DOCUMENTS_ERROR" | "SUBMIT_DOCUMENTS_SUCCESS" | "SUBMIT_MFA" | "SUBMIT_ROUTING_NUMBER" | "TRANSITION_VIEW" | "VIEW_DATA_TYPES";
    /**
     * LinkDeliveryWebhookCallbackType
     * @description The type of Link callback event
     * @enum {string}
     */
    LinkDeliveryWebhookCallbackType: "ON_SUCCESS" | "ON_EVENT" | "ON_EXIT";
    /**
     * LinkDeliveryWebhookCommunicationMethod
     * @description The communication method used to deliver the hosted link session
     * @enum {string}
     */
    LinkDeliveryWebhookCommunicationMethod: "SMS" | "EMAIL";
    /**
     * LinkDeliveryWebhookDeliveryStatus
     * @description The status of the delivery of the hosted link to the user
     * @enum {string}
     */
    LinkDeliveryWebhookDeliveryStatus: "SUCCESS" | "FAILURE";
    /**
     * LinkDeliveryInstitution
     * @description Information related to the financial institution.
     */
    LinkDeliveryInstitution: {
      /** @description The full institution name, such as 'Wells Fargo' */
      name?: string;
      /** @description The Plaid institution identifier */
      institution_id?: string;
      [key: string]: unknown;
    };
    /**
     * LinkDeliveryVerificationStatus
     * @description Indicates an Item's micro-deposit-based verification status.
     * @enum {string}
     */
    LinkDeliveryVerificationStatus: "automatically_verified" | "pending_automatic_verification" | "pending_manual_verification" | "manually_verified" | "verification_expired" | "verification_failed" | "database_matched";
    /**
     * LinkDeliveryAccount
     * @description Information related to account attached to the connected Item
     */
    LinkDeliveryAccount: {
      /** @description The Plaid `account_id` */
      id?: string;
      /** @description The official account name */
      name?: string;
      /** @description The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts. It may also not match the mask that the bank displays to the user. */
      mask?: string;
      /** @description The account type. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
      type?: string;
      /** @description The account subtype. See the [Account schema](https://plaid.com/docs/api/accounts/#account-type-schema) for a full list of possible values */
      subtype?: string;
      verification_status?: components["schemas"]["LinkDeliveryVerificationStatus"];
      /** @description If micro-deposit verification is being used, indicates whether the account being verified is a `business` or `personal` account. */
      class_type?: string;
      [key: string]: unknown;
    };
    /**
     * LinkDeliveryMetadata
     * @description Information related to the related to the delivery of the link session to users
     */
    LinkDeliveryMetadata: {
      communication_method?: components["schemas"]["LinkDeliveryWebhookCommunicationMethod"];
      delivery_status?: components["schemas"]["LinkDeliveryWebhookDeliveryStatus"];
      [key: string]: unknown;
    };
    /**
     * LinkCallbackMetadata
     * @description Information related to the callback from the hosted Link session.
     */
    LinkCallbackMetadata: {
      callback_type?: components["schemas"]["LinkDeliveryWebhookCallbackType"];
      event_name?: components["schemas"]["LinkEventName"];
      /** @description Indicates where in the flow the Link user exited */
      status?: string;
      /** @description A unique identifier associated with a user's actions and events through the Link flow. Include this identifier when opening a support ticket for faster turnaround. */
      link_session_id?: string;
      /** @description The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. */
      request_id?: string;
      institution?: components["schemas"]["LinkDeliveryInstitution"];
      /** @description A list of accounts attached to the connected Item. If Account Select is enabled via the developer dashboard, accounts will only include selected accounts. */
      accounts?: components["schemas"]["LinkDeliveryAccount"][];
      [key: string]: unknown;
    };
    /**
     * NumbersACH
     * @description Identifying information for transferring money to or from a US account via ACH or wire transfer.
     */
    NumbersACH: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /**
       * @description The ACH account number for the account.
       *
       * Note that when using OAuth with Chase Bank (`ins_56`), Chase will issue "tokenized" routing and account numbers, which are not the user's actual account and routing numbers. These tokenized account numbers (also known as TANs) should work identically to normal account and routing numbers. The digits returned in the `mask` field will continue to reflect the actual account number, rather than the tokenized account number; for this reason, when displaying account numbers to the user to help them identify their account in your UI, always use the `mask` rather than truncating the `account` number. If a user revokes their permissions to your app, the tokenized numbers will no longer work.
       */
      account: string;
      /** @description The ACH routing number for the account. If the institution is `ins_56`, this may be a tokenized routing number. For more information, see the description of the `account` field. */
      routing: string;
      /** @description The wire transfer routing number for the account, if available */
      wire_routing: string | null;
      /** @description Whether the account supports ACH transfers into the account */
      can_transfer_in?: boolean | null;
      /** @description Whether the account supports ACH transfers out of the account */
      can_transfer_out?: boolean | null;
      [key: string]: unknown;
    };
    /** @description Identifying information for transferring money to or from a US account via ACH or wire transfer. */
    NumbersACHNullable: (components["schemas"]["NumbersACH"] & {
      [key: string]: unknown;
    }) | null;
    /**
     * NumbersEFT
     * @description Identifying information for transferring money to or from a Canadian bank account via EFT.
     */
    NumbersEFT: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The EFT account number for the account */
      account: string;
      /** @description The EFT institution number for the account */
      institution: string;
      /** @description The EFT branch number for the account */
      branch: string;
      [key: string]: unknown;
    };
    /** @description Identifying information for transferring money to or from a Canadian bank account via EFT. */
    NumbersEFTNullable: (components["schemas"]["NumbersEFT"] & {
      [key: string]: unknown;
    }) | null;
    /**
     * NumbersInternational
     * @description Identifying information for transferring money to or from an international bank account via wire transfer.
     */
    NumbersInternational: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The International Bank Account Number (IBAN) for the account */
      iban: string;
      /** @description The Bank Identifier Code (BIC) for the account */
      bic: string;
      [key: string]: unknown;
    };
    /** @description Identifying information for transferring money to or from an international bank account via wire transfer. */
    NumbersInternationalNullable: (components["schemas"]["NumbersInternational"] & {
      [key: string]: unknown;
    }) | null;
    /**
     * NumbersBACS
     * @description Identifying information for transferring money to or from a UK bank account via BACS.
     */
    NumbersBACS: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The BACS account number for the account */
      account: string;
      /** @description The BACS sort code for the account */
      sort_code: string;
      [key: string]: unknown;
    };
    /** @description Identifying information for transferring money to or from a UK bank account via BACS. */
    NumbersBACSNullable: (components["schemas"]["NumbersBACS"] & {
      [key: string]: unknown;
    }) | null;
    /** @description Account numbers using the International Bank Account Number and BIC/SWIFT code format. */
    NumbersInternationalIBAN: {
      iban: components["schemas"]["NumbersIBAN"];
      /** @description The Business Identifier Code, also known as SWIFT code, for this bank account. */
      bic: string;
      [key: string]: unknown;
    } | null;
    /** @description International Bank Account Number (IBAN). */
    NumbersIBAN: string;
    /** @description International Bank Account Number (IBAN). */
    NumbersIBANNullable: string | null;
    /** @description Identifying information for transferring holdings to an investments account. */
    InvestmentsAuthGetNumbers: {
      acats?: components["schemas"]["NumbersACATS"][];
      aton?: components["schemas"]["NumbersATON"][];
      [key: string]: unknown;
    };
    /**
     * NumbersACATS
     * @description Identifying information for transferring holdings to an investments account via ACATS.
     */
    NumbersACATS: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The full account number for the account */
      account: string;
      /** @description Identifiers for the clearinghouses that are assocciated with the account in order of relevance. This array will be empty if we can't provide any account level data. Institution level data can be retrieved from the institutions/get endpoints. */
      dtc_numbers: string[];
      [key: string]: unknown;
    };
    /**
     * NumbersATON
     * @description Identifying information for transferring holdings to an investments account via ATON.
     */
    NumbersATON: {
      /** @description The Plaid account ID associated with the account numbers */
      account_id: string;
      /** @description The full account number for the account */
      account: string;
      [key: string]: unknown;
    };
    /**
     * RecipientBACS
     * @description An object containing a BACS account number and sort code. If an IBAN is not provided or if you need to accept domestic GBP-denominated payments, BACS data is required.
     */
    RecipientBACS: {
      /** @description The account number of the account. Maximum of 10 characters. */
      account?: string;
      /** @description The 6-character sort code of the account. */
      sort_code?: string;
      [key: string]: unknown;
    } | null;
    /** @description An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
    RecipientBACSNullable: (components["schemas"]["RecipientBACS"] & {
      [key: string]: unknown;
    }) | null;
    /** @description An object containing a BACS account number and sort code. If an IBAN is not provided or if this recipient needs to accept domestic GBP-denominated payments, BACS data is required. */
    SenderBACSNullable: (components["schemas"]["RecipientBACS"] & {
      [key: string]: unknown;
    }) | null;
    /** @description An optional object used to restrict the accounts used for payments. If provided, the end user will be able to send payments only from the specified bank account. */
    PaymentInitiationOptionalRestrictionBacs: (components["schemas"]["RecipientBACS"] & {
      [key: string]: unknown;
    }) | null;
    /**
     * RemovedTransaction
     * @description A representation of a removed transaction
     */
    RemovedTransaction: {
      /** @description The ID of the removed transaction. */
      transaction_id?: string;
    };
    /**
     * RequestID
     * @description A unique identifier for the request, which can be used for troubleshooting. This identifier, like all Plaid identifiers, is case sensitive.
     */
    RequestID: string;
    /**
     * TransactionsRuleDetails
     * @description A representation of transactions rule details.
     */
    TransactionsRuleDetails: {
      field: components["schemas"]["TransactionsRuleField"];
      type: components["schemas"]["TransactionsRuleType"];
      /** @description For TRANSACTION_ID field, provide transaction_id. For NAME field, provide a string pattern. */
      query: string;
    };
    /**
     * TransactionsRuleField
     * @description Transaction field for which the rule is defined.
     * @enum {string}
     */
    TransactionsRuleField: "TRANSACTION_ID" | "NAME";
    /**
     * TransactionsRuleType
     * @description Transaction rule's match type. For TRANSACTION_ID field, EXACT_MATCH is available.
     * Matches are case sensitive.
     *
     * @enum {string}
     */
    TransactionsRuleType: "EXACT_MATCH" | "SUBSTRING_MATCH";
    /**
     * TransactionsCategoryRule
     * @description A representation of a transactions category rule.
     */
    TransactionsCategoryRule: {
      /** @description A unique identifier of the rule created */
      id?: string;
      /** @description A unique identifier of the Item the rule was created for. */
      item_id?: string;
      /**
       * Format: date-time
       * @description Date and time when a rule was created in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ).
       */
      created_at?: string;
      /**
       * @description Personal finance category unique identifier.
       *
       * In the personal finance category taxonomy, this field is represented by the detailed category field.
       */
      personal_finance_category?: string;
      rule_details?: components["schemas"]["TransactionsRuleDetails"];
    };
    /**
     * TransactionBase
     * @description A representation of a transaction
     */
    TransactionBase: {
      /** @description The ID of the account in which this transaction occurred. */
      account_id: string;
      /**
       * Format: double
       * @description The settled value of the transaction, denominated in the transactions's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * @deprecated
       * @description A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`, as it provides greater accuracy and more meaningful categorization.
       *
       * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
       */
      category?: string[] | null;
      /**
       * @deprecated
       * @description The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * All Transactions implementations are recommended to use the new `personal_finance_category` instead of `category`, as it provides greater accuracy and more meaningful categorization.
       *
       * If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
       */
      category_id?: string | null;
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      /**
       * Format: date
       * @description For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ). To receive information about the date that a posted transaction was initiated, see the `authorized_date` field.
       */
      date: string;
      location?: components["schemas"]["Location"];
      /**
       * @description The merchant name or transaction description.
       *
       * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync` or `/transactions/get`, this field will always appear. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
       */
      name?: string;
      /** @description The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`. */
      merchant_name?: string | null;
      /** @description The string returned by the financial institution to describe the transaction. For transactions returned by `/transactions/sync` or `/transactions/get`, this field is in beta and will be omitted unless the client is both enrolled in the closed beta program and has set `options.include_original_description` to `true`. */
      original_description?: string | null;
      payment_meta?: components["schemas"]["PaymentMeta"];
      /** @description When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled. */
      pending: boolean;
      /** @description The ID of a posted transaction's associated pending transaction, where applicable. */
      pending_transaction_id?: string | null;
      /** @description The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. */
      account_owner?: string | null;
      /** @description The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
      transaction_id: string;
      /**
       * @deprecated
       * @description Please use the `payment_channel` field, `transaction_type` will be deprecated in the future.
       *
       * `digital:` transactions that took place online.
       *
       * `place:` transactions that were made at a physical location.
       *
       * `special:` transactions that relate to banks, e.g. fees or deposits.
       *
       * `unresolved:` transactions that do not fit into the other three types.
       *
       * @enum {string}
       */
      transaction_type?: "digital" | "place" | "special" | "unresolved";
      /** @description The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file. */
      logo_url?: string | null;
      /** @description The website associated with this transaction, if available. */
      website?: string | null;
      [key: string]: unknown;
    };
    /**
     * Transaction
     * @description A representation of a transaction
     */
    Transaction: components["schemas"]["TransactionBase"] & ({
      /**
       * Format: date
       * @description The date that the transaction was authorized. For posted transactions, the `date` field will indicate the posted date, but `authorized_date` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_date`, when available, is generally preferable to use over the `date` field for posted transactions, as it will generally represent the date the user actually made the transaction. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
       */
      authorized_date: string | null;
      /**
       * Format: date-time
       * @description Date and time when a transaction was authorized in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For posted transactions, the `datetime` field will indicate the posted date, but `authorized_datetime` will indicate the day the transaction was authorized by the financial institution. If presenting transactions to the user in a UI, the `authorized_datetime`, when available, is generally preferable to use over the `datetime` field for posted transactions, as it will generally represent the date the user actually made the transaction.
       *
       * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
       */
      authorized_datetime: string | null;
      /**
       * Format: date-time
       * @description Date and time when a transaction was posted in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DDTHH:mm:ssZ` ). For the date that the transaction was initiated, rather than posted, see the `authorized_datetime` field.
       *
       * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00). This field is only populated in API version 2019-05-29 and later.
       */
      datetime: string | null;
      /**
       * @description The channel used to make a payment.
       * `online:` transactions that took place online.
       *
       * `in store:` transactions that were made at a physical location.
       *
       * `other:` transactions that relate to banks, e.g. fees or deposits.
       *
       * This field replaces the `transaction_type` field.
       *
       * @enum {string}
       */
      payment_channel: "online" | "in store" | "other";
      personal_finance_category?: components["schemas"]["PersonalFinanceCategory"];
      transaction_code: components["schemas"]["TransactionCode"];
      /** @description The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file. */
      personal_finance_category_icon_url?: string;
      /** @description The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description. */
      counterparties?: components["schemas"]["TransactionCounterparty"][];
      /** @description A unique, stable, Plaid-generated ID that maps to the merchant. */
      merchant_entity_id?: string | null;
      [key: string]: unknown;
    });
    /**
     * Transaction Location
     * @description A representation of where a transaction took place
     */
    Location: {
      /** @description The street address where the transaction occurred. */
      address: string | null;
      /** @description The city where the transaction occurred. */
      city: string | null;
      /** @description The region or state where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `state`. */
      region: string | null;
      /** @description The postal code where the transaction occurred. In API versions 2018-05-22 and earlier, this field is called `zip`. */
      postal_code: string | null;
      /** @description The ISO 3166-1 alpha-2 country code where the transaction occurred. */
      country: string | null;
      /**
       * Format: double
       * @description The latitude where the transaction occurred.
       */
      lat: number | null;
      /**
       * Format: double
       * @description The longitude where the transaction occurred.
       */
      lon: number | null;
      /** @description The merchant defined store number where the transaction occurred. */
      store_number: string | null;
      [key: string]: unknown;
    };
    /**
     * TransactionStream
     * @description A grouping of related transactions
     */
    TransactionStream: {
      /** @description The ID of the account to which the stream belongs */
      account_id: string;
      /** @description A unique id for the stream */
      stream_id: string;
      /**
       * @deprecated
       * @description A hierarchical array of the categories to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
       */
      category: string[];
      /**
       * @deprecated
       * @description The ID of the category to which this transaction belongs. See [Categories](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * All implementations are encouraged to use the new `personal_finance_category` instead of `category`. `personal_finance_category` provides more meaningful categorization and greater accuracy.
       */
      category_id: string;
      /** @description A description of the transaction stream. */
      description: string;
      /** @description The merchant associated with the transaction stream. */
      merchant_name: string | null;
      /**
       * Format: date
       * @description The posted date of the earliest transaction in the stream.
       */
      first_date: string;
      /**
       * Format: date
       * @description The posted date of the latest transaction in the stream.
       */
      last_date: string;
      frequency: components["schemas"]["RecurringTransactionFrequency"];
      /** @description An array of Plaid transaction IDs belonging to the stream, sorted by posted date. */
      transaction_ids: string[];
      average_amount: components["schemas"]["TransactionStreamAmount"];
      last_amount: components["schemas"]["TransactionStreamAmount"];
      /** @description Indicates whether the transaction stream is still live. */
      is_active: boolean;
      status: components["schemas"]["TransactionStreamStatus"];
      personal_finance_category?: components["schemas"]["PersonalFinanceCategory"];
      /** @description This will be set to `true` if the stream has been modified by request to a `/transactions/recurring/streams` endpoint. It will be `false` for all other streams. */
      is_user_modified: boolean;
      /**
       * Format: date
       * @description The date of the most recent user modification. This will only be set if `is_user_modified` is `true`.
       */
      last_user_modified_date?: string;
      [key: string]: unknown;
    };
    /**
     * TransactionStreamAmount
     * @description Object with data pertaining to an amount on the transaction stream.
     */
    TransactionStreamAmount: {
      /**
       * Format: double
       * @description Represents the numerical value of an amount.
       */
      amount?: number;
      /**
       * @description The ISO-4217 currency code of the amount. Always `null` if `unofficial_currency_code` is non-`null`.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      iso_currency_code?: string | null;
      /** @description The unofficial currency code of the amount. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries. */
      unofficial_currency_code?: string | null;
      [key: string]: unknown;
    };
    /**
     * RecurringTransactionFrequency
     * @description Describes the frequency of the transaction stream.
     *
     * `WEEKLY`: Assigned to a transaction stream that occurs approximately every week.
     *
     * `BIWEEKLY`: Assigned to a transaction stream that occurs approximately every 2 weeks.
     *
     * `SEMI_MONTHLY`: Assigned to a transaction stream that occurs approximately twice per month. This frequency is typically seen for inflow transaction streams.
     *
     * `MONTHLY`: Assigned to a transaction stream that occurs approximately every month.
     *
     * `ANNUALLY`: Assigned to a transaction stream that occurs approximately every year.
     *
     * `UNKNOWN`: Assigned to a transaction stream that does not fit any of the pre-defined frequencies.
     * @enum {string}
     */
    RecurringTransactionFrequency: "UNKNOWN" | "WEEKLY" | "BIWEEKLY" | "SEMI_MONTHLY" | "MONTHLY" | "ANNUALLY";
    /**
     * TransactionStreamStatus
     * @description The current status of the transaction stream.
     *
     * `MATURE`: A `MATURE` recurring stream should have at least 3 transactions and happen on a regular cadence (For Annual recurring stream, we will mark it `MATURE` after 2 instances).
     *
     * `EARLY_DETECTION`: When a recurring transaction first appears in the transaction history and before it fulfills the requirement of a mature stream, the status will be `EARLY_DETECTION`.
     *
     * `TOMBSTONED`: A stream that was previously in the `EARLY_DETECTION` status will move to the `TOMBSTONED` status when no further transactions were found at the next expected date.
     *
     * `UNKNOWN`: A stream is assigned an `UNKNOWN` status when none of the other statuses are applicable.
     * @enum {string}
     */
    TransactionStreamStatus: "UNKNOWN" | "MATURE" | "EARLY_DETECTION" | "TOMBSTONED";
    /**
     * InvestmentsAuthOwner
     * @description Information on the ownership of an investments account
     */
    InvestmentsAuthOwner: {
      /** @description The ID of the account that this identity information pertains to */
      account_id?: string;
      /**
       * @description A list of names associated with the account by the financial institution. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.
       *
       * If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account's `names` array.
       */
      names?: string[];
      [key: string]: unknown;
    };
    /**
     * Institution
     * @description Details relating to a specific financial institution
     */
    Institution: {
      /** @description Unique identifier for the institution. Note that the same institution may have multiple records, each with different institution IDs; for example, if the institution has migrated to OAuth, there may be separate `institution_id`s for the OAuth and non-OAuth versions of the institution. Institutions that operate in different countries or with multiple login portals may also have separate `institution_id`s for each country or portal. */
      institution_id: string;
      /** @description The official name of the institution. */
      name: string;
      /** @description A list of the Plaid products supported by the institution. Note that only institutions that support Instant Auth will return `auth` in the product array; institutions that do not list `auth` may still support other Auth methods such as Instant Match or Automated Micro-deposit Verification. To identify institutions that support those methods, use the `auth_metadata` object. For more details, see [Full Auth coverage](https://plaid.com/docs/auth/coverage/). */
      products: components["schemas"]["Products"][];
      /** @description A list of the country codes supported by the institution. */
      country_codes: components["schemas"]["CountryCode"][];
      /** @description The URL for the institution's website */
      url?: string | null;
      /** @description Hexadecimal representation of the primary color used by the institution */
      primary_color?: string | null;
      /** @description Base64 encoded representation of the institution's logo, returned as a base64 encoded 152x152 PNG. Not all institutions' logos are available. */
      logo?: string | null;
      /** @description A partial list of routing numbers associated with the institution. This list is provided for the purpose of looking up institutions by routing number. It is not comprehensive and should never be used as a complete list of routing numbers for an institution. */
      routing_numbers: string[];
      /** @description A partial list of DTC numbers associated with the institution. */
      dtc_numbers?: string[];
      /** @description Indicates that the institution has an OAuth login flow. This will be `true` if OAuth is supported for any Items associated with the institution, even if the institution also supports non-OAuth connections. */
      oauth: boolean;
      status?: components["schemas"]["InstitutionStatus"];
      payment_initiation_metadata?: components["schemas"]["PaymentInitiationMetadata"];
      auth_metadata?: components["schemas"]["AuthMetadata"];
      [key: string]: unknown;
    };
    /**
     * InstitutionStatus
     * @description The status of an institution is determined by the health of its Item logins, Transactions updates, Investments updates, Liabilities updates, Auth requests, Balance requests, Identity requests, Investments requests, and Liabilities requests. A login attempt is conducted during the initial Item add in Link. If there is not enough traffic to accurately calculate an institution's status, Plaid will return null rather than potentially inaccurate data.
     *
     * Institution status is accessible in the Dashboard and via the API using the `/institutions/get_by_id` endpoint with the `include_status` option set to true. Note that institution status is not available in the Sandbox environment.
     */
    InstitutionStatus: ({
      item_logins?: components["schemas"]["ProductStatus"];
      transactions_updates?: components["schemas"]["ProductStatus"];
      auth?: components["schemas"]["ProductStatus"];
      identity?: components["schemas"]["ProductStatus"];
      investments_updates?: components["schemas"]["ProductStatus"];
      liabilities_updates?: components["schemas"]["ProductStatus"];
      liabilities?: components["schemas"]["ProductStatus"];
      investments?: components["schemas"]["ProductStatus"];
      /** @description Details of recent health incidents associated with the institution. */
      health_incidents?: components["schemas"]["HealthIncident"][] | null;
      [key: string]: unknown;
    }) | null;
    /**
     * CountryCode
     * @description ISO-3166-1 alpha-2 country code standard.
     * @enum {string}
     */
    CountryCode: "US" | "GB" | "ES" | "NL" | "FR" | "IE" | "CA" | "DE" | "IT" | "PL" | "DK" | "NO" | "SE" | "EE" | "LT" | "LV" | "PT" | "BE";
    /**
     * ConsumerReportPermissiblePurpose
     * @description This enum describes the reason a consumer report is created for
     *
     * `ACCOUNT_REVIEW_CREDIT`: In connection with a consumer credit transaction for the review or collection of an account pursuant to FCRA Section 604(a)(3)(A).
     * `ACCOUNT_REVIEW_NON_CREDIT`: For a legitimate business need of the information to review a non-credit account provided primarily for personal, family, or household purposes to determine whether the consumer continues to meet the terms of the account pursuant to FCRA Section 604(a)(3)(F)(2).
     * `EMPLOYMENT`: For employment purposes pursuant to FCRA 604(a)(3)(B), including hiring, retention and promotion purposes.
     * `EXTENSION_OF_CREDIT`: In connection with a credit transaction initiated by and involving the consumer pursuant to FCRA Section 604(a)(3)(A).
     * `LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING`: For a legitimate business need in connection with a business transaction initiated by the consumer primarily for personal, family, or household purposes in connection with a property rental assessment pursuant to FCRA Section 604(a)(3)(F)(i).
     * `LEGITIMATE_BUSINESS_NEED_OTHER`: For a legitimate business need in connection with a business transaction made primarily for personal, family, or household initiated by the consumer pursuant to FCRA Section 604(a)(3)(F)(i).
     * `WRITTEN_INSTRUCTION_PREQUALIFICATION`: In accordance with the written instructions of the consumer pursuant to FCRA Section 604(a)(2), to evaluate an application’s profile to make an offer to the consumer.
     * `WRITTEN_INSTRUCTION_OTHER`: In accordance with the written instructions of the consumer pursuant to FCRA Section 604(a)(2), such as when an individual agrees to act as a guarantor or assumes personal liability for a consumer, business, or commercial loan.
     * @enum {string}
     */
    ConsumerReportPermissiblePurpose: "ACCOUNT_REVIEW_CREDIT" | "ACCOUNT_REVIEW_NON_CREDIT" | "EMPLOYMENT" | "EXTENSION_OF_CREDIT" | "LEGITIMATE_BUSINESS_NEED_TENANT_SCREENING" | "LEGITIMATE_BUSINESS_NEED_OTHER" | "WRITTEN_INSTRUCTION_PREQUALIFICATION" | "WRITTEN_INSTRUCTION_OTHER";
    /**
     * PaymentMeta
     * @description Transaction information specific to inter-bank transfers. If the transaction was not an inter-bank transfer, all fields will be `null`.
     *
     * If the `transactions` object was returned by a Transactions endpoint such as `/transactions/sync` or `/transactions/get`, the `payment_meta` key will always appear, but no data elements are guaranteed. If the `transactions` object was returned by an Assets endpoint such as `/asset_report/get/` or `/asset_report/pdf/get`, this field will only appear in an Asset Report with Insights.
     */
    PaymentMeta: {
      /** @description The transaction reference number supplied by the financial institution. */
      reference_number: string | null;
      /** @description The ACH PPD ID for the payer. */
      ppd_id: string | null;
      /** @description For transfers, the party that is receiving the transaction. */
      payee: string | null;
      /** @description The party initiating a wire transfer. Will be `null` if the transaction is not a wire transfer. */
      by_order_of: string | null;
      /** @description For transfers, the party that is paying the transaction. */
      payer: string | null;
      /** @description The type of transfer, e.g. 'ACH' */
      payment_method: string | null;
      /** @description The name of the payment processor */
      payment_processor: string | null;
      /** @description The payer-supplied description of the transfer. */
      reason: string | null;
      [key: string]: unknown;
    };
    /**
     * transaction_code
     * @description An identifier classifying the transaction type.
     *
     * This field is only populated for European institutions. For institutions in the US and Canada, this field is set to `null`.
     *
     * `adjustment:` Bank adjustment
     *
     * `atm:` Cash deposit or withdrawal via an automated teller machine
     *
     * `bank charge:` Charge or fee levied by the institution
     *
     * `bill payment`: Payment of a bill
     *
     * `cash:` Cash deposit or withdrawal
     *
     * `cashback:` Cash withdrawal while making a debit card purchase
     *
     * `cheque:` Document ordering the payment of money to another person or organization
     *
     * `direct debit:` Automatic withdrawal of funds initiated by a third party at a regular interval
     *
     * `interest:` Interest earned or incurred
     *
     * `purchase:` Purchase made with a debit or credit card
     *
     * `standing order:` Payment instructed by the account holder to a third party at a regular interval
     *
     * `transfer:` Transfer of money between accounts
     * @enum {string|null}
     */
    TransactionCode: "adjustment" | "atm" | "bank charge" | "bill payment" | "cash" | "cashback" | "cheque" | "direct debit" | "interest" | "purchase" | "standing order" | "transfer" | null;
    /**
     * Category
     * @description Information describing a transaction category
     */
    Category: {
      /** @description An identifying number for the category. `category_id` is a Plaid-specific identifier and does not necessarily correspond to merchant category codes. */
      category_id: string;
      /** @description `place` for physical transactions or `special` for other transactions such as bank charges. */
      group: string;
      /** @description A hierarchical array of the categories to which this `category_id` belongs. */
      hierarchy: string[];
      [key: string]: unknown;
    };
    /**
     * Counterparty
     * @description The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
     */
    Counterparty: {
      /** @description The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description. */
      name: string;
      /** @description A unique, stable, Plaid-generated ID that maps to the counterparty. */
      entity_id?: string | null;
      type: components["schemas"]["CounterpartyType"];
      /** @description The website associated with the counterparty. */
      website: string | null;
      /** @description The URL of a logo associated with the counterparty, if available. The logo will always be 100×100 pixel PNG file. */
      logo_url: string | null;
      /**
       * @description A description of how confident we are that the provided counterparty is involved in the transaction.
       *
       * `VERY_HIGH`: We recognize this counterparty and we are more than 98% confident that it is involved in this transaction.
       * `HIGH`: We recognize this counterparty and we are more than 90% confident that it is involved in this transaction.
       * `MEDIUM`: We are moderately confident that this counterparty was involved in this transaction, but some details may differ from our records.
       * `LOW`: We didn’t find a matching counterparty in our records, so we are returning a cleansed name parsed out of the request description.
       * `UNKNOWN`: We don’t know the confidence level for this counterparty.
       */
      confidence_level?: string | null;
      [key: string]: unknown;
    };
    /**
     * Counterparty
     * @description The counterparty, such as the merchant or financial institution, is extracted by Plaid from the raw description.
     */
    TransactionCounterparty: {
      /** @description The name of the counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description. */
      name: string;
      /** @description A unique, stable, Plaid-generated ID that maps to the counterparty. */
      entity_id?: string | null;
      type: components["schemas"]["CounterpartyType"];
      /** @description The website associated with the counterparty. */
      website: string | null;
      /** @description The URL of a logo associated with the counterparty, if available. The logo will always be 100×100 pixel PNG file. */
      logo_url: string | null;
      /**
       * @description A description of how confident we are that the provided counterparty is involved in the transaction.
       *
       * `VERY_HIGH`: We recognize this counterparty and we are more than 98% confident that it is involved in this transaction.
       * `HIGH`: We recognize this counterparty and we are more than 90% confident that it is involved in this transaction.
       * `MEDIUM`: We are moderately confident that this counterparty was involved in this transaction, but some details may differ from our records.
       * `LOW`: We didn’t find a matching counterparty in our records, so we are returning a cleansed name parsed out of the request description.
       * `UNKNOWN`: We don’t know the confidence level for this counterparty.
       */
      confidence_level?: string | null;
      [key: string]: unknown;
    };
    /**
     * CounterpartyType
     * @description The counterparty type.
     *
     * `merchant`: a provider of goods or services for purchase
     * `financial_institution`: a financial entity (bank, credit union, BNPL, fintech)
     * `payment_app`: a transfer or P2P app (e.g. Zelle)
     * `marketplace`: a marketplace (e.g DoorDash, Google Play Store)
     * `payment_terminal`: a point-of-sale payment terminal (e.g Square, Toast)
     * `income_source`: the payer in an income transaction (e.g., an employer, client, or government agency)
     * @enum {string}
     */
    CounterpartyType: "merchant" | "financial_institution" | "payment_app" | "marketplace" | "payment_terminal" | "income_source";
    /**
     * PersonalFinanceCategory
     * @description Information describing the intent of the transaction. Most relevant for personal finance use cases, but not limited to such use cases.
     *
     * See the [`taxonomy CSV file`](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) for a full list of personal finance categories. If you are migrating to personal finance categories from the legacy categories, also refer to the [`migration guide`](https://plaid.com/docs/transactions/pfc-migration/).
     */
    PersonalFinanceCategory: ({
      /** @description A high level category that communicates the broad category of the transaction. */
      primary: string;
      /** @description A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category. */
      detailed: string;
      /**
       * @description A description of how confident we are that the provided categories accurately describe the transaction intent.
       *
       * `VERY_HIGH`: We are more than 98% confident that this category reflects the intent of the transaction.
       * `HIGH`: We are more than 90% confident that this category reflects the intent of the transaction.
       * `MEDIUM`: We are moderately confident that this category reflects the intent of the transaction.
       * `LOW`: This category may reflect the intent, but there may be other categories that are more accurate.
       * `UNKNOWN`: We don’t know the confidence level for this category.
       */
      confidence_level?: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * UserToken
     * @description The user token associated with the User data is being requested for.
     */
    UserToken: string;
    /**
     * AccessToken
     * @description The access token associated with the Item data is being requested for.
     */
    AccessToken: string;
    /** @description The access token associated with the Item data is being requested for. */
    AccessTokenNullable: string | null;
    /** @description The Plaid `access_token` for the account that will be debited or credited. */
    TransferAccessToken: string;
    /** @description The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
    TransferAccountID: string;
    /** @description Client ID of the customer that owns the Ledger balance. This is so Plaid knows which of your customers to payout or collect funds. Only applicable for [Platform customers](https://plaid.com/docs/transfer/application/#originators-vs-platforms). Do not include if you’re paying out to yourself. */
    TransferOriginatorClientID: string | null;
    /** @description Specify the account used to fund the transfer. Should be specified if using legacy funding methods only. If using Plaid Ledger, leave this field blank. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the "Account ID" column. If this field is left blank and you are using legacy funding methods, this will default to the default `funding_account_id` specified during onboarding. Otherwise, Plaid Ledger will be used. */
    TransferMigratedFundingAccountIDRequest: string | null;
    /** @description Specify the account used to fund the transfer. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the "Account ID" column. If this field is left blank, it will default to the default `funding_account_id` specified during onboarding. */
    TransferUnmigratedFundingAccountIDRequest: string | null;
    /** @description Specify which funding account linked to this Plaid Ledger to use. Customers can find a list of `funding_account_id`s in the Accounts page of your Plaid Dashboard, under the "Account ID" column. If this field is left blank, this will default to the default `funding_account_id` specified during onboarding. If an `originator_client_id` is specified, the `funding_account_id` must belong to the specified originator, and if `funding_account_id` is left blank, the originator's default `funding_account_id` will be used. */
    TransferLedgerFundingAccountIDRequest: string | null;
    /** @description The id of the funding account to use, available in the Plaid Dashboard. This determines which of your business checking accounts will be credited or debited. */
    TransferFundingAccountIDResponse: string;
    /** @description The id of the associated funding account, available in the Plaid Dashboard. If present, this indicates which of your business checking accounts will be credited or debited. */
    TransferFundingAccountIDResponseNullable: string | null;
    /** @description The payment profile token associated with the Payment Profile that will be debited or credited. Required if not using `access_token`. */
    TransferPaymentProfileToken: string;
    /** @description The Plaid `access_token` for the account that will be debited or credited. */
    BankTransferAccessToken: string;
    /**
     * APISecret
     * @description Your Plaid API `secret`. The `secret` is required and may be provided either in the `PLAID-SECRET` header or as part of a request body.
     */
    APISecret: string;
    /**
     * ClientID
     * @description Your Plaid API `client_id`. The `client_id` is required and may be provided either in the `PLAID-CLIENT-ID` header or as part of a request body.
     */
    APIClientID: string;
    /**
     * ScreeningStatusUpdatedWebhook
     * @description Fired when an individual screening status has changed, which can occur manually via the dashboard or during ongoing monitoring.
     */
    ScreeningStatusUpdatedWebhook: {
      /** @description `SCREENING` */
      webhook_type: string;
      /** @description `STATUS_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated screening. */
      screening_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * EntityScreeningStatusUpdatedWebhook
     * @description Fired when an entity screening status has changed, which can occur manually via the dashboard or during ongoing monitoring.
     */
    EntityScreeningStatusUpdatedWebhook: {
      /** @description `ENTITY_SCREENING` */
      webhook_type: string;
      /** @description `STATUS_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated screening. */
      screening_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BeaconUserStatusUpdatedWebhook
     * @description Fired when a Beacon User status has changed, which can occur manually via the dashboard or when information is reported to the Beacon network.
     */
    BeaconUserStatusUpdatedWebhook: {
      /** @description `BEACON` */
      webhook_type: string;
      /** @description `USER_STATUS_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated Beacon user. */
      beacon_user_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportCreatedWebhook
     * @description Fired when one of your Beacon Users is first reported to the Beacon network.
     */
    BeaconReportCreatedWebhook: {
      /** @description `BEACON` */
      webhook_type: string;
      /** @description `REPORT_CREATED` */
      webhook_code: string;
      /** @description The ID of the associated Beacon Report. */
      beacon_report_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportUpdatedWebhook
     * @description Fired when one of your existing Beacon Reports has been modified or removed from the Beacon Network.
     */
    BeaconReportUpdatedWebhook: {
      /** @description `BEACON` */
      webhook_type: string;
      /** @description `REPORT_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated Beacon Report. */
      beacon_report_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportSyndicationCreatedWebhook
     * @description Fired when a report created on the Beacon Network matches with one of your Beacon Users.
     */
    BeaconReportSyndicationCreatedWebhook: {
      /** @description `BEACON` */
      webhook_type: string;
      /** @description `REPORT_SYNDICATION_CREATED` */
      webhook_code: string;
      /** @description The ID of the associated Beacon Report Syndication. */
      beacon_report_syndication_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BeaconDuplicateDetectedWebhook
     * @description Fired when a Beacon User created within your organization matches one of your existing users.
     */
    BeaconDuplicateDetectedWebhook: {
      /** @description `BEACON` */
      webhook_type: string;
      /** @description `DUPLICATE_DETECTED` */
      webhook_code: string;
      /** @description The ID of the associated Beacon Duplicate. */
      beacon_duplicate_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationStepUpdatedWebhook
     * @description Fired when an end user has completed a step of the Identity Verification process.
     */
    IdentityVerificationStepUpdatedWebhook: {
      /** @description `IDENTITY_VERIFICATION` */
      webhook_type: string;
      /** @description `STEP_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated Identity Verification attempt. */
      identity_verification_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationRetriedWebhook
     * @description Fired when identity verification has been retried, which can be triggered via the dashboard or the API.
     */
    IdentityVerificationRetriedWebhook: {
      /** @description `IDENTITY_VERIFICATION` */
      webhook_type: string;
      /** @description `RETRIED` */
      webhook_code: string;
      /** @description The ID of the associated Identity Verification attempt. */
      identity_verification_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationStatusUpdatedWebhook
     * @description Fired when the status of an identity verification has been updated, which can be triggered via the dashboard or the API.
     */
    IdentityVerificationStatusUpdatedWebhook: {
      /** @description `IDENTITY_VERIFICATION` */
      webhook_type: string;
      /** @description `STATUS_UPDATED` */
      webhook_code: string;
      /** @description The ID of the associated Identity Verification attempt. */
      identity_verification_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * TransactionsRemovedWebhook
     * @description Fired when transaction(s) for an Item are deleted. The deleted transaction IDs are included in the webhook payload. Plaid will typically check for deleted transaction data several times a day.
     *
     * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    TransactionsRemovedWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `TRANSACTIONS_REMOVED` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /** @description An array of `transaction_ids` corresponding to the removed transactions */
      removed_transactions: string[];
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProcessorTransactionsRemovedWebhook
     * @description This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).
     *
     * Fired when transaction(s) for an Item are deleted. The deleted transaction IDs are included in the webhook payload. Plaid will typically check for deleted transaction data several times a day.
     *
     * This webhook is intended for use with `/processor/transactions/get`; if you are using the newer `/processor/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    ProcessorTransactionsRemovedWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `TRANSACTIONS_REMOVED` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /** @description An array of `transaction_ids` corresponding to the removed transactions */
      removed_transactions: string[];
      /** @description The ID of the account. */
      account_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * DefaultUpdateWebhook
     * @description Fired when new transaction data is available for an Item. Plaid will typically check for new transaction data several times a day.
     *
     * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    DefaultUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /**
       * DefaultUpdateWebhook
       * @description The number of new transactions detected since the last time this webhook was fired.
       */
      new_transactions: number;
      /** @description The `item_id` of the Item the webhook relates to. */
      item_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProcessorDefaultUpdateWebhook
     * @description This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).
     *
     * Fired when new transaction data is available for an Item. Plaid will typically check for new transaction data several times a day.
     *
     * This webhook is intended for use with `/processor/transactions/get`; if you are using the newer `/processor/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    ProcessorDefaultUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /**
       * DefaultUpdateWebhook
       * @description The number of new transactions detected since the last time this webhook was fired.
       */
      new_transactions: number;
      /** @description The ID of the account. */
      account_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * SyncUpdatesAvailableWebhook
     * @description Fired when an Item's transactions change. This can be due to any event resulting in new changes, such as an initial 30-day transactions fetch upon the initialization of an Item with transactions, the backfill of historical transactions that occurs shortly after, or when changes are populated from a regularly-scheduled transactions update job. It is recommended to listen for the `SYNC_UPDATES_AVAILABLE` webhook when using the `/transactions/sync` endpoint. Note that when using `/transactions/sync` the older webhooks `INITIAL_UPDATE`, `HISTORICAL_UPDATE`, `DEFAULT_UPDATE`, and `TRANSACTIONS_REMOVED`, which are intended for use with `/transactions/get`, will also continue to be sent in order to maintain backwards compatibility. It is not necessary to listen for and respond to those webhooks when using `/transactions/sync`.
     *
     * After receipt of this webhook, the new changes can be fetched for the Item from `/transactions/sync`.
     *
     * Note that to receive this webhook for an Item, `/transactions/sync` must have been called at least once on that Item. This means that, unlike the `INITIAL_UPDATE` and `HISTORICAL_UPDATE` webhooks, it will not fire immediately upon Item creation. If `/transactions/sync` is called on an Item that was *not* initialized with Transactions, the webhook will fire twice: once the first 30 days of transactions data has been fetched, and a second time when all available historical transactions data has been fetched.
     *
     * This webhook will fire in the Sandbox environment as it would in Production. It can also be manually triggered in Sandbox by calling `/sandbox/item/fire_webhook`.
     */
    SyncUpdatesAvailableWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `SYNC_UPDATES_AVAILABLE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description Indicates if initial pull information is available. */
      initial_update_complete: boolean;
      /** @description Indicates if historical pull information is available. */
      historical_update_complete: boolean;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProcessorSyncUpdatesAvailableWebhook
     * @description This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).
     *
     * Fired when an Item's transactions change. This can be due to any event resulting in new changes, such as an initial 30-day transactions fetch upon the initialization of an Item with transactions, the backfill of historical transactions that occurs shortly after, or when changes are populated from a regularly-scheduled transactions update job. It is recommended to listen for the `SYNC_UPDATES_AVAILABLE` webhook when using the `/processor/transactions/sync` endpoint. Note that when using `/processor/transactions/sync` the older webhooks `INITIAL_UPDATE`, `HISTORICAL_UPDATE`, `DEFAULT_UPDATE`, and `TRANSACTIONS_REMOVED`, which are intended for use with `/processor/transactions/get`, will also continue to be sent in order to maintain backwards compatibility. It is not necessary to listen for and respond to those webhooks when using `/processor/transactions/sync`.
     *
     * After receipt of this webhook, the new changes can be fetched for the Item from `/processor/transactions/sync`.
     *
     * Note that to receive this webhook for an Item, `/processor/transactions/sync` must have been called at least once on that Item. This means that, unlike the `INITIAL_UPDATE` and `HISTORICAL_UPDATE` webhooks, it will not fire immediately upon Item creation. If `/transactions/sync` is called on an Item that was *not* initialized with Transactions, the webhook will fire twice: once the first 30 days of transactions data has been fetched, and a second time when all available historical transactions data has been fetched.
     *
     * This webhook will typically not fire in the Sandbox environment, due to the lack of dynamic transactions data. To test this webhook in Sandbox, call `/sandbox/item/fire_webhook`.
     */
    ProcessorSyncUpdatesAvailableWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `SYNC_UPDATES_AVAILABLE` */
      webhook_code: string;
      /** @description The ID of the account. */
      account_id: string;
      /** @description Indicates if initial pull information is available. */
      initial_update_complete: boolean;
      /** @description Indicates if historical pull information is available. */
      historical_update_complete: boolean;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * RecurringTransactionsUpdateWebhook
     * @description Fired when recurring transactions data is updated. This includes when a new recurring stream is detected or when a new transaction is added to an existing recurring stream. The `RECURRING_TRANSACTIONS_UPDATE` webhook will also fire when one or more attributes of the recurring stream changes, which is usually a result of the addition, update, or removal of transactions to the stream.
     *
     * After receipt of this webhook, the updated data can be fetched from `/transactions/recurring/get`.
     */
    RecurringTransactionsUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `RECURRING_TRANSACTIONS_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description A list of `account_ids` for accounts that have new or updated recurring transactions data. */
      account_ids: string[];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProcessorRecurringTransactionsUpdateWebhook
     * @description This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).
     *
     * Fired when recurring transactions data is updated. This includes when a new recurring stream is detected or when a new transaction is added to an existing recurring stream. The `RECURRING_TRANSACTIONS_UPDATE` webhook will also fire when one or more attributes of the recurring stream changes, which is usually a result of the addition, update, or removal of transactions to the stream.
     *
     * After receipt of this webhook, the updated data can be fetched from `/processor/transactions/recurring/get`.
     */
    ProcessorRecurringTransactionsUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `RECURRING_TRANSACTIONS_UPDATE` */
      webhook_code: string;
      /** @description The ID of the account. */
      account_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * IdentityDefaultUpdateWebhook
     * @description Fired when a change to identity data has been detected on an Item. Items are checked for identity updates every 30-90 days. We recommend that upon receiving this webhook you make another call to `/identity/get` to fetch the user's latest identity data.
     */
    IdentityDefaultUpdateWebhook: {
      /** @description `IDENTITY` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      account_ids_with_updated_identity: components["schemas"]["AccountIdsWithUpdatedIdentity"];
      error: components["schemas"]["PlaidError"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * AccountIdsWithUpdatedIdentity
     * @description An object with keys of `account_id`'s that are mapped to their respective identity attributes that changed.
     *
     * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["PHONES"] }`
     */
    AccountIdsWithUpdatedIdentity: {
      [key: string]: components["schemas"]["IdentityUpdateTypes"][];
    };
    /**
     * @description The possible types of identity data that may have changed.
     * @enum {string}
     */
    IdentityUpdateTypes: "PHONES" | "ADDRESSES" | "EMAILS" | "NAMES";
    /**
     * HistoricalUpdateWebhook
     * @description Fired when an Item's historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
     *
     * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    HistoricalUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `HISTORICAL_UPDATE` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new, unfetched transactions available */
      new_transactions: number;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProcessorHistoricalUpdateWebhook
     * @description This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).
     *
     * Fired when an Item's historical transaction pull is completed and Plaid has prepared as much historical transaction data as possible for the Item. Once this webhook has been fired, transaction data beyond the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
     *
     * This webhook is intended for use with `/processor/transactions/get`; if you are using the newer `/processor/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    ProcessorHistoricalUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `HISTORICAL_UPDATE` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new, unfetched transactions available */
      new_transactions: number;
      /** @description The ID of the account. */
      account_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * InitialUpdateWebhook
     * @description Fired when an Item's initial transaction pull is completed. Once this webhook has been fired, transaction data for the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
     *
     * This webhook is intended for use with `/transactions/get`; if you are using the newer `/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    InitialUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `INITIAL_UPDATE` */
      webhook_code: string;
      /** @description The error code associated with the webhook. */
      error?: string | null;
      /** @description The number of new, unfetched transactions available. */
      new_transactions: number;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProcessorInitialUpdateWebhook
     * @description This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).
     *
     * Fired when an Item's initial transaction pull is completed. Once this webhook has been fired, transaction data for the most recent 30 days can be fetched for the Item. If [Account Select v2](https://plaid.com/docs/link/customization/#account-select) is enabled, this webhook will also be fired if account selections for the Item are updated, with `new_transactions` set to the number of net new transactions pulled after the account selection update.
     *
     * This webhook is intended for use with `/processor/transactions/get`; if you are using the newer `/processor/transactions/sync` endpoint, this webhook will still be fired to maintain backwards compatibility, but it is recommended to listen for and respond to the `SYNC_UPDATES_AVAILABLE` webhook instead.
     */
    ProcessorInitialUpdateWebhook: {
      /** @description `TRANSACTIONS` */
      webhook_type: string;
      /** @description `INITIAL_UPDATE` */
      webhook_code: string;
      /** @description The error code associated with the webhook. */
      error?: string | null;
      /** @description The number of new, unfetched transactions available. */
      new_transactions: number;
      /** @description The ID of the account. */
      account_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProcessorTokenWebhookUpdate
     * @description This webhook is only sent to [Plaid processor partners](https://plaid.com/docs/auth/partnerships/).
     *
     * Fired when a processor updates the webhook URL for a processor token via `/processor/token/webhook/update`.
     */
    ProcessorTokenWebhookUpdate: {
      /** @description `PROCESSOR_TOKEN` */
      webhook_type: string;
      /** @description `WEBHOOK_UPDATE_ACKNOWLEDGED` */
      webhook_code: string;
      error?: components["schemas"]["PlaidError"];
      /** @description The ID of the account. */
      account_id: string;
      /** @description The new webhook URL. */
      new_webhook_url: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * PhoneNumber
     * @description A phone number
     */
    PhoneNumber: {
      /** @description The phone number. */
      data: string;
      /** @description When `true`, identifies the phone number as the primary number on an account. */
      primary: boolean;
      /**
       * @description The type of phone number.
       * @enum {string}
       */
      type: "home" | "work" | "office" | "mobile" | "mobile1" | "other";
      [key: string]: unknown;
    };
    /**
     * Email
     * @description An object representing an email address
     */
    Email: {
      /** @description The email address. */
      data: string;
      /** @description When `true`, identifies the email address as the primary email on an account. */
      primary: boolean;
      /**
       * @description The type of email account as described by the financial institution.
       * @enum {string}
       */
      type: "primary" | "secondary" | "other";
      [key: string]: unknown;
    };
    /**
     * Address
     * @description A physical mailing address.
     */
    Address: {
      data: components["schemas"]["AddressData"];
      /** @description When `true`, identifies the address as the primary address on an account. */
      primary?: boolean;
      [key: string]: unknown;
    };
    /** @description A physical mailing address. */
    AddressNullable: (components["schemas"]["Address"] & {
      [key: string]: unknown;
    }) | null;
    /** @description Data about the components comprising an address. */
    AddressDataNullable: (components["schemas"]["AddressData"] & {
      [key: string]: unknown;
    }) | null;
    /** @description Data about the components comprising an address. */
    AddressDataNullableNoRequiredFields: (components["schemas"]["AddressDataNotRequired"] & {
      [key: string]: unknown;
    }) | null;
    /**
     * AddressData
     * @description Data about the components comprising an address.
     */
    AddressData: {
      /** @description The full city name */
      city: string | null;
      /**
       * @description The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
       * Example: `"NC"`
       */
      region: string | null;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street: string;
      /** @description The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
      postal_code: string | null;
      /** @description The ISO 3166-1 alpha-2 country code */
      country: string | null;
      [key: string]: unknown;
    };
    /**
     * AddressData
     * @description Data about the components comprising an address.
     */
    AddressDataNotRequired: {
      /** @description The full city name */
      city?: string | null;
      /**
       * @description The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
       * Example: `"NC"`
       */
      region?: string | null;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street?: string;
      /** @description The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
      postal_code?: string | null;
      /** @description The ISO 3166-1 alpha-2 country code */
      country?: string | null;
      [key: string]: unknown;
    };
    /**
     * ProcessorToken
     * @description The processor token obtained from the Plaid integration partner. Processor tokens are in the format: `processor-<environment>-<identifier>`
     */
    ProcessorToken: string;
    /**
     * Owner
     * @description Data returned from the financial institution about the owner or owners of an account. Only the `names` array must be non-empty.
     */
    Owner: {
      /**
       * @description A list of names associated with the account by the financial institution. In the case of a joint account, Plaid will make a best effort to report the names of all account holders.
       *
       * If an Item contains multiple accounts with different owner names, some institutions will report all names associated with the Item in each account's `names` array.
       */
      names: string[];
      /** @description A list of phone numbers associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution. */
      phone_numbers: components["schemas"]["PhoneNumber"][];
      /** @description A list of email addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution. */
      emails: components["schemas"]["Email"][];
      /** @description Data about the various addresses associated with the account by the financial institution. May be an empty array if no relevant information is returned from the financial institution. */
      addresses: components["schemas"]["Address"][];
      [key: string]: unknown;
    };
    /**
     * OwnerOverride
     * @description Data about the owner or owners of an account. Any fields not specified will be filled in with default Sandbox information.
     */
    OwnerOverride: {
      /** @description A list of names associated with the account by the financial institution. These should always be the names of individuals, even for business accounts. Note that the same name data will be used for all accounts associated with an Item. */
      names: string[];
      /** @description A list of phone numbers associated with the account. */
      phone_numbers: components["schemas"]["PhoneNumber"][];
      /** @description A list of email addresses associated with the account. */
      emails: components["schemas"]["Email"][];
      /** @description Data about the various addresses associated with the account. */
      addresses: components["schemas"]["Address"][];
      [key: string]: unknown;
    };
    /**
     * LiabilitiesObject
     * @description An object containing liability accounts
     */
    LiabilitiesObject: {
      /** @description The credit accounts returned. */
      credit: components["schemas"]["CreditCardLiability"][] | null;
      /** @description The mortgage accounts returned. */
      mortgage: components["schemas"]["MortgageLiability"][] | null;
      /** @description The student loan accounts returned. */
      student: components["schemas"]["StudentLoan"][] | null;
      [key: string]: unknown;
    };
    /**
     * StudentLoan
     * @description Contains details about a student loan account
     */
    StudentLoan: {
      /** @description The ID of the account that this liability belongs to. */
      account_id: string | null;
      /** @description The account number of the loan. For some institutions, this may be a masked version of the number (e.g., the last 4 digits instead of the entire number). */
      account_number: string | null;
      /** @description The dates on which loaned funds were disbursed or will be disbursed. These are often in the past. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). */
      disbursement_dates: string[] | null;
      /**
       * Format: date
       * @description The date when the student loan is expected to be paid off. Availability for this field is limited. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      expected_payoff_date: string | null;
      /** @description The guarantor of the student loan. */
      guarantor: string | null;
      /**
       * Format: double
       * @description The interest rate on the loan as a percentage.
       */
      interest_rate_percentage: number;
      /** @description `true` if a payment is currently overdue. Availability for this field is limited. */
      is_overdue: boolean | null;
      /**
       * Format: double
       * @description The amount of the last payment.
       */
      last_payment_amount: number | null;
      /**
       * Format: date
       * @description The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_payment_date: string | null;
      /**
       * Format: date
       * @description The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_statement_issue_date: string | null;
      /** @description The type of loan, e.g., "Consolidation Loans". */
      loan_name: string | null;
      loan_status: components["schemas"]["StudentLoanStatus"];
      /**
       * Format: double
       * @description The minimum payment due for the next billing cycle. There are some exceptions:
       * Some institutions require a minimum payment across all loans associated with an account number. Our API presents that same minimum payment amount on each loan. The institutions that do this are: Great Lakes ( `ins_116861`), Firstmark (`ins_116295`), Commonbond Firstmark Services (`ins_116950`), Nelnet (`ins_116528`), EdFinancial Services (`ins_116304`), Granite State (`ins_116308`), and Oklahoma Student Loan Authority (`ins_116945`).
       * Firstmark (`ins_116295` ) and Navient (`ins_116248`) will display as $0 if there is an autopay program in effect.
       */
      minimum_payment_amount: number | null;
      /**
       * Format: date
       * @description The due date for the next payment. The due date is `null` if a payment is not expected. A payment is not expected if `loan_status.type` is `deferment`, `in_school`, `consolidated`, `paid in full`, or `transferred`. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      next_payment_due_date: string | null;
      /**
       * Format: date
       * @description The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      origination_date: string | null;
      /**
       * Format: double
       * @description The original principal balance of the loan.
       */
      origination_principal_amount: number | null;
      /**
       * Format: double
       * @description The total dollar amount of the accrued interest balance. For Sallie Mae ( `ins_116944`), this amount is included in the current balance of the loan, so this field will return as `null`.
       */
      outstanding_interest_amount: number | null;
      /** @description The relevant account number that should be used to reference this loan for payments. In the majority of cases, `payment_reference_number` will match `account_number,` but in some institutions, such as Great Lakes (`ins_116861`), it will be different. */
      payment_reference_number: string | null;
      pslf_status: components["schemas"]["PSLFStatus"];
      repayment_plan: components["schemas"]["StudentRepaymentPlan"];
      /** @description The sequence number of the student loan. Heartland ECSI (`ins_116948`) does not make this field available. */
      sequence_number: string | null;
      servicer_address: components["schemas"]["ServicerAddressData"];
      /**
       * Format: double
       * @description The year to date (YTD) interest paid. Availability for this field is limited.
       */
      ytd_interest_paid: number | null;
      /**
       * Format: double
       * @description The year to date (YTD) principal paid. Availability for this field is limited.
       */
      ytd_principal_paid: number | null;
      [key: string]: unknown;
    };
    /**
     * CreditCardLiability
     * @description An object representing a credit card account.
     */
    CreditCardLiability: {
      /** @description The ID of the account that this liability belongs to. */
      account_id: string | null;
      /** @description The various interest rates that apply to the account. APR information is not provided by all card issuers; if APR data is not available, this array will be empty. */
      aprs: components["schemas"]["APR"][];
      /** @description true if a payment is currently overdue. Availability for this field is limited. */
      is_overdue: boolean | null;
      /**
       * Format: double
       * @description The amount of the last payment.
       */
      last_payment_amount: number | null;
      /**
       * Format: date
       * @description The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Availability for this field is limited.
       */
      last_payment_date: string | null;
      /**
       * Format: date
       * @description The date of the last statement. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_statement_issue_date: string | null;
      /**
       * Format: double
       * @description The total amount owed as of the last statement issued
       */
      last_statement_balance: number | null;
      /**
       * Format: double
       * @description The minimum payment due for the next billing cycle.
       */
      minimum_payment_amount: number | null;
      /**
       * Format: date
       * @description The due date for the next payment. The due date is `null` if a payment is not expected. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      next_payment_due_date: string | null;
      [key: string]: unknown;
    };
    /**
     * MortgageLiability
     * @description Contains details about a mortgage account.
     */
    MortgageLiability: {
      /** @description The ID of the account that this liability belongs to. */
      account_id: string;
      /** @description The account number of the loan. */
      account_number: string;
      /**
       * Format: double
       * @description The current outstanding amount charged for late payment.
       */
      current_late_fee: number | null;
      /**
       * Format: double
       * @description Total amount held in escrow to pay taxes and insurance on behalf of the borrower.
       */
      escrow_balance: number | null;
      /** @description Indicates whether the borrower has private mortgage insurance in effect. */
      has_pmi: boolean | null;
      /** @description Indicates whether the borrower will pay a penalty for early payoff of mortgage. */
      has_prepayment_penalty: boolean | null;
      interest_rate: components["schemas"]["MortgageInterestRate"];
      /**
       * Format: double
       * @description The amount of the last payment.
       */
      last_payment_amount: number | null;
      /**
       * Format: date
       * @description The date of the last payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      last_payment_date: string | null;
      /** @description Description of the type of loan, for example `conventional`, `fixed`, or `variable`. This field is provided directly from the loan servicer and does not have an enumerated set of possible values. */
      loan_type_description: string | null;
      /** @description Full duration of mortgage as at origination (e.g. `10 year`). */
      loan_term: string | null;
      /**
       * Format: date
       * @description Original date on which mortgage is due in full. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      maturity_date: string | null;
      /**
       * Format: double
       * @description The amount of the next payment.
       */
      next_monthly_payment: number | null;
      /**
       * Format: date
       * @description The due date for the next payment. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      next_payment_due_date: string | null;
      /**
       * Format: date
       * @description The date on which the loan was initially lent. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      origination_date: string | null;
      /**
       * Format: double
       * @description The original principal balance of the mortgage.
       */
      origination_principal_amount: number | null;
      /**
       * Format: double
       * @description Amount of loan (principal + interest) past due for payment.
       */
      past_due_amount: number | null;
      property_address: components["schemas"]["MortgagePropertyAddress"];
      /**
       * Format: double
       * @description The year to date (YTD) interest paid.
       */
      ytd_interest_paid: number | null;
      /**
       * Format: double
       * @description The YTD principal paid.
       */
      ytd_principal_paid: number | null;
      [key: string]: unknown;
    };
    /**
     * MortgageInterestRate
     * @description Object containing metadata about the interest rate for the mortgage.
     */
    MortgageInterestRate: {
      /**
       * Format: double
       * @description Percentage value (interest rate of current mortgage, not APR) of interest payable on a loan.
       */
      percentage: number | null;
      /** @description The type of interest charged (fixed or variable). */
      type: string | null;
      [key: string]: unknown;
    };
    /**
     * MortgagePropertyAddress
     * @description Object containing fields describing property address.
     */
    MortgagePropertyAddress: {
      /** @description The city name. */
      city: string | null;
      /** @description The ISO 3166-1 alpha-2 country code. */
      country: string | null;
      /** @description The five or nine digit postal code. */
      postal_code: string | null;
      /** @description The region or state (example "NC"). */
      region: string | null;
      /** @description The full street address (example "564 Main Street, Apt 15"). */
      street: string | null;
      [key: string]: unknown;
    };
    /**
     * StudentLoanStatus
     * @description An object representing the status of the student loan
     */
    StudentLoanStatus: {
      /**
       * Format: date
       * @description The date until which the loan will be in its current status. Dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      end_date: string | null;
      /**
       * @description The status type of the student loan
       * @enum {string|null}
       */
      type: "cancelled" | "charged off" | "claim" | "consolidated" | "deferment" | "delinquent" | "discharged" | "extension" | "forbearance" | "in grace" | "in military" | "in school" | "not fully disbursed" | "other" | "paid in full" | "refunded" | "repayment" | "transferred" | null;
      [key: string]: unknown;
    };
    /**
     * StudentRepaymentPlan
     * @description An object representing the repayment plan for the student loan
     */
    StudentRepaymentPlan: {
      /** @description The description of the repayment plan as provided by the servicer. */
      description: string | null;
      /**
       * @description The type of the repayment plan.
       * @enum {string|null}
       */
      type: "extended graduated" | "extended standard" | "graduated" | "income-contingent repayment" | "income-based repayment" | "interest-only" | "other" | "pay as you earn" | "revised pay as you earn" | "standard" | "saving on a valuable education" | null;
      [key: string]: unknown;
    };
    /**
     * PSLFStatus
     * @description Information about the student's eligibility in the Public Service Loan Forgiveness program. This is only returned if the institution is FedLoan (`ins_116527`).
     */
    PSLFStatus: {
      /**
       * Format: date
       * @description The estimated date borrower will have completed 120 qualifying monthly payments. Returned in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       */
      estimated_eligibility_date: string | null;
      /** @description The number of qualifying payments that have been made. */
      payments_made: number | null;
      /** @description The number of qualifying payments remaining. */
      payments_remaining: number | null;
      [key: string]: unknown;
    };
    /**
     * ServicerAddressData
     * @description The address of the student loan servicer. This is generally the remittance address to which payments should be sent.
     */
    ServicerAddressData: {
      /** @description The full city name */
      city: string | null;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region: string | null;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street: string | null;
      /** @description The postal code */
      postal_code: string | null;
      /** @description The ISO 3166-1 alpha-2 country code */
      country: string | null;
      [key: string]: unknown;
    };
    /**
     * APR
     * @description Information about the APR on the account.
     */
    APR: {
      /**
       * Format: double
       * @description Annual Percentage Rate applied.
       */
      apr_percentage: number;
      /**
       * @description The type of balance to which the APR applies.
       * @enum {string}
       */
      apr_type: "balance_transfer_apr" | "cash_apr" | "purchase_apr" | "special";
      /**
       * Format: double
       * @description Amount of money that is subjected to the APR if a balance was carried beyond payment due date. How it is calculated can vary by card issuer. It is often calculated as an average daily balance.
       */
      balance_subject_to_apr: number | null;
      /**
       * Format: double
       * @description Amount of money charged due to interest from last statement.
       */
      interest_charge_amount: number | null;
      [key: string]: unknown;
    };
    /**
     * AuthMetadata
     * @description Metadata that captures information about the Auth features of an institution.
     */
    AuthMetadata: {
      supported_methods: components["schemas"]["AuthSupportedMethods"];
      [key: string]: unknown;
    } | null;
    /**
     * AuthSupportedMethods
     * @description Metadata specifically related to which auth methods an institution supports.
     */
    AuthSupportedMethods: {
      /** @description Indicates if instant auth is supported. */
      instant_auth: boolean;
      /** @description Indicates if instant match is supported. */
      instant_match: boolean;
      /** @description Indicates if automated microdeposits are supported. */
      automated_micro_deposits: boolean;
      /** @description Indicates if instant microdeposits are supported. */
      instant_micro_deposits: boolean;
      [key: string]: unknown;
    } | null;
    /**
     * PaymentInitiationMetadata
     * @description Metadata that captures what specific payment configurations an institution supports when making Payment Initiation requests.
     */
    PaymentInitiationMetadata: {
      /** @description Indicates whether the institution supports payments from a different country. */
      supports_international_payments: boolean;
      /** @description Indicates whether the institution supports SEPA Instant payments. */
      supports_sepa_instant: boolean;
      maximum_payment_amount: components["schemas"]["PaymentInitiationMaximumPaymentAmount"];
      /** @description Indicates whether the institution supports returning refund details when initiating a payment. */
      supports_refund_details: boolean;
      standing_order_metadata: components["schemas"]["PaymentInitiationStandingOrderMetadata"];
      [key: string]: unknown;
    } | null;
    /**
     * @description A mapping of currency to maximum payment amount (denominated in the smallest unit of currency) supported by the institution.
     *
     * Example: `{"GBP": "10000"}`
     */
    PaymentInitiationMaximumPaymentAmount: {
      [key: string]: string;
    };
    /**
     * PaymentInitiationStandingOrderMetadata
     * @description Metadata specifically related to valid Payment Initiation standing order configurations for the institution.
     */
    PaymentInitiationStandingOrderMetadata: {
      /** @description Indicates whether the institution supports closed-ended standing orders by providing an end date. */
      supports_standing_order_end_date: boolean;
      /** @description This is only applicable to `MONTHLY` standing orders. Indicates whether the institution supports negative integers (-1 to -5) for setting up a `MONTHLY` standing order relative to the end of the month. */
      supports_standing_order_negative_execution_days: boolean;
      /** @description A list of the valid standing order intervals supported by the institution. */
      valid_standing_order_intervals: components["schemas"]["PaymentScheduleInterval"][];
      [key: string]: unknown;
    } | null;
    /**
     * PaymentInitiationAddress
     * @description The optional address of the payment recipient's bank account. Required by most institutions outside of the UK.
     */
    PaymentInitiationAddress: {
      /** @description An array of length 1-2 representing the street address where the recipient is located. Maximum of 70 characters. */
      street: string[];
      /** @description The city where the recipient is located. Maximum of 35 characters. */
      city: string;
      /** @description The postal code where the recipient is located. Maximum of 16 characters. */
      postal_code: string;
      /** @description The ISO 3166-1 alpha-2 country code where the recipient is located. */
      country: string;
      [key: string]: unknown;
    } | null;
    /**
     * ExternalPaymentScheduleBase
     * @description The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
     */
    ExternalPaymentScheduleBase: ({
      interval?: components["schemas"]["PaymentScheduleInterval"];
      /**
       * @description The day of the interval on which to schedule the payment.
       *
       * If the payment interval is weekly, `interval_execution_day` should be an integer from 1 (Monday) to 7 (Sunday).
       *
       * If the payment interval is monthly, `interval_execution_day` should be an integer indicating which day of the month to make the payment on. Integers from 1 to 28 can be used to make a payment on that day of the month. Negative integers from -1 to -5 can be used to make a payment relative to the end of the month. To make a payment on the last day of the month, use -1; to make the payment on the second-to-last day, use -2, and so on.
       */
      interval_execution_day?: number;
      /**
       * Format: date
       * @description A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will begin on the first `interval_execution_day` on or after the `start_date`.
       *
       * If the first `interval_execution_day` on or after the start date is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
       */
      start_date?: string;
      /**
       * Format: date
       * @description A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). Standing order payments will end on the last `interval_execution_day` on or before the `end_date`.
       * If the only `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/payment_initiation/payment/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
       */
      end_date?: string | null;
      /**
       * Format: date
       * @description The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, this field will be `null`.
       */
      adjusted_start_date?: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * ExternalPaymentScheduleRequest
     * @description The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
     */
    ExternalPaymentScheduleRequest: WithRequired<components["schemas"]["ExternalPaymentScheduleBase"] & Record<string, never>, "start_date" | "interval" | "interval_execution_day">;
    /**
     * PaymentScheduleInterval
     * @description The frequency interval of the payment.
     * @enum {string}
     */
    PaymentScheduleInterval: "WEEKLY" | "MONTHLY";
    /**
     * @description Payment scheme. If not specified - the default in the region will be used (e.g. `SEPA_CREDIT_TRANSFER` for EU). Using unsupported values will result in a failed payment.
     *
     * `LOCAL_DEFAULT`: The default payment scheme for the selected market and currency will be used.
     *
     * `LOCAL_INSTANT`: The instant payment scheme for the selected market and currency will be used (if applicable). Fees may be applied by the institution. If the market does not support an Instant Scheme (e.g. Denmark), the default in the region will be used.
     *
     * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
     *
     * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment within the SEPA area. May involve additional fees and may not be available at some banks.
     * @enum {string|null}
     */
    PaymentScheme: null | "LOCAL_DEFAULT" | "LOCAL_INSTANT" | "SEPA_CREDIT_TRANSFER" | "SEPA_CREDIT_TRANSFER_INSTANT";
    /**
     * @description The payment scheme used to execute this transaction. This is present only for transaction types `PAYOUT` and `REFUND`.
     *
     * `FASTER_PAYMENTS`: The standard payment scheme within the UK.
     *
     * `SEPA_CREDIT_TRANSFER`: The standard payment to a beneficiary within the SEPA area.
     *
     * `SEPA_CREDIT_TRANSFER_INSTANT`: Instant payment to a beneficiary within the SEPA area.
     * @enum {string|null}
     */
    WalletPaymentScheme: null | "FASTER_PAYMENTS" | "SEPA_CREDIT_TRANSFER" | "SEPA_CREDIT_TRANSFER_INSTANT";
    /**
     * PaymentInitiationConsentScope
     * @description Payment consent scope. Defines possible directions for payments made with the given consent.
     *
     * `ME_TO_ME`: Allows moving money between accounts owned by the same user.
     *
     * `EXTERNAL`: Allows initiating payments from the user's account to third parties.
     * @enum {string}
     */
    PaymentInitiationConsentScope: "ME_TO_ME" | "EXTERNAL";
    /**
     * ExternalPaymentInitiationConsentOptions
     * @description Additional payment consent options
     */
    ExternalPaymentInitiationConsentOptions: ({
      /** @description When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
      request_refund_details?: boolean | null;
      /** @description The International Bank Account Number (IBAN) for the payer's account. Where possible, the end user will be able to set up payment consent using only the specified bank account if provided. */
      iban?: string | null;
      bacs?: components["schemas"]["PaymentInitiationOptionalRestrictionBacs"];
    }) | null;
    /**
     * PaymentInitiationConsentConstraints
     * @description Limitations that will be applied to payments initiated using the payment consent.
     */
    PaymentInitiationConsentConstraints: {
      valid_date_time?: components["schemas"]["PaymentConsentValidDateTime"];
      max_payment_amount: components["schemas"]["PaymentConsentMaxPaymentAmount"];
      /** @description A list of amount limitations per period of time. */
      periodic_amounts: components["schemas"]["PaymentConsentPeriodicAmount"][];
    };
    /** @description Maximum amount of a single payment initiated using the payment consent. */
    PaymentConsentMaxPaymentAmount: components["schemas"]["PaymentAmount"];
    /**
     * ConsentPaymentIdempotencyKey
     * @description A random key provided by the client, per unique consent payment. Maximum of 128 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a consent payment fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single payment is created. If the request was successfully processed, it will prevent any payment that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     */
    ConsentPaymentIdempotencyKey: string;
    /**
     * PaymentOptions
     * @description Additional payment options
     */
    ExternalPaymentOptions: ({
      /** @description When `true`, Plaid will attempt to request refund details from the payee's financial institution.  Support varies between financial institutions and will not always be available.  If refund details could be retrieved, they will be available in the `/payment_initiation/payment/get` response. */
      request_refund_details?: boolean | null;
      /** @description The International Bank Account Number (IBAN) for the payer's account. Where possible, the end user will be able to send payments only from the specified bank account if provided. */
      iban?: string | null;
      bacs?: components["schemas"]["PaymentInitiationOptionalRestrictionBacs"];
      scheme?: components["schemas"]["PaymentScheme"];
    }) | null;
    /**
     * ExternalPaymentRefundDetails
     * @description Details about external payment refund
     */
    ExternalPaymentRefundDetails: ({
      /** @description The name of the account holder. */
      name: string;
      /** @description The International Bank Account Number (IBAN) for the account. */
      iban: string | null;
      bacs: components["schemas"]["RecipientBACSNullable"];
    }) | null;
    /**
     * ExternalPaymentScheduleGet
     * @description The schedule that the payment will be executed on. If a schedule is provided, the payment is automatically set up as a standing order. If no schedule is specified, the payment will be executed only once.
     */
    ExternalPaymentScheduleGet: (WithRequired<components["schemas"]["ExternalPaymentScheduleBase"] & Record<string, never>, "adjusted_start_date" | "end_date" | "interval" | "interval_execution_day" | "start_date">) | null;
    /**
     * Products
     * @description A list of products that an institution can support. All Items must be initialized with at least one product. The Balance product is always available and does not need to be specified during initialization.
     * @enum {string}
     */
    Products: "assets" | "auth" | "balance" | "identity" | "identity_match" | "investments" | "investments_auth" | "liabilities" | "payment_initiation" | "identity_verification" | "transactions" | "credit_details" | "income" | "income_verification" | "deposit_switch" | "standing_orders" | "transfer" | "employment" | "recurring_transactions" | "signal" | "statements";
    /**
     * ProductStatus
     * @description A representation of the status health of a request type. Auth requests, Balance requests, Identity requests, Investments requests, Liabilities requests, Transactions updates, Investments updates, Liabilities updates, and Item logins each have their own status object.
     */
    ProductStatus: ({
      /**
       * @deprecated
       * @description This field is deprecated in favor of the `breakdown` object, which provides more granular institution health data.
       *
       * `HEALTHY`: the majority of requests are successful
       * `DEGRADED`: only some requests are successful
       * `DOWN`: all requests are failing
       * @enum {string}
       */
      status: "HEALTHY" | "DEGRADED" | "DOWN";
      /**
       * Format: date-time
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) formatted timestamp of the last status change for the institution.
       */
      last_status_change: string;
      breakdown: components["schemas"]["ProductStatusBreakdown"];
      [key: string]: unknown;
    }) | null;
    /**
     * StatusBreakdown
     * @description A detailed breakdown of the institution's performance for a request type. The values for `success`, `error_plaid`, and `error_institution` sum to 1. The time range used for calculating the breakdown may range from the most recent few minutes to the past six hours. In general, smaller institutions will show status that was calculated over a longer period of time. For Investment updates, which are refreshed less frequently, the period assessed may be 24 hours or more. For more details, see [Institution status details](https://plaid.com/docs/account/activity/#institution-status-details).
     */
    ProductStatusBreakdown: {
      /**
       * Format: double
       * @description The percentage of login attempts that are successful, expressed as a decimal.
       */
      success: number;
      /**
       * Format: double
       * @description The percentage of logins that are failing due to an internal Plaid issue, expressed as a decimal.
       */
      error_plaid: number;
      /**
       * Format: double
       * @description The percentage of logins that are failing due to an issue in the institution's system, expressed as a decimal.
       */
      error_institution: number;
      /**
       * @description The `refresh_interval` may be `DELAYED` or `STOPPED` even when the success rate is high. This value is only returned for Transactions status breakdowns.
       * @enum {string}
       */
      refresh_interval?: "NORMAL" | "DELAYED" | "STOPPED";
      [key: string]: unknown;
    };
    /**
     * UserCustomPassword
     * @description Custom test accounts are configured with a JSON configuration object formulated according to the schema below. All top level fields are optional. Sending an empty object as a configuration will result in an account configured with random balances and transaction history.
     */
    UserCustomPassword: {
      /** @description The version of the password schema to use, possible values are 1 or 2. The default value is 2. You should only specify 1 if you know it is necessary for your test suite. */
      version?: string | null;
      /**
       * @description A seed, in the form of a string, that will be used to randomly generate account and transaction data, if this data is not specified using the `override_accounts` argument. If no seed is specified, the randomly generated data will be different each time.
       *
       * Note that transactions data is generated relative to the Item's creation date. Different Items created on different dates with the same seed for transactions data will have different dates for the transactions. The number of days between each transaction and the Item creation will remain constant. For example, an Item created on December 15 might show a transaction on December 14. An Item created on December 20, using the same seed, would show that same transaction occurring on December 19.
       */
      seed: string;
      /** @description An array of account overrides to configure the accounts for the Item. By default, if no override is specified, transactions and account data will be randomly generated based on the account type and subtype, and other products will have fixed or empty data. */
      override_accounts: components["schemas"]["OverrideAccounts"][];
      mfa: components["schemas"]["MFA"];
      /** @description You may trigger a reCAPTCHA in Plaid Link in the Sandbox environment by using the recaptcha field. Possible values are `good` or `bad`. A value of `good` will result in successful Item creation and `bad` will result in a `RECAPTCHA_BAD` error to simulate a failed reCAPTCHA. Both values require the reCAPTCHA to be manually solved within Plaid Link. */
      recaptcha: string;
      /**
       * @description An error code to force on Item creation. Possible values are:
       *
       * `"INSTITUTION_NOT_RESPONDING"`
       * `"INSTITUTION_NO_LONGER_SUPPORTED"`
       * `"INVALID_CREDENTIALS"`
       * `"INVALID_MFA"`
       * `"ITEM_LOCKED"`
       * `"ITEM_LOGIN_REQUIRED"`
       * `"ITEM_NOT_SUPPORTED"`
       * `"INVALID_LINK_TOKEN"`
       * `"MFA_NOT_SUPPORTED"`
       * `"NO_ACCOUNTS"`
       * `"PLAID_ERROR"`
       * `"USER_INPUT_TIMEOUT"`
       * `"USER_SETUP_REQUIRED"`
       */
      force_error: string;
      [key: string]: unknown;
    };
    /**
     * MFA
     * @description Specifies the multi-factor authentication settings to use with this test account
     */
    MFA: {
      /**
       * @description Possible values are `device`, `selections`, or `questions`.
       *
       * If value is `device`, the MFA answer is `1234`.
       *
       * If value is `selections`, the MFA answer is always the first option.
       *
       * If value is `questions`, the MFA answer is  `answer_<i>_<j>` for the j-th question in the i-th round, starting from 0. For example, the answer to the first question in the second round is `answer_1_0`.
       */
      type: string;
      /** @description Number of rounds of questions. Required if value of `type` is `questions`. */
      question_rounds: number;
      /** @description Number of questions per round. Required if value of `type` is `questions`. If value of type is `selections`, default value is 2. */
      questions_per_round: number;
      /** @description Number of rounds of selections, used if `type` is `selections`. Defaults to 1. */
      selection_rounds: number;
      /** @description Number of available answers per question, used if `type` is `selection`. Defaults to 2. */
      selections_per_question: number;
      [key: string]: unknown;
    };
    /**
     * OverrideAccounts
     * @description Data to use to set values of test accounts. Some values cannot be specified in the schema and will instead will be calculated from other test data in order to achieve more consistent, realistic test data.
     */
    OverrideAccounts: {
      type: components["schemas"]["OverrideAccountType"];
      subtype: components["schemas"]["AccountSubtype"];
      /**
       * Format: double
       * @description If provided, the account will start with this amount as the current balance.
       */
      starting_balance: number;
      /**
       * Format: double
       * @description If provided, the account will always have this amount as its  available balance, regardless of current balance or changes in transactions over time.
       */
      force_available_balance: number;
      /** @description ISO-4217 currency code. If provided, the account will be denominated in the given currency. Transactions will also be in this currency by default. */
      currency: string;
      meta: components["schemas"]["Meta"];
      numbers: components["schemas"]["Numbers"];
      /** @description Specify the list of transactions on the account. */
      transactions: components["schemas"]["TransactionOverride"][];
      holdings?: components["schemas"]["HoldingsOverride"];
      investment_transactions?: components["schemas"]["Investments_TransactionsOverride"];
      identity: components["schemas"]["OwnerOverride"];
      liability: components["schemas"]["LiabilityOverride"];
      inflow_model: components["schemas"]["InflowModel"];
      income?: components["schemas"]["IncomeOverride"];
      [key: string]: unknown;
    };
    /**
     * Meta
     * @description Allows specifying the metadata of the test account
     */
    Meta: {
      /** @description The account's name */
      name: string;
      /** @description The account's official name */
      official_name: string;
      /**
       * Format: double
       * @description The account's limit
       */
      limit: number;
      /** @description The account's mask. Should be an empty string or a string of 2-4 alphanumeric characters. This allows you to model a mask which does not match the account number (such as with a virtual account number). */
      mask: string;
      [key: string]: unknown;
    };
    /**
     * Numbers
     * @description Account and bank identifier number data used to configure the test account. All values are optional.
     */
    Numbers: {
      /** @description Will be used for the account number. */
      account?: string;
      /** @description Must be a valid ACH routing number. */
      ach_routing?: string;
      /** @description Must be a valid wire transfer routing number. */
      ach_wire_routing?: string;
      /** @description EFT institution number. Must be specified alongside `eft_branch`. */
      eft_institution?: string;
      /** @description EFT branch number. Must be specified alongside `eft_institution`. */
      eft_branch?: string;
      /** @description Bank identifier code (BIC). Must be specified alongside `international_iban`. */
      international_bic?: string;
      /** @description International bank account number (IBAN). If no account number is specified via `account`, will also be used as the account number by default. Must be specified alongside `international_bic`. */
      international_iban?: string;
      /** @description BACS sort code */
      bacs_sort_code?: string;
      [key: string]: unknown;
    };
    /**
     * TransactionOverride
     * @description Data to populate as test transaction data. If not specified, random transactions will be generated instead.
     */
    TransactionOverride: {
      /**
       * Format: date
       * @description The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Transactions in Sandbox will move from pending to posted once their transaction date has been reached. If a `date_transacted` is not provided by the institution, a transaction date may be available in the [`authorized_date`](https://plaid.com/docs/api/products/transactions/#transactions-get-response-transactions-authorized-date) field.
       */
      date_transacted: string;
      /**
       * Format: date
       * @description The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Posted dates in the past or present will result in posted transactions; posted dates in the future will result in pending transactions.
       */
      date_posted: string;
      /**
       * Format: double
       * @description The transaction amount. Can be negative.
       */
      amount: number;
      /** @description The transaction description. */
      description: string;
      /** @description The ISO-4217 format currency code for the transaction. */
      currency?: string;
      [key: string]: unknown;
    };
    /**
     * SecurityOverride
     * @description Specify the security associated with the holding or investment transaction. When inputting custom security data to the Sandbox, Plaid will perform post-data-retrieval normalization and enrichment. These processes may cause the data returned by the Sandbox to be slightly different from the data you input. An ISO-4217 currency code and a security identifier (`ticker_symbol`, `cusip`, `isin`, or `sedol`) are required.
     */
    SecurityOverride: {
      /** @description 12-character ISIN, a globally unique securities identifier. A verified CUSIP Global Services license is required to receive this data. This field will be null by default for new customers, and null for existing customers starting March 12, 2024. If you would like access to this field, please start the verification process [here](https://docs.google.com/forms/d/e/1FAIpQLSd9asHEYEfmf8fxJTHZTAfAzW4dugsnSu-HS2J51f1mxwd6Sw/viewform). */
      isin?: string;
      /** @description 9-character CUSIP, an identifier assigned to North American securities. A verified CUSIP Global Services license is required to receive this data. This field will be null by default for new customers, and null for existing customers starting March 12, 2024. If you would like access to this field, please start the verification process [here](https://docs.google.com/forms/d/e/1FAIpQLSd9asHEYEfmf8fxJTHZTAfAzW4dugsnSu-HS2J51f1mxwd6Sw/viewform). */
      cusip?: string;
      /** @description 7-character SEDOL, an identifier assigned to securities in the UK. */
      sedol?: string;
      /** @description A descriptive name for the security, suitable for display. */
      name?: string;
      /** @description The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
      ticker_symbol?: string;
      /** @description Either a valid `iso_currency_code` or `unofficial_currency_code` */
      currency?: string;
    };
    /**
     * HoldingsOverride
     * @description Specify the holdings on the account.
     */
    HoldingsOverride: {
      /**
       * Format: double
       * @description The last price given by the institution for this security
       */
      institution_price: number;
      /**
       * Format: date
       * @description The date at which `institution_price` was current. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
       */
      institution_price_as_of?: string;
      /**
       * Format: double
       * @description The average original value of the holding. Multiple cost basis values for the same security purchased at different prices are not supported.
       */
      cost_basis?: number;
      /**
       * Format: double
       * @description The total quantity of the asset held, as reported by the financial institution.
       */
      quantity: number;
      /** @description Either a valid `iso_currency_code` or `unofficial_currency_code` */
      currency: string;
      security: components["schemas"]["SecurityOverride"];
    };
    /**
     * Investments_TransactionsOverride
     * @description Specify the list of investments transactions on the account.
     */
    Investments_TransactionsOverride: {
      /**
       * Format: date
       * @description Posting date for the transaction. Must be formatted as an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date.
       */
      date: string;
      /** @description The institution's description of the transaction. */
      name: string;
      /**
       * Format: double
       * @description The number of units of the security involved in this transaction. Must be positive if the type is a buy and negative if the type is a sell.
       */
      quantity: number;
      /**
       * Format: double
       * @description The price of the security at which this transaction occurred.
       */
      price: number;
      /**
       * Format: double
       * @description The combined value of all fees applied to this transaction.
       */
      fees?: number;
      /**
       * @description The type of the investment transaction. Possible values are:
       * `buy`: Buying an investment
       * `sell`: Selling an investment
       * `cash`: Activity that modifies a cash position
       * `fee`: A fee on the account
       * `transfer`: Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
       */
      type: string;
      /** @description Either a valid `iso_currency_code` or `unofficial_currency_code` */
      currency: string;
      security?: components["schemas"]["SecurityOverride"];
    };
    /**
     * LiabilityOverride
     * @description Used to configure Sandbox test data for the Liabilities product
     */
    LiabilityOverride: {
      /** @description The type of the liability object, either `credit` or `student`. Mortgages are not currently supported in the custom Sandbox. */
      type: string;
      /**
       * Format: double
       * @description The purchase APR percentage value. For simplicity, this is the only interest rate used to calculate interest charges. Can only be set if `type` is `credit`.
       */
      purchase_apr: number;
      /**
       * Format: double
       * @description The cash APR percentage value. Can only be set if `type` is `credit`.
       */
      cash_apr: number;
      /**
       * Format: double
       * @description The balance transfer APR percentage value. Can only be set if `type` is `credit`.
       */
      balance_transfer_apr: number;
      /**
       * Format: double
       * @description The special APR percentage value. Can only be set if `type` is `credit`.
       */
      special_apr: number;
      /**
       * Format: double
       * @description Override the `last_payment_amount` field. Can only be set if `type` is `credit`.
       */
      last_payment_amount: number;
      /**
       * Format: double
       * @description Override the `minimum_payment_amount` field. Can only be set if `type` is `credit` or `student`.
       */
      minimum_payment_amount: number;
      /** @description Override the `is_overdue` field */
      is_overdue: boolean;
      /**
       * Format: date
       * @description The date on which the loan was initially lent, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format. Can only be set if `type` is `student`.
       */
      origination_date: string;
      /**
       * Format: double
       * @description The original loan principal. Can only be set if `type` is `student`.
       */
      principal: number;
      /**
       * Format: double
       * @description The interest rate on the loan as a percentage. Can only be set if `type` is `student`.
       */
      nominal_apr: number;
      /** @description If set, interest capitalization begins at the given number of months after loan origination. By default interest is never capitalized. Can only be set if `type` is `student`. */
      interest_capitalization_grace_period_months: number;
      repayment_model: components["schemas"]["StudentLoanRepaymentModel"];
      /**
       * Format: date
       * @description Override the `expected_payoff_date` field. Can only be set if `type` is `student`.
       */
      expected_payoff_date: string;
      /** @description Override the `guarantor` field. Can only be set if `type` is `student`. */
      guarantor: string;
      /** @description Override the `is_federal` field. Can only be set if `type` is `student`. */
      is_federal: boolean;
      /** @description Override the `loan_name` field. Can only be set if `type` is `student`. */
      loan_name: string;
      loan_status: components["schemas"]["StudentLoanStatus"];
      /** @description Override the `payment_reference_number` field. Can only be set if `type` is `student`. */
      payment_reference_number: string;
      pslf_status: components["schemas"]["PSLFStatus"];
      /** @description Override the `repayment_plan.description` field. Can only be set if `type` is `student`. */
      repayment_plan_description: string;
      /** @description Override the `repayment_plan.type` field. Can only be set if `type` is `student`. Possible values are: `"extended graduated"`, `"extended standard"`, `"graduated"`, `"income-contingent repayment"`, `"income-based repayment"`, `"interest only"`, `"other"`, `"pay as you earn"`, `"revised pay as you earn"`, `"standard"`, or `"saving on a valuable education"`. */
      repayment_plan_type: string;
      /** @description Override the `sequence_number` field. Can only be set if `type` is `student`. */
      sequence_number: string;
      servicer_address: components["schemas"]["Address"];
      [key: string]: unknown;
    };
    /**
     * StudentLoanRepaymentModel
     * @description Student loan repayment information used to configure Sandbox test data for the Liabilities product
     */
    StudentLoanRepaymentModel: {
      /** @description The only currently supported value for this field is `standard`. */
      type: string;
      /** @description Configures the number of months before repayment starts. */
      non_repayment_months: number;
      /** @description Configures the number of months of repayments before the loan is paid off. */
      repayment_months: number;
      [key: string]: unknown;
    };
    /**
     * InflowModel
     * @description The `inflow_model` allows you to model a test account that receives regular income or make regular payments on a loan. Any transactions generated by the `inflow_model` will appear in addition to randomly generated test data or transactions specified by `override_accounts`.
     */
    InflowModel: {
      /**
       * @description Inflow model. One of the following:
       *
       * `none`: No income
       *
       * `monthly-income`: Income occurs once per month `monthly-balance-payment`: Pays off the balance on a liability account at the given statement day of month.
       *
       * `monthly-interest-only-payment`: Makes an interest-only payment on a liability account at the given statement day of month.
       *
       * Note that account types supported by Liabilities will accrue interest in the Sandbox. The types impacted are account type `credit` with subtype `credit` or `paypal`, and account type `loan` with subtype `student` or `mortgage`.
       */
      type: string;
      /**
       * Format: double
       * @description Amount of income per month. This value is required if `type` is `monthly-income`.
       */
      income_amount: number;
      /** @description Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the income transaction will appear. The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`. */
      payment_day_of_month: number;
      /** @description The name of the income transaction. This field is required if `type` is `monthly-income`, `monthly-balance-payment` or `monthly-interest-only-payment`. */
      transaction_name: string;
      /** @description Number between 1 and 28, or `last` meaning the last day of the month. The day of the month on which the balance is calculated for the next payment. The name of the income transaction. This field is required if `type` is `monthly-balance-payment` or `monthly-interest-only-payment`. */
      statement_day_of_month: string;
      [key: string]: unknown;
    };
    /**
     * IncomeOverride
     * @description Specify payroll data on the account.
     */
    IncomeOverride: {
      /** @description A list of paystubs associated with the account. */
      paystubs?: components["schemas"]["PaystubOverride"][];
    };
    /**
     * PaystubOverride
     * @description An object representing data from a paystub.
     */
    PaystubOverride: {
      employer?: components["schemas"]["PaystubOverrideEmployer"];
      employee?: components["schemas"]["PaystubOverrideEmployee"];
      income_breakdown?: components["schemas"]["IncomeBreakdown"][];
      pay_period_details?: components["schemas"]["PayPeriodDetails"];
    };
    /** @description The employer on the paystub. */
    PaystubOverrideEmployer: {
      /** @description The name of the employer. */
      name?: string;
    };
    /** @description The employee on the paystub. */
    PaystubOverrideEmployee: {
      /** @description The name of the employee. */
      name?: string;
      address?: components["schemas"]["PaystubOverrideEmployeeAddress"];
    };
    /** @description The address of the employee. */
    PaystubOverrideEmployeeAddress: {
      /** @description The full city name. */
      city?: string;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region?: string;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street?: string;
      /** @description 5 digit postal code. */
      postal_code?: string;
      /** @description The country of the address. */
      country?: string;
    };
    /**
     * ItemId
     * @description The `item_id` of the Item associated with this webhook, warning, or error
     */
    ItemId: string;
    /**
     * UserId
     * @description The Plaid `user_id` of the User associated with this webhook, warning, or error.
     */
    UserId: string;
    /**
     * AutomaticallyVerifiedWebhook
     * @description Fired when an Item is verified via automated micro-deposits. We recommend communicating to your users when this event is received to notify them that their account is verified and ready for use.
     */
    AutomaticallyVerifiedWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `AUTOMATICALLY_VERIFIED` */
      webhook_code: string;
      /** @description The `account_id` of the account associated with the webhook */
      account_id: string;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      error?: components["schemas"]["PlaidError"];
      [key: string]: unknown;
    };
    /**
     * JWTHeader
     * @description A JWT Header, used for webhook validation
     */
    JWTHeader: {
      id: string;
      [key: string]: unknown;
    };
    /**
     * VerificationExpiredWebhook
     * @description Fired when an Item was not verified via automated micro-deposits after seven days since the automated micro-deposit was made.
     */
    VerificationExpiredWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `VERIFICATION_EXPIRED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description The `account_id` of the account associated with the webhook */
      account_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      error?: components["schemas"]["PlaidError"];
      [key: string]: unknown;
    };
    /**
     * WebhookUpdateAcknowledgedWebhook
     * @description Fired when an Item's webhook is updated. This will be sent to the newly specified webhook.
     */
    WebhookUpdateAcknowledgedWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `WEBHOOK_UPDATE_ACKNOWLEDGED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /** @description The new webhook URL */
      new_webhook_url: string;
      error?: components["schemas"]["PlaidError"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * PendingExpirationWebhook
     * @description Fired when an Item’s access consent is expiring in 7 days. Some Items have explicit expiration times and we try to relay this when possible to reduce service disruption. This can be resolved by having the user go through Link’s update mode.
     */
    PendingExpirationWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `PENDING_EXPIRATION` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      /**
       * Format: date-time
       * @description The date and time at which the Item's access consent will expire, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format
       */
      consent_expiration_time: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ItemErrorWebhook
     * @description Fired when an error is encountered with an Item. The error can be resolved by having the user go through Link’s update mode.
     */
    ItemErrorWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `ERROR` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error: components["schemas"]["PlaidError"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ItemLoginRepairedWebhook
     * @description Fired when an Item has exited the `ITEM_LOGIN_REQUIRED` state without the user having gone through the update mode flow in your app (this can happen if the user completed the update mode in a different app). If you have messaging that tells the user to complete the update mode flow, you should silence this messaging upon receiving the `LOGIN_REPAIRED` webhook.
     */
    ItemLoginRepairedWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `LOGIN_REPAIRED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ItemProductReadyWebhook
     * @description Fired once Plaid calculates income from an Item.
     */
    ItemProductReadyWebhook: {
      /** @description `INCOME` */
      webhook_type: string;
      /** @description `PRODUCT_READY` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProductPermissionsRequiredAuthWebhook
     * @description Fired when an `ACCESS_NOT_GRANTED` error is hit for Auth. The error can be resolved by putting the user through update mode with `auth` in the `products` array, as well as through the limited beta for update mode Authentication product validations.
     */
    ProductPermissionsRequiredAuthWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `PRODUCT_PERMISSIONS_REQUIRED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * ProductPermissionsRequiredIdentityWebhook
     * @description Fired when an `ACCESS_NOT_GRANTED` error is hit for Identity. The error can be resolved by putting the user through update mode with `identity` in the `products` array, as well as through the limited beta for update mode Identity product validations.
     */
    ProductPermissionsRequiredIdentityWebhook: {
      /** @description `IDENTITY` */
      webhook_type: string;
      /** @description `PRODUCT_PERMISSIONS_REQUIRED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * Recaptcha_RequiredError
     * @description The request was flagged by Plaid's fraud system, and requires additional verification to ensure they are not a bot.
     */
    Recaptcha_RequiredError: {
      /** @description RECAPTCHA_ERROR */
      error_type: string;
      /** @description RECAPTCHA_REQUIRED */
      error_code: string;
      display_message: string;
      /** @description 400 */
      http_code: string;
      /** @description Your user will be prompted to solve a Google reCAPTCHA challenge in the Link Recaptcha pane. If they solve the challenge successfully, the user's request is resubmitted and they are directed to the next Item creation step. */
      link_user_experience: string;
      /** @description Plaid's fraud system detects abusive traffic and considers a variety of parameters throughout Item creation requests. When a request is considered risky or possibly fraudulent, Link presents a reCAPTCHA for the user to solve. */
      common_causes: string;
      /**
       * @description Link will automatically guide your user through reCAPTCHA verification. As a general rule, we recommend instrumenting basic fraud monitoring to detect and protect your website from spam and abuse.
       *
       * If your user cannot verify their session, please submit a Support ticket with the following identifiers: `link_session_id` or `request_id`
       */
      troubleshooting_steps: string;
      [key: string]: unknown;
    };
    /**
     * BankTransfersEventsUpdateWebhook
     * @description Fired when new bank transfer events are available. Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`.
     */
    BankTransfersEventsUpdateWebhook: {
      /** @description `BANK_TRANSFERS` */
      webhook_type: string;
      /** @description `BANK_TRANSFERS_EVENTS_UPDATE` */
      webhook_code: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BankTransfersEventsUpdateWebhookForAuth
     * @description Fired when new ACH events are available. To begin receiving this webhook, you must first register your webhook listener endpoint via the [webhooks page in the Dashboard](https://dashboard.plaid.com/team/webhooks). The `BANK_TRANSFERS_EVENTS_UPDATE` webhook can be used to track the progress of ACH transfers used in [micro-deposit verification](/docs/auth/coverage/microdeposit-events/). Receiving this webhook indicates you should fetch the new events from `/bank_transfer/event/sync`. Note that [Transfer](https://plaid.com/docs/transfer) customers should use Transfer webhooks instead of using `BANK_TRANSFERS_EVENTS_UPDATE`; see [micro-deposit events documentation](https://plaid.com/docs/auth/coverage/microdeposit-events/) for more details.
     */
    BankTransfersEventsUpdateWebhookForAuth: {
      /** @description `BANK_TRANSFERS` */
      webhook_type: string;
      /** @description `BANK_TRANSFERS_EVENTS_UPDATE` */
      webhook_code: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * TransferEventsUpdateWebhook
     * @description Fired when new transfer events are available. Receiving this webhook indicates you should fetch the new events from `/transfer/event/sync`.
     */
    TransferEventsUpdateWebhook: {
      /** @description `TRANSFER` */
      webhook_type: string;
      /** @description `TRANSFER_EVENTS_UPDATE` */
      webhook_code: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * RecurringNewTransferWebhook
     * @description Fired when a new transfer of a recurring transfer is originated.
     */
    RecurringNewTransferWebhook: {
      /** @description `TRANSFER` */
      webhook_type: string;
      /** @description `RECURRING_NEW_TRANSFER` */
      webhook_code: string;
      recurring_transfer_id: components["schemas"]["RecurringTransferID"];
      transfer_id: components["schemas"]["TransferID"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * RecurringTransferSkippedWebhook
     * @description Fired when Plaid is unable to originate a new ACH transaction of the recurring transfer on the planned date.
     */
    RecurringTransferSkippedWebhook: {
      /** @description `TRANSFER` */
      webhook_type: string;
      /** @description `RECURRING_TRANSFER_SKIPPED` */
      webhook_code: string;
      recurring_transfer_id: components["schemas"]["RecurringTransferID"];
      authorization_decision: components["schemas"]["TransferAuthorizationDecision"];
      authorization_decision_rationale_code?: components["schemas"]["TransferAuthorizationDecisionRationaleCode"];
      /**
       * Format: date
       * @description The planned date on which Plaid is unable to originate a new ACH transaction of the recurring transfer. This will be of the form YYYY-MM-DD.
       */
      skipped_origination_date: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * RecurringCancelledWebhook
     * @description Fired when a recurring transfer is cancelled by Plaid.
     */
    RecurringCancelledWebhook: {
      /** @description `TRANSFER` */
      webhook_type: string;
      /** @description `RECURRING_CANCELLED` */
      webhook_code: string;
      recurring_transfer_id: components["schemas"]["RecurringTransferID"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * InvestmentsDefaultUpdateWebhook
     * @description Fired when new transactions have been detected on an investment account.
     */
    InvestmentsDefaultUpdateWebhook: {
      /** @description `INVESTMENTS_TRANSACTIONS` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new transactions reported since the last time this webhook was fired. */
      new_investments_transactions: number;
      /** @description The number of canceled transactions reported since the last time this webhook was fired. */
      canceled_investments_transactions: number;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * InvestmentsHistoricalUpdateWebhook
     * @description Fired after an asynchronous extraction on an investments account.
     */
    InvestmentsHistoricalUpdateWebhook: {
      /** @description `INVESTMENTS_TRANSACTIONS` */
      webhook_type: string;
      /** @description `HISTORICAL_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new transactions reported since the last time this webhook was fired. */
      new_investments_transactions: number;
      /** @description The number of canceled transactions reported since the last time this webhook was fired. */
      canceled_investments_transactions: number;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * HoldingsDefaultUpdateWebhook
     * @description Fired when new or updated holdings have been detected on an investment account. The webhook typically fires in response to any newly added holdings or price changes to existing holdings, most commonly after market close.
     */
    HoldingsDefaultUpdateWebhook: {
      /** @description `HOLDINGS` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      /** @description The number of new holdings reported since the last time this webhook was fired. */
      new_holdings: number;
      /** @description The number of updated holdings reported since the last time this webhook was fired. */
      updated_holdings: number;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * PartnerEndCustomerOAuthStatusUpdatedWebhook
     * @description The webhook of type `PARTNER` and code `END_CUSTOMER_OAUTH_STATUS_UPDATED` will be fired when a partner's end customer has an update on their OAuth registration status with an institution.
     */
    PartnerEndCustomerOAuthStatusUpdatedWebhook: {
      /** @description `PARTNER` */
      webhook_type: string;
      /** @description `END_CUSTOMER_OAUTH_STATUS_UPDATED` */
      webhook_code: string;
      /** @description The client ID of the end customer */
      end_customer_client_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      /** @description The institution ID */
      institution_id: string;
      /** @description The institution name */
      institution_name: string;
      status: components["schemas"]["PartnerEndCustomerOAuthStatusUpdatedValues"];
    };
    /**
     * LiabilitiesDefaultUpdateWebhook
     * @description The webhook of type `LIABILITIES` and code `DEFAULT_UPDATE` will be fired when new or updated liabilities have been detected on a liabilities item.
     */
    LiabilitiesDefaultUpdateWebhook: {
      /** @description `LIABILITIES` */
      webhook_type: string;
      /** @description `DEFAULT_UPDATE` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error: components["schemas"]["PlaidError"];
      /** @description An array of `account_id`'s for accounts that contain new liabilities.' */
      account_ids_with_new_liabilities: string[];
      account_ids_with_updated_liabilities: components["schemas"]["LiabilitiesAccountIdsWithUpdatedLiabilities"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
    };
    /**
     * @description An object with keys of `account_id`'s that are mapped to their respective liabilities fields that changed.
     *
     * Example: `{ "XMBvvyMGQ1UoLbKByoMqH3nXMj84ALSdE5B58": ["past_amount_due"] }`
     */
    LiabilitiesAccountIdsWithUpdatedLiabilities: {
      [key: string]: string[];
    };
    /**
     * Cause
     * @description An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items.
     */
    Cause: WithRequired<{
      [key: string]: unknown;
    } & components["schemas"]["PlaidError"] & {
      item_id?: components["schemas"]["ItemId"];
    }, "item_id" | "error_type" | "error_code" | "error_message" | "display_message">;
    /**
     * @description The ISO-4217 currency code of the payment. For standing orders and payment consents, `"GBP"` must be used. For Poland, Denmark, Sweden and Norway, only the local currency is currently supported.
     * @enum {string}
     */
    PaymentAmountCurrency: "GBP" | "EUR" | "PLN" | "SEK" | "DKK" | "NOK";
    /**
     * PaymentAmount
     * @description The amount and currency of a payment
     */
    PaymentAmount: {
      currency: components["schemas"]["PaymentAmountCurrency"];
      /**
       * Format: double
       * @description The amount of the payment. Must contain at most two digits of precision e.g. `1.23`. Minimum accepted value is `1`.
       */
      value: number;
    };
    /**
     * PaymentAmount
     * @description The amount and currency of a payment
     */
    PaymentAmountNullable: {
      currency: components["schemas"]["PaymentAmountCurrency"];
      /**
       * Format: double
       * @description The amount of the payment. Must contain at most two digits of precision e.g. `1.23`.
       */
      value: number;
      [key: string]: unknown;
    } | null;
    /** @description The amount and currency of a payment */
    PaymentAmountToRefund: components["schemas"]["PaymentAmountNullable"] & Record<string, never>;
    /** @description The amount and currency of a payment */
    PaymentAmountRefunded: components["schemas"]["PaymentAmountNullable"] & {
      [key: string]: unknown;
    };
    /**
     * PaymentConsentValidDateTime
     * @description Life span for the payment consent. After the `to` date the payment consent expires and can no longer be used for payment initiation.
     */
    PaymentConsentValidDateTime: ({
      /**
       * Format: date-time
       * @description The date and time from which the consent should be active, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      from?: string | null;
      /**
       * Format: date-time
       * @description The date and time at which the consent expires, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      to?: string | null;
    }) | null;
    /**
     * PaymentConsentPeriodicAmount
     * @description Defines consent payments limitations per period.
     */
    PaymentConsentPeriodicAmount: {
      amount: components["schemas"]["PaymentConsentPeriodicAmountAmount"];
      interval: components["schemas"]["PaymentConsentPeriodicInterval"];
      alignment: components["schemas"]["PaymentConsentPeriodicAlignment"];
    };
    /** @description Maximum cumulative amount for all payments in the specified interval. */
    PaymentConsentPeriodicAmountAmount: components["schemas"]["PaymentAmount"];
    /**
     * @description Payment consent periodic interval.
     * @enum {string}
     */
    PaymentConsentPeriodicInterval: "DAY" | "WEEK" | "MONTH" | "YEAR";
    /**
     * @description Where the payment consent period should start.
     *
     * `CALENDAR`: line up with a calendar.
     *
     * `CONSENT`: on the date of consent creation.
     * @enum {string}
     */
    PaymentConsentPeriodicAlignment: "CALENDAR" | "CONSENT";
    /**
     * StandaloneCurrencyCodeList
     * @description The following currency codes are supported by Plaid.
     */
    StandaloneCurrencyCodeList: {
      /** @description Plaid supports all ISO 4217 currency codes. */
      iso_currency_code: string;
      unofficial_currency_code: components["schemas"]["UnofficialCurrencyCodeList"];
      [key: string]: unknown;
    };
    /**
     * UnofficialCurrencyCodeList
     * @description List of unofficial currency codes
     */
    UnofficialCurrencyCodeList: string;
    /**
     * StandaloneAccountType
     * @description The schema below describes the various `types` and corresponding `subtypes` that Plaid recognizes and reports for financial institution accounts.
     */
    StandaloneAccountType: {
      depository: components["schemas"]["DepositoryAccount"];
      credit: components["schemas"]["CreditAccount"];
      loan: components["schemas"]["LoanAccount"];
      investment: components["schemas"]["InvestmentAccountSubtypeStandalone"];
      /** @description Other or unknown account type. Supported products for `other` accounts are: Balance, Transactions, Identity, and Assets. */
      other: string;
      [key: string]: unknown;
    };
    /**
     * DepositoryAccount
     * @description An account type holding cash, in which funds are deposited. Supported products for `depository` accounts are: Auth (`checking` and `savings` types only), Balance, Transactions, Identity, Payment Initiation, Assets, and Investments (`cash management` type only).
     */
    DepositoryAccount: string;
    /**
     * CreditAccount
     * @description A credit card type account. Supported products for `credit` accounts are: Balance, Transactions, Identity, and Liabilities.
     */
    CreditAccount: string;
    /**
     * LoanAccount
     * @description A loan type account. Supported products for `loan` accounts are: Balance, Liabilities, and Transactions.
     */
    LoanAccount: string;
    /**
     * InvestmentAccountSubtype
     * @description An investment account. Supported products for `investment` accounts are: Balance and Investments. In API versions 2018-05-22 and earlier, this type is called `brokerage`.
     */
    InvestmentAccountSubtypeStandalone: string;
    /**
     * PaymentStatusUpdateWebhook
     * @description Fired when the status of a payment has changed.
     */
    PaymentStatusUpdateWebhook: {
      /** @description `PAYMENT_INITIATION` */
      webhook_type: string;
      /** @description `PAYMENT_STATUS_UPDATE` */
      webhook_code: string;
      /** @description The `payment_id` for the payment being updated */
      payment_id: string;
      /** @description The transaction ID that this payment is associated with, if any. This is present only when a payment was initiated using virtual accounts. */
      transaction_id?: string | null;
      new_payment_status: components["schemas"]["PaymentInitiationPaymentStatus"];
      old_payment_status: components["schemas"]["PaymentInitiationPaymentStatus"];
      /** @description The original value of the reference when creating the payment. */
      original_reference: string | null;
      /** @description The value of the reference sent to the bank after adjustment to pass bank validation rules. */
      adjusted_reference?: string | null;
      /**
       * Format: date
       * @description The original value of the `start_date` provided during the creation of a standing order. If the payment is not a standing order, this field will be `null`.
       */
      original_start_date: string | null;
      /**
       * Format: date
       * @description The start date sent to the bank after adjusting for holidays or weekends.  Will be provided in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). If the start date did not require adjustment, or if the payment is not a standing order, this field will be `null`.
       */
      adjusted_start_date: string | null;
      /**
       * Format: date-time
       * @description The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
       */
      timestamp: string;
      error?: components["schemas"]["PlaidError"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * WalletTransactionStatusUpdateWebhook
     * @description Fired when the status of a wallet transaction has changed.
     */
    WalletTransactionStatusUpdateWebhook: {
      /** @description `WALLET` */
      webhook_type: string;
      /** @description `WALLET_TRANSACTION_STATUS_UPDATE` */
      webhook_code: string;
      /** @description The `transaction_id` for the wallet transaction being updated */
      transaction_id: string;
      /** @description The `payment_id` associated with the transaction. This will be present in case of `REFUND` and `PIS_PAY_IN`. */
      payment_id?: string | null;
      /** @description The EMI (E-Money Institution) wallet that this payment is associated with. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
      wallet_id?: string;
      new_status: components["schemas"]["WalletTransactionStatus"];
      old_status: components["schemas"]["WalletTransactionStatus"];
      /**
       * Format: date-time
       * @description The timestamp of the update, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2017-09-14T14:42:19.350Z"`
       */
      timestamp: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * Holding
     * @description A securities holding at an institution.
     */
    Holding: {
      /** @description The Plaid `account_id` associated with the holding. */
      account_id: string;
      /** @description The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change. */
      security_id: string;
      /**
       * Format: double
       * @description The last price given by the institution for this security.
       */
      institution_price: number;
      /**
       * Format: date
       * @description The date at which `institution_price` was current.
       */
      institution_price_as_of?: string | null;
      /**
       * Format: date-time
       * @description Date and time at which `institution_price` was current, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ).
       *
       * This field is returned for select financial institutions and comes as provided by the institution. It may contain default time values (such as 00:00:00).
       */
      institution_price_datetime?: string | null;
      /**
       * Format: double
       * @description The value of the holding, as reported by the institution.
       */
      institution_value: number;
      /**
       * Format: double
       * @description The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
       */
      cost_basis: number | null;
      /**
       * Format: double
       * @description The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
       */
      quantity: number;
      /** @description The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * Security
     * @description Contains details about a security
     */
    Security: {
      /** @description A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change. */
      security_id: string;
      /** @description 12-character ISIN, a globally unique securities identifier. A verified CUSIP Global Services license is required to receive this data. This field will be null by default for new customers, and null for existing customers starting March 12, 2024. If you would like access to this field, please start the verification process [here](https://docs.google.com/forms/d/e/1FAIpQLSd9asHEYEfmf8fxJTHZTAfAzW4dugsnSu-HS2J51f1mxwd6Sw/viewform). */
      isin: string | null;
      /** @description 9-character CUSIP, an identifier assigned to North American securities. A verified CUSIP Global Services license is required to receive this data. This field will be null by default for new customers, and null for existing customers starting March 12, 2024. If you would like access to this field, please start the verification process [here](https://docs.google.com/forms/d/e/1FAIpQLSd9asHEYEfmf8fxJTHZTAfAzW4dugsnSu-HS2J51f1mxwd6Sw/viewform). */
      cusip: string | null;
      /** @description 7-character SEDOL, an identifier assigned to securities in the UK. */
      sedol: string | null;
      /** @description An identifier given to the security by the institution */
      institution_security_id: string | null;
      /** @description If `institution_security_id` is present, this field indicates the Plaid `institution_id` of the institution to whom the identifier belongs. */
      institution_id: string | null;
      /** @description In certain cases, Plaid will provide the ID of another security whose performance resembles this security, typically when the original security has low volume, or when a private security can be modeled with a publicly traded security. */
      proxy_security_id: string | null;
      /** @description A descriptive name for the security, suitable for display. */
      name: string | null;
      /** @description The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
      ticker_symbol: string | null;
      /** @description Indicates that a security is a highly liquid asset and can be treated like cash. */
      is_cash_equivalent: boolean | null;
      /**
       * @description The security type of the holding. Valid security types are:
       *
       * `cash`: Cash, currency, and money market funds
       *
       * `cryptocurrency`: Digital or virtual currencies
       *
       * `derivative`: Options, warrants, and other derivative instruments
       *
       * `equity`: Domestic and foreign equities
       *
       * `etf`: Multi-asset exchange-traded investment funds
       *
       * `fixed income`: Bonds and certificates of deposit (CDs)
       *
       * `loan`: Loans and loan receivables
       *
       * `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors
       *
       * `other`: Unknown or other investment types
       */
      type: string | null;
      /**
       * Format: double
       * @description Price of the security at the close of the previous trading session. Null for non-public securities.
       *
       * If the security is a foreign currency this field will be updated daily and will be priced in USD.
       *
       * If the security is a cryptocurrency, this field will be updated multiple times a day. As crypto prices can fluctuate quickly and data may become stale sooner than other asset classes, refer to `update_datetime` with the time when the price was last updated.
       */
      close_price: number | null;
      /**
       * Format: date
       * @description Date for which `close_price` is accurate. Always `null` if `close_price` is `null`.
       */
      close_price_as_of: string | null;
      /**
       * Format: date-time
       * @description Date and time at which `close_price` is accurate, in ISO 8601 format (YYYY-MM-DDTHH:mm:ssZ). Always `null` if `close_price` is `null`.
       */
      update_datetime?: string | null;
      /** @description The ISO-4217 currency code of the price given. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * @description Value is one of the following:
     * `buy`: Buying an investment
     * `sell`: Selling an investment
     * `cancel`: A cancellation of a pending transaction
     * `cash`: Activity that modifies a cash position
     * `fee`: A fee on the account
     * `transfer`: Activity which modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     *
     * For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
     * @enum {string}
     */
    InvestmentTransactionType: "buy" | "sell" | "cancel" | "cash" | "fee" | "transfer";
    /**
     * @description For descriptions of possible transaction types and subtypes, see the [Investment transaction types schema](https://plaid.com/docs/api/accounts/#investment-transaction-types-schema).
     * @enum {string}
     */
    InvestmentTransactionSubtype: "account fee" | "adjustment" | "assignment" | "buy" | "buy to cover" | "contribution" | "deposit" | "distribution" | "dividend" | "dividend reinvestment" | "exercise" | "expire" | "fund fee" | "interest" | "interest receivable" | "interest reinvestment" | "legal fee" | "loan payment" | "long-term capital gain" | "long-term capital gain reinvestment" | "management fee" | "margin expense" | "merger" | "miscellaneous fee" | "non-qualified dividend" | "non-resident tax" | "pending credit" | "pending debit" | "qualified dividend" | "rebalance" | "return of principal" | "request" | "sell" | "sell short" | "send" | "short-term capital gain" | "short-term capital gain reinvestment" | "spin off" | "split" | "stock distribution" | "tax" | "tax withheld" | "trade" | "transfer" | "transfer fee" | "trust fee" | "unqualified gain" | "withdrawal";
    /**
     * InvestmentTransaction
     * @description A transaction within an investment account.
     */
    InvestmentTransaction: {
      /** @description The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive. */
      investment_transaction_id: string;
      /**
       * @deprecated
       * @description A legacy field formerly used internally by Plaid to identify certain canceled transactions.
       */
      cancel_transaction_id?: string | null;
      /** @description The `account_id` of the account against which this transaction posted. */
      account_id: string;
      /** @description The `security_id` to which this transaction is related. */
      security_id: string | null;
      /**
       * Format: date
       * @description The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
       */
      date: string;
      /** @description The institution’s description of the transaction. */
      name: string;
      /**
       * Format: double
       * @description The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
       */
      quantity: number;
      /**
       * Format: double
       * @description The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
       */
      amount: number;
      /**
       * Format: double
       * @description The price of the security at which this transaction occurred.
       */
      price: number;
      /**
       * Format: double
       * @description The combined value of all fees applied to this transaction
       */
      fees: number | null;
      type: components["schemas"]["InvestmentTransactionType"];
      subtype: components["schemas"]["InvestmentTransactionSubtype"];
      /** @description The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * StandaloneInvestmentTransactionType
     * @description Valid values for investment transaction types and subtypes. Note that transactions representing inflow of cash will appear as negative amounts, outflow of cash will appear as positive amounts.
     */
    StandaloneInvestmentTransactionType: {
      buy: components["schemas"]["StandaloneInvestmentTransactionBuyType"];
      sell: components["schemas"]["StandaloneInvestmentTransactionSellType"];
      /** @description A cancellation of a pending transaction */
      cancel: string;
      cash: components["schemas"]["StandaloneInvestmentTransactionCashType"];
      fee: components["schemas"]["StandaloneInvestmentTransactionFeeType"];
      transfer: components["schemas"]["StandaloneInvestmentTransactionTransferType"];
      [key: string]: unknown;
    };
    /**
     * BuyType
     * @description Buying an investment
     */
    StandaloneInvestmentTransactionBuyType: string;
    /**
     * CashType
     * @description Activity that modifies a cash position
     */
    StandaloneInvestmentTransactionCashType: string;
    /**
     * FeeType
     * @description Fees on the account, e.g. commission, bookkeeping, options-related.
     */
    StandaloneInvestmentTransactionFeeType: string;
    /**
     * SellType
     * @description Selling an investment
     */
    StandaloneInvestmentTransactionSellType: string;
    /**
     * TransferType
     * @description Activity that modifies a position, but not through buy/sell activity e.g. options exercise, portfolio transfer
     */
    StandaloneInvestmentTransactionTransferType: string;
    /**
     * AccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    AccountSubtypes: components["schemas"]["AccountSubtype"][];
    /**
     * UserPermissionRevokedWebhook
     * @description The `USER_PERMISSION_REVOKED` webhook may be fired when an end user has used either the [my.plaid.com portal](https://my.plaid.com) or the financial institution’s OAuth consent portal to revoke the permission that they previously granted to access an Item. This webhook is not guaranteed to always be fired upon consent revocation, since some institutions’ consent portals do not trigger this webhook. Once access to an Item has been revoked, it cannot be restored. If the user subsequently returns to your application, a new Item must be created for the user.
     */
    UserPermissionRevokedWebhook: {
      /** @description `ITEM` */
      webhook_type: string;
      /** @description `USER_PERMISSION_REVOKED` */
      webhook_code: string;
      item_id: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * DepositSwitchGetRequest
     * @description DepositSwitchGetRequest defines the request schema for `/deposit_switch/get`
     */
    DepositSwitchGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the deposit switch */
      deposit_switch_id: string;
    };
    /**
     * DepositSwitchGetResponse
     * @description DepositSwitchGetResponse defines the response schema for `/deposit_switch/get`
     */
    DepositSwitchGetResponse: {
      /** @description The ID of the deposit switch. */
      deposit_switch_id: string;
      /** @description The ID of the bank account the direct deposit was switched to. */
      target_account_id: string | null;
      /** @description The ID of the Item the direct deposit was switched to. */
      target_item_id: string | null;
      /**
       * @description
       * The state, or status, of the deposit switch.
       *
       * - `initialized` – The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
       *
       * - `processing` – The deposit switch request has been submitted and is being processed.
       *
       * - `completed` – The user's employer has fulfilled the deposit switch request.
       *
       * - `error` – There was an error processing the deposit switch request.
       * @enum {string}
       */
      state: "initialized" | "processing" | "completed" | "error";
      /**
       * @description The method used to make the deposit switch.
       *
       * - `instant` – User instantly switched their direct deposit to a new or existing bank account by connecting their payroll or employer account.
       *
       * - `mail` – User requested that Plaid contact their employer by mail to make the direct deposit switch.
       *
       * - `pdf` – User generated a PDF or email to be sent to their employer with the information necessary to make the deposit switch.'
       * @enum {string|null}
       */
      switch_method?: "instant" | "mail" | "pdf" | null;
      /** @description When `true`, user’s direct deposit goes to multiple banks. When false, user’s direct deposit only goes to the target account. Always `null` if the deposit switch has not been completed. */
      account_has_multiple_allocations: boolean | null;
      /** @description When `true`, the target account is allocated the remainder of direct deposit after all other allocations have been deducted. When `false`, user’s direct deposit is allocated as a percent or amount. Always `null` if the deposit switch has not been completed. */
      is_allocated_remainder: boolean | null;
      /**
       * Format: double
       * @description The percentage of direct deposit allocated to the target account. Always `null` if the target account is not allocated a percentage or if the deposit switch has not been completed or if `is_allocated_remainder` is true.
       */
      percent_allocated: number | null;
      /**
       * Format: double
       * @description The dollar amount of direct deposit allocated to the target account. Always `null` if the target account is not allocated an amount or if the deposit switch has not been completed.
       */
      amount_allocated: number | null;
      /** @description The name of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
      employer_name?: string | null;
      /** @description The ID of the employer selected by the user. If the user did not select an employer, the value returned is `null`. */
      employer_id?: string | null;
      /** @description The name of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
      institution_name?: string | null;
      /** @description The ID of the institution selected by the user. If the user did not select an institution, the value returned is `null`. */
      institution_id?: string | null;
      /**
       * Format: date
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was created.
       */
      date_created: string;
      /**
       * Format: date
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) date the deposit switch was completed. Always `null` if the deposit switch has not been completed.
       */
      date_completed: string | null;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * DepositSwitchStateUpdateWebhook
     * @description Fired when the status of a deposit switch request has changed.
     */
    DepositSwitchStateUpdateWebhook: {
      /** @description `"DEPOSIT_SWITCH"` */
      webhook_type?: string;
      /** @description `"SWITCH_STATE_UPDATE"` */
      webhook_code?: string;
      /**
       * @description
       * The state, or status, of the deposit switch.
       *
       * `initialized`: The deposit switch has been initialized with the user entering the information required to submit the deposit switch request.
       *
       * `processing`: The deposit switch request has been submitted and is being processed.
       *
       * `completed`: The user's employer has fulfilled and completed the deposit switch request.
       *
       * `error`: There was an error processing the deposit switch request.
       *
       * For more information, see the [Deposit Switch API reference](/docs/deposit-switch/reference#deposit_switchget).
       */
      state?: string;
      /** @description The ID of the deposit switch. */
      deposit_switch_id?: string;
      environment?: components["schemas"]["WebhookEnvironmentValues"];
    };
    /**
     * FallbackAuthMicrodepositAutoVerifiedWebhook
     * @description Fires when an account is automatically verified using micro-deposits
     */
    FallbackAuthMicrodepositAutoVerifiedWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `AUTOMATICALLY_VERIFIED` */
      webhook_code: string;
      /** @description The error code associated with the webhook. */
      error?: string | null;
      /** @description The external account ID associated with the micro-deposit */
      account_id: string;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * FallbackAuthMicrodepositVerificationExpiredWebhook
     * @description Fires when an account has an expired verification when using micro-deposits
     */
    FallbackAuthMicrodepositVerificationExpiredWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `VERIFICATION_EXPIRED` */
      webhook_code: string;
      /** @description The error code associated with the webhook. */
      error?: string | null;
      /** @description The external account ID associated with the micro-deposit */
      account_id: string;
      item_id: components["schemas"]["ItemId"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * TransferGetRequest
     * @description Defines the request schema for `/transfer/get`
     */
    TransferGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      transfer_id: components["schemas"]["TransferID"];
      /**
       * @deprecated
       * @description The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS).
       */
      originator_client_id?: string | null;
    };
    /**
     * TransferRecurringGetRequest
     * @description Defines the request schema for `/transfer/recurring/get`
     */
    TransferRecurringGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      recurring_transfer_id: components["schemas"]["RecurringTransferID"];
    };
    /**
     * BankTransferGetRequest
     * @description Defines the request schema for `/bank_transfer/get`
     */
    BankTransferGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      bank_transfer_id: components["schemas"]["BankTransferID"];
    };
    /**
     * TransferGetResponse
     * @description Defines the response schema for `/transfer/get`
     */
    TransferGetResponse: {
      transfer: components["schemas"]["Transfer"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRecurringGetResponse
     * @description Defines the response schema for `/transfer/recurring/get`
     */
    TransferRecurringGetResponse: {
      recurring_transfer: components["schemas"]["RecurringTransfer"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferGetResponse
     * @description Defines the response schema for `/bank_transfer/get`
     */
    BankTransferGetResponse: {
      bank_transfer: components["schemas"]["BankTransfer"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferID
     * @description Plaid’s unique identifier for a transfer.
     */
    TransferID: string;
    /**
     * RecurringTransferID
     * @description Plaid’s unique identifier for a recurring transfer.
     */
    RecurringTransferID: string;
    /**
     * TransferTestClockID
     * @description Plaid’s unique identifier for a test clock.
     */
    TransferTestClockID: string;
    /**
     * TransferSweepID
     * @description Plaid’s unique identifier for a sweep.
     */
    TransferSweepID: string;
    /**
     * TransferSweepID
     * @description Plaid’s unique identifier for a sweep.
     */
    TransferSweepIDNullable: string | null;
    /**
     * TransferRefundID
     * @description Plaid’s unique identifier for a refund.
     */
    TransferRefundID: string;
    /**
     * TransferID
     * @description The ID of the transfer to refund.
     */
    TransferIDForRefund: string;
    /**
     * TransferAuthorizationID
     * @description Plaid’s unique identifier for a transfer authorization.
     */
    TransferAuthorizationID: string;
    /**
     * BankTransferID
     * @description Plaid’s unique identifier for a bank transfer.
     */
    BankTransferID: string;
    /**
     * TransferExpectedSweepSettlementScheduleItem
     * @description Defines an expected sweep date and amount.
     */
    TransferExpectedSweepSettlementScheduleItem: {
      /**
       * Format: date
       * @description The settlement date of a sweep for this transfer.
       */
      sweep_settlement_date: string;
      /** @description The accumulated amount that has been swept by `sweep_settlement_date`. */
      swept_settled_amount: string;
      [key: string]: unknown;
    };
    /**
     * Transfer
     * @description Represents a transfer within the Transfers API.
     */
    Transfer: {
      id: components["schemas"]["TransferID"];
      authorization_id: components["schemas"]["TransferAuthorizationID"];
      ach_class?: components["schemas"]["ACHClass"];
      /** @description The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
      account_id?: string;
      funding_account_id: components["schemas"]["TransferFundingAccountIDResponseNullable"];
      type: components["schemas"]["TransferType"];
      user: components["schemas"]["TransferUserInResponse"];
      amount: components["schemas"]["TransferAmount"];
      /** @description The description of the transfer. */
      description: string;
      /**
       * Format: date-time
       * @description The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
       */
      created: string;
      status: components["schemas"]["TransferStatus"];
      sweep_status?: components["schemas"]["TransferSweepStatus"];
      network: components["schemas"]["TransferNetwork"];
      /** @description When `true`, you can still cancel this transfer. */
      cancellable: boolean;
      failure_reason: components["schemas"]["TransferFailure"];
      metadata: components["schemas"]["TransferMetadata"];
      /**
       * @deprecated
       * @description Plaid’s unique identifier for the origination account that was used for this transfer.
       */
      origination_account_id: string;
      guarantee_decision: components["schemas"]["TransferAuthorizationGuaranteeDecision"];
      guarantee_decision_rationale: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationale"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /**
       * Format: date
       * @description The date 3 business days from settlement date indicating the following ACH returns can no longer happen: R01, R02, R03, R29. This will be of the form YYYY-MM-DD.
       */
      standard_return_window: string | null;
      /**
       * Format: date
       * @description The date 61 business days from settlement date indicating the following ACH returns can no longer happen: R05, R07, R10, R11, R51, R33, R37, R38, R51, R52, R53. This will be of the form YYYY-MM-DD.
       */
      unauthorized_return_window: string | null;
      /**
       * Format: date
       * @description The expected date when the full amount of the transfer settles at the consumers’ account, if the transfer is credit; or at the customer's business checking account, if the transfer is debit. Only set for ACH transfers and is null for non-ACH transfers. Only set for ACH transfers. This will be of the form YYYY-MM-DD.
       */
      expected_settlement_date: string | null;
      /** @description The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms). */
      originator_client_id: string | null;
      /** @description A list of refunds associated with this transfer. */
      refunds: components["schemas"]["TransferRefund"][];
      /** @description The id of the recurring transfer if this transfer belongs to a recurring transfer. */
      recurring_transfer_id: string | null;
      /** @description The expected sweep settlement schedule of this transfer, assuming this transfer is not `returned`. Only applies to ACH debit transfers. */
      expected_sweep_settlement_schedule?: components["schemas"]["TransferExpectedSweepSettlementScheduleItem"][];
      /** @deprecated */
      credit_funds_source: components["schemas"]["TransferCreditFundsSource"];
      facilitator_fee?: components["schemas"]["TransferFacilitatorFee"];
      network_trace_id?: components["schemas"]["TransferNetworkTraceID"];
      [key: string]: unknown;
    };
    /**
     * RecurringTransfer
     * @description Represents a recurring transfer within the Transfers API.
     */
    RecurringTransfer: {
      recurring_transfer_id: components["schemas"]["RecurringTransferID"];
      /**
       * Format: date-time
       * @description The datetime when this transfer was created. This will be of the form `2006-01-02T15:04:05Z`
       */
      created: string;
      /**
       * Format: date
       * @description A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD).
       *
       * The next transfer origination date after bank holiday adjustment.
       */
      next_origination_date: string | null;
      /** @description Plaid’s unique identifier for a test clock. */
      test_clock_id?: string | null;
      type: components["schemas"]["TransferType"];
      amount: components["schemas"]["TransferAmount"];
      status: components["schemas"]["TransferRecurringStatus"];
      ach_class?: components["schemas"]["ACHClass"];
      network: components["schemas"]["TransferNetwork"];
      /**
       * @deprecated
       * @description Plaid’s unique identifier for the origination account that was used for this transfer.
       */
      origination_account_id: string;
      /** @description The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
      account_id: string;
      funding_account_id: components["schemas"]["TransferFundingAccountIDResponse"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /** @description The description of the recurring transfer. */
      description: string;
      transfer_ids: components["schemas"]["TransferID"][];
      user: components["schemas"]["TransferUserInResponse"];
      schedule: components["schemas"]["TransferRecurringSchedule"];
      [key: string]: unknown;
    };
    /**
     * RecurringTransferNullable
     * @description Represents a recurring transfer within the Transfers API.
     */
    RecurringTransferNullable: {
      [key: string]: unknown;
    } & components["schemas"]["RecurringTransfer"];
    /**
     * TransferTestClock
     * @description Defines the test clock for a transfer.
     */
    TransferTestClock: {
      test_clock_id: components["schemas"]["TransferTestClockID"];
      virtual_time: components["schemas"]["VirtualTime"];
      [key: string]: unknown;
    };
    /**
     * VirtualTime
     * Format: date-time
     * @description The virtual timestamp on the test clock. This will be of the form `2006-01-02T15:04:05Z`.
     */
    VirtualTime: string;
    /**
     * BankTransfer
     * @description Represents a bank transfer within the Bank Transfers API.
     */
    BankTransfer: {
      id: components["schemas"]["BankTransferID"];
      ach_class: components["schemas"]["ACHClass"];
      /** @description The account ID that should be credited/debited for this bank transfer. */
      account_id: string;
      type: components["schemas"]["BankTransferType"];
      user: components["schemas"]["BankTransferUser"];
      amount: components["schemas"]["BankTransferAmount"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /** @description The description of the transfer. */
      description: string;
      /**
       * Format: date-time
       * @description The datetime when this bank transfer was created. This will be of the form `2006-01-02T15:04:05Z`
       */
      created: string;
      status: components["schemas"]["BankTransferStatus"];
      network: components["schemas"]["BankTransferNetwork"];
      /** @description When `true`, you can still cancel this bank transfer. */
      cancellable: boolean;
      failure_reason: components["schemas"]["BankTransferFailure"];
      /** @description A string containing the custom tag provided by the client in the create request. Will be null if not provided. */
      custom_tag: string | null;
      metadata: components["schemas"]["BankTransferMetadata"];
      /** @description Plaid’s unique identifier for the origination account that was used for this transfer. */
      origination_account_id: string;
      direction: components["schemas"]["BankTransferDirection"];
      [key: string]: unknown;
    };
    /**
     * Originator
     * @description Originator and their status.
     */
    DetailedOriginator: {
      /** @description Originator’s client ID. */
      client_id: string;
      transfer_diligence_status: components["schemas"]["TransferDiligenceStatus"];
      /** @description The company name of the end customer. */
      company_name: string;
      [key: string]: unknown;
    };
    /**
     * Originator
     * @description Originator and their status.
     */
    Originator: {
      /** @description Originator’s client ID. */
      client_id: string;
      transfer_diligence_status: components["schemas"]["TransferDiligenceStatus"];
      [key: string]: unknown;
    };
    /**
     * ACHClass
     * @description Specifies the use case of the transfer. Required for transfers on an ACH network.
     *
     * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
     *
     * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, e.g. bill payment
     *
     * `"tel"` - Telephone-Initiated Entry
     *
     * `"web"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
     * @enum {string}
     */
    ACHClass: "ccd" | "ppd" | "tel" | "web";
    /**
     * TransferCreditFundsSource
     * @description This field is now deprecated. You may ignore it for transfers created on and after 12/01/2023.
     *
     * Specifies the source of funds for the transfer. Only valid for `credit` transfers, and defaults to `sweep` if not specified. This field is not specified for `debit` transfers.
     *
     * `sweep` - Sweep funds from your funding account
     * `prefunded_rtp_credits` - Use your prefunded RTP credit balance with Plaid
     * `prefunded_ach_credits` - Use your prefunded ACH credit balance with Plaid
     * @enum {string|null}
     */
    TransferCreditFundsSource: "sweep" | "prefunded_rtp_credits" | "prefunded_ach_credits" | null;
    /**
     * TransferAmount
     * @description The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). When calling `/transfer/authorization/create`, specify the maximum amount to authorize. When calling `/transfer/create`, specify the exact amount of the transfer, up to a maximum of the amount authorized. If this field is left blank when calling `/transfer/create`, the maximum amount authorized in the `authorization_id` will be sent.
     */
    TransferAmount: string;
    /**
     * TransferSweepAmount
     * @description A signed amount of how much was `swept` or `return_swept` for this transfer (decimal string with two digits of precision e.g. "-5.50").
     */
    TransferSweepAmount: string | null;
    /**
     * TransferRefundAmount
     * @description The amount of the refund (decimal string with two digits of precision e.g. "10.00").
     */
    TransferRefundAmount: string;
    /**
     * TransferFacilitatorFee
     * @description The amount to deduct from `transfer.amount` and distribute to the platform’s Ledger balance as a facilitator fee (decimal string with two digits of precision e.g. "10.00"). The remainder will go to the end-customer’s Ledger balance. This must be less than or equal to the `transfer.amount`.
     */
    TransferFacilitatorFee: string;
    /**
     * TransferNetworkTraceID
     * @description The trace identifier for the transfer based on its network. This will only be set after the transfer has posted.
     *
     * For `ach` or `same-day-ach` transfers, this is the ACH trace number. Currently, the field will remain null for transfers on other rails.
     */
    TransferNetworkTraceID: string | null;
    /**
     * TransferIntentGetFailureReason
     * @description The reason for a failed transfer intent. Returned only if the transfer intent status is `failed`. Null otherwise.
     */
    TransferIntentGetFailureReason: {
      /** @description A broad categorization of the error. */
      error_type?: string;
      /** @description A code representing the reason for a failed transfer intent (i.e., an API error or the authorization being declined). */
      error_code?: string;
      /** @description A human-readable description of the code associated with a failed transfer intent. */
      error_message?: string;
      [key: string]: unknown;
    } | null;
    /**
     * TransferIntentCreateMode
     * @description The direction of the flow of transfer funds.
     *
     * `PAYMENT`: Transfers funds from an end user's account to your business account.
     *
     * `DISBURSEMENT`: Transfers funds from your business account to an end user's account.
     * @enum {string}
     */
    TransferIntentCreateMode: "PAYMENT" | "DISBURSEMENT";
    /**
     * BankTransferAmount
     * @description The amount of the bank transfer (decimal string with two digits of precision e.g. "10.00").
     */
    BankTransferAmount: string;
    /**
     * TransferCreateIdempotencyKey
     * @deprecated
     * @description Deprecated. `authorization_id` is now used as idempotency instead.
     *
     * A random key provided by the client, per unique transfer. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single transfer is created.
     */
    TransferCreateIdempotencyKey: string;
    /**
     * TransferAuthorizationIdempotencyKey
     * @description A random key provided by the client, per unique authorization, which expires after 48 hours. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an authorization fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single authorization is created.
     *
     * This idempotency key expires after 48 hours, after which the same key can be reused. Failure to provide this key may result in duplicate charges.
     */
    TransferAuthorizationIdempotencyKey: string | null;
    /**
     * TransferRecurringIdempotencyKey
     * @description A random key provided by the client, per unique recurring transfer. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a recurring fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single recurring transfer is created.
     */
    TransferRecurringIdempotencyKey: string;
    /**
     * TransferRefundIdempotencyKey
     * @description A random key provided by the client, per unique refund. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a refund fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single refund is created.
     */
    TransferRefundIdempotencyKey: string;
    /**
     * LedgerDepositIdempotencyKey
     * @description A unique key provided by the client, per unique ledger deposit. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying the request without accidentally performing the same operation twice. For example, if a request to create a ledger deposit fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single deposit is created.
     */
    LedgerDepositIdempotencyKey: string;
    /**
     * LedgerDistributeIdempotencyKey
     * @description A unique key provided by the client, per unique ledger distribute. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying the request without accidentally performing the same operation twice. For example, if a request to create a ledger distribute fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single distribute is created.
     */
    LedgerDistributeIdempotencyKey: string;
    /**
     * LedgerWithdrawIdempotencyKey
     * @description A unique key provided by the client, per unique ledger withdraw. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying the request without accidentally performing the same operation twice. For example, if a request to create a ledger withdraw fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single withdraw is created.
     */
    LedgerWithdrawIdempotencyKey: string;
    /**
     * BankTransferIdempotencyKey
     * @description A random key provided by the client, per unique bank transfer. Maximum of 50 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create a bank transfer fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single bank transfer is created.
     */
    BankTransferIdempotencyKey: string;
    /**
     * TransferAuthorizationUserInRequest
     * @description The legal name and other information for the account holder. The `user.legal_name` field is required. Other fields are not currently used and are present to support planned future functionality.
     */
    TransferAuthorizationUserInRequest: {
      /** @description The user's legal name. If the user is a business, provide the business name. */
      legal_name: string;
      /** @description The user's phone number. */
      phone_number?: string;
      /** @description The user's email address. */
      email_address?: string;
      address?: components["schemas"]["TransferUserAddressInRequest"];
    };
    /**
     * TransferUserInRequest
     * @description The legal name and other information for the account holder.
     */
    TransferUserInRequest: {
      /** @description The user's legal name. */
      legal_name: string;
      /** @description The user's phone number. */
      phone_number?: string;
      /** @description The user's email address. */
      email_address?: string;
      address?: components["schemas"]["TransferUserAddressInRequest"];
    };
    /**
     * TransferUserInRequestDeprecated
     * @deprecated
     * @description The legal name and other information for the account holder.
     */
    TransferUserInRequestDeprecated: {
      /** @description The user's legal name. */
      legal_name?: string;
      /** @description The user's phone number. */
      phone_number?: string;
      /** @description The user's email address. */
      email_address?: string;
      address?: components["schemas"]["TransferUserAddressInRequest"];
    } | null;
    /**
     * TransferUserInResponse
     * @description The legal name and other information for the account holder.
     */
    TransferUserInResponse: {
      /** @description The user's legal name. */
      legal_name: string;
      /** @description The user's phone number. */
      phone_number: string | null;
      /** @description The user's email address. */
      email_address: string | null;
      address: components["schemas"]["TransferUserAddressInResponse"];
      [key: string]: unknown;
    };
    /**
     * TransferUserAddressInRequest
     * @description The address associated with the account holder.
     */
    TransferUserAddressInRequest: {
      /** @description The street number and name (i.e., "100 Market St."). */
      street?: string;
      /** @description Ex. "San Francisco" */
      city?: string;
      /** @description The state or province (e.g., "CA"). */
      region?: string;
      /** @description The postal code (e.g., "94103"). */
      postal_code?: string;
      /** @description A two-letter country code (e.g., "US"). */
      country?: string;
    };
    /**
     * TransferUserAddressInResponse
     * @description The address associated with the account holder.
     */
    TransferUserAddressInResponse: ({
      /** @description The street number and name (i.e., "100 Market St."). */
      street: string | null;
      /** @description Ex. "San Francisco" */
      city: string | null;
      /** @description The state or province (e.g., "CA"). */
      region: string | null;
      /** @description The postal code (e.g., "94103"). */
      postal_code: string | null;
      /** @description A two-letter country code (e.g., "US"). */
      country: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * BankTransferUser
     * @description The legal name and other information for the account holder.
     */
    BankTransferUser: {
      /** @description The account holder’s full legal name. If the transfer `ach_class` is `ccd`, this should be the business name of the account holder. */
      legal_name: string;
      /** @description The account holder’s email. */
      email_address?: string | null;
      /** @description The account holder's routing number. This field is only used in response data. Do not provide this field when making requests. */
      routing_number?: string;
      [key: string]: unknown;
    };
    /**
     * @description A code representing the rationale for approving or declining the proposed transfer.
     *
     * If the `rationale_code` is `null`, the transfer passed the authorization check.
     *
     * Any non-`null` value for an `approved` transfer indicates that the the authorization check could not be run and that you should perform your own risk assessment on the transfer. The code will indicate why the check could not be run. Possible values for an `approved` transfer are:
     *
     * `MANUALLY_VERIFIED_ITEM` – Item created via same-day micro deposits, limited information available.
     *
     * `ITEM_LOGIN_REQUIRED` – Unable to collect the account information due to Item staleness. Can be resolved by using Link in [update mode](https://www.plaid.com/docs/link/update-mode).
     *
     * `MIGRATED_ACCOUNT_ITEM` - Item created via `/transfer/account_migration` endpoint, limited information available.
     *
     * `ERROR` – Unable to collect the account information due to an unspecified error.
     *
     * The following codes indicate that the authorization decision was `declined`:
     *
     * `NSF` – Transaction likely to result in a return due to insufficient funds.
     *
     * `RISK` - Transaction is high-risk.
     *
     * `TRANSFER_LIMIT_REACHED` - One or several transfer limits are reached, e.g. monthly transfer limit.
     * @enum {string}
     */
    TransferAuthorizationDecisionRationaleCode: "NSF" | "RISK" | "TRANSFER_LIMIT_REACHED" | "MANUALLY_VERIFIED_ITEM" | "ITEM_LOGIN_REQUIRED" | "PAYMENT_PROFILE_LOGIN_REQUIRED" | "ERROR" | "MIGRATED_ACCOUNT_ITEM" | null;
    /**
     * TransferAuthorizationDecisionRationale
     * @description The rationale for Plaid's decision regarding a proposed transfer. It is always set for `declined` decisions, and may or may not be null for `approved` decisions.
     */
    TransferAuthorizationDecisionRationale: {
      code: components["schemas"]["TransferAuthorizationDecisionRationaleCode"];
      /** @description A human-readable description of the code associated with a transfer approval or transfer decline. */
      description: string;
      [key: string]: unknown;
    } | null;
    /**
     * @description The payment method to complete the transaction after the risk assessment. It may be different from the default payment method.
     *
     * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
     *
     * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
     *
     * `STANDARD_ACH`: standard ACH by NACHA
     *
     * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
     *
     * `DEBIT_CARD`: if the default payment is over debit card networks
     *
     * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
     *
     * Possible values: `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
     *
     * @enum {string|null}
     */
    SignalPaymentMethod: "SAME_DAY_ACH" | "NEXT_DAY_ACH" | "STANDARD_ACH" | "REAL_TIME_PAYMENTS" | "DEBIT_CARD" | "MULTIPLE_PAYMENT_METHODS" | null;
    /**
     * @description The payment decision from the risk assessment.
     *
     * `APPROVE`: approve the transaction without requiring further actions from your customers. For example, use this field if you are placing a standard hold for all the approved transactions before making funds available to your customers. You should also use this field if you decide to accelerate the fund availability for your customers.
     *
     * `REVIEW`: the transaction requires manual review
     *
     * `REJECT`: reject the transaction
     *
     * `TAKE_OTHER_RISK_MEASURES`: for example, placing a longer hold on funds than those approved transactions or introducing customer frictions such as step-up verification/authentication
     *
     * `NOT_EVALUATED`: if only logging the Signal results without using them
     *
     * Possible values:  `APPROVE`, `REVIEW`, `REJECT`, `TAKE_OTHER_RISK_MEASURES`, `NOT_EVALUATED`
     *
     * @enum {string|null}
     */
    SignalDecisionOutcome: "APPROVE" | "REVIEW" | "REJECT" | "TAKE_OTHER_RISK_MEASURES" | "NOT_EVALUATED" | null;
    /**
     * @description Indicates whether the transfer is guaranteed by Plaid (Guarantee customers only). This field will contain either `GUARANTEED` or `NOT_GUARANTEED` indicating whether Plaid will guarantee the transfer. If the transfer is not guaranteed, additional information will be provided in the `guarantee_decision_rationale` field. Refer to the `code` field in `guarantee_decision_rationale` for details.
     * @enum {string|null}
     */
    TransferAuthorizationGuaranteeDecision: "GUARANTEED" | "NOT_GUARANTEED" | null;
    /**
     * @description A code representing the reason Plaid declined to guarantee this transfer:
     *
     * `RETURN_BANK`: The risk of a bank-initiated return (for example, an R01/NSF) is too high to guarantee this transfer.
     *
     * `RETURN_CUSTOMER`: The risk of a customer-initiated return (for example, a R10/Unauthorized) is too high to guarantee this transfer.
     *
     * `GUARANTEE_LIMIT_REACHED`: This transfer is low-risk, but Guarantee has exhausted an internal limit on the number or rate of guarantees that applies to this transfer.
     *
     * `RISK_ESTIMATE_UNAVAILABLE`: A risk estimate is unavailable for this Item.
     *
     * `REQUIRED_PARAM_MISSING`: Required fields are missing.
     * @enum {string}
     */
    TransferAuthorizationGuaranteeDecisionRationaleCode: "RETURN_BANK" | "RETURN_CUSTOMER" | "GUARANTEE_LIMIT_REACHED" | "RISK_ESTIMATE_UNAVAILABLE" | "REQUIRED_PARAM_MISSING";
    /**
     * TransferAuthorizationGuaranteeDecisionRationale
     * @description The rationale for Plaid's decision to not guarantee a transfer. Will be `null` unless `guarantee_decision` is `NOT_GUARANTEED`.
     */
    TransferAuthorizationGuaranteeDecisionRationale: {
      code: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationaleCode"];
      /** @description A human-readable description of why the transfer cannot be guaranteed. */
      description: string;
      [key: string]: unknown;
    } | null;
    /**
     * TransferAuthorizationProposedTransfer
     * @description Details regarding the proposed transfer.
     */
    TransferAuthorizationProposedTransfer: {
      ach_class?: components["schemas"]["ACHClass"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. */
      account_id?: string;
      funding_account_id: components["schemas"]["TransferFundingAccountIDResponseNullable"];
      type: components["schemas"]["TransferType"];
      user: components["schemas"]["TransferUserInResponse"];
      amount: components["schemas"]["TransferAmount"];
      /** @description The network or rails used for the transfer. */
      network: string;
      /**
       * @deprecated
       * @description Plaid's unique identifier for the origination account that was used for this transfer.
       */
      origination_account_id: string;
      /** @description The currency of the transfer amount. The default value is "USD". */
      iso_currency_code: string;
      /** @description The Plaid client ID that is the originator of this transfer. Only present if created on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms). */
      originator_client_id: string | null;
      /** @deprecated */
      credit_funds_source: components["schemas"]["TransferCreditFundsSource"];
      [key: string]: unknown;
    };
    /**
     * TransferAuthorizationDevice
     * @description Information about the device being used to initiate the authorization. These fields are not currently incorporated into the risk check.
     */
    TransferAuthorizationDevice: {
      /** @description The IP address of the device being used to initiate the authorization. */
      ip_address?: string;
      /** @description The user agent of the device being used to initiate the authorization. */
      user_agent?: string;
      [key: string]: unknown;
    };
    /**
     * TransferDevice
     * @description Information about the device being used to initiate the authorization.
     */
    TransferDevice: {
      /** @description The IP address of the device being used to initiate the authorization. */
      ip_address: string;
      /** @description The user agent of the device being used to initiate the authorization. */
      user_agent: string;
      [key: string]: unknown;
    };
    /**
     * TransferRecurringSchedule
     * @description The schedule that the recurring transfer will be executed on.
     */
    TransferRecurringSchedule: {
      interval_unit: components["schemas"]["TransferScheduleIntervalUnit"];
      interval_count: components["schemas"]["TransferScheduleIntervalCount"];
      /**
       * @description The day of the interval on which to schedule the transfer.
       *
       * If the `interval_unit` is `week`, `interval_execution_day` should be an integer from 1 (Monday) to 5 (Friday).
       *
       * If the `interval_unit` is `month`, `interval_execution_day` should be an integer indicating which day of the month to make the transfer on. Integers from 1 to 28 can be used to make a transfer on that day of the month. Negative integers from -1 to -5 can be used to make a transfer relative to the end of the month. To make a transfer on the last day of the month, use -1; to make the transfer on the second-to-last day, use -2, and so on.
       *
       * The transfer will be originated on the next available banking day if the designated day is a non banking day.
       */
      interval_execution_day: number;
      /**
       * Format: date
       * @description A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will begin on the first `interval_execution_day` on or after the `start_date`.
       *
       * If the first `interval_execution_day` on or after the start date is also the same day that `/transfer/recurring/create` was called, the bank *may* make the first payment on that day, but it is not guaranteed to do so.
       */
      start_date: string;
      /**
       * Format: date
       * @description A date in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD). The recurring transfer will end on the last `interval_execution_day` on or before the `end_date`.
       * If the `interval_execution_day` between the start date and the end date (inclusive) is also the same day that `/transfer/recurring/create` was called, the bank *may* make a payment on that day, but it is not guaranteed to do so.
       */
      end_date?: string | null;
    };
    /**
     * TransferScheduleIntervalUnit
     * @description The unit of the recurring interval.
     * @enum {string}
     */
    TransferScheduleIntervalUnit: "week" | "month";
    /**
     * TransferScheduleIntervalCount
     * @description The number of recurring `interval_units` between originations. The recurring interval (before holiday adjustment) is calculated by multiplying `interval_unit` and `interval_count`.
     * For example, to schedule a recurring transfer which originates once every two weeks, set `interval_unit` = `week` and `interval_count` = 2.
     */
    TransferScheduleIntervalCount: number;
    /**
     * TransferMetadata
     * @description The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     */
    TransferMetadata: {
      [key: string]: string;
    } | null;
    /**
     * BankTransferMetadata
     * @description The Metadata object is a mapping of client-provided string fields to any string value. The following limitations apply:
     * The JSON values must be Strings (no nested JSON objects allowed)
     * Only ASCII characters may be used
     * Maximum of 50 key/value pairs
     * Maximum key length of 40 characters
     * Maximum value length of 500 characters
     */
    BankTransferMetadata: {
      [key: string]: string;
    } | null;
    /**
     * TransferType
     * @description The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
     * @enum {string}
     */
    TransferType: "debit" | "credit";
    /**
     * OmittableTransferType
     * @description The type of transfer. Valid values are `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account. This field is omitted for Plaid Ledger Sweep events.
     * @enum {string}
     */
    OmittableTransferType: "debit" | "credit";
    /**
     * BankTransferType
     * @description The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into the origination account; a `credit` indicates a transfer of money out of the origination account.
     * @enum {string}
     */
    BankTransferType: "debit" | "credit";
    /**
     * TransferDiligenceStatus
     * @description Originator’s diligence status.
     * @enum {string}
     */
    TransferDiligenceStatus: "not_submitted" | "submitted" | "under_review" | "approved" | "denied";
    /**
     * TransferStatus
     * @description The status of the transfer.
     *
     * `pending`: A new transfer was created; it is in the pending state.
     * `posted`: The transfer has been successfully submitted to the payment network.
     * `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.
     * `cancelled`: The transfer was cancelled by the client.
     * `failed`: The transfer failed, no funds were moved.
     * `returned`: A posted transfer was returned.
     * @enum {string}
     */
    TransferStatus: "pending" | "posted" | "settled" | "cancelled" | "failed" | "returned";
    /**
     * TransferRecurringStatus
     * @description The status of the recurring transfer.
     *
     * `active`: The recurring transfer is currently active.
     * `cancelled`: The recurring transfer was cancelled by the client or Plaid.
     * `expired`: The recurring transfer has completed all originations according to its recurring schedule.
     * @enum {string}
     */
    TransferRecurringStatus: "active" | "cancelled" | "expired";
    /**
     * TransferSweepStatus
     * @description The status of the sweep for the transfer.
     *
     * `unswept`: The transfer hasn't been swept yet.
     * `swept`: The transfer was swept to the sweep account.
     * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customer’s business checking account.
     * `return_swept`: The transfer was returned, funds were pulled back or pushed back to the sweep account.
     * `null`: The transfer will never be swept (e.g. if the transfer is cancelled or returned before being swept)
     * @enum {string|null}
     */
    TransferSweepStatus: null | "unswept" | "swept" | "swept_settled" | "return_swept";
    /**
     * TransferRefundStatus
     * @description The status of the refund.
     *
     * `pending`: A new refund was created; it is in the pending state.
     * `posted`: The refund has been successfully submitted to the payment network.
     * `settled`: Credits have been refunded to the Plaid linked account.
     * `cancelled`: The refund was cancelled by the client.
     * `failed`: The refund has failed.
     * `returned`: The refund was returned.
     * @enum {string}
     */
    TransferRefundStatus: "pending" | "posted" | "cancelled" | "failed" | "settled" | "returned";
    /**
     * BankTransferStatus
     * @description The status of the transfer.
     * @enum {string}
     */
    BankTransferStatus: "pending" | "posted" | "cancelled" | "failed" | "reversed";
    /**
     * TransferIntentCreateNetwork
     * @description The network or rails used for the transfer. Defaults to `same-day-ach`.
     *
     * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 3:30 PM Eastern Time and the cutoff for next-day transfers is 5:30 PM Eastern Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
     * @default same-day-ach
     * @enum {string}
     */
    TransferIntentCreateNetwork: "ach" | "same-day-ach";
    /**
     * TransferNetwork
     * @description The network or rails used for the transfer.
     *
     * For transfers submitted as either `ach` or `same-day-ach` the cutoff for same-day is 3:30 PM Eastern Time and the cutoff for next-day transfers is 5:30 PM Eastern Time. It is recommended to submit a transfer at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any transfer that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges. Note that both legs of the transfer will be downgraded if applicable.
     *
     * For transfers submitted as `rtp`,  Plaid will automatically route between Real Time Payment rail by TCH or FedNow rails as necessary. If a transfer is submitted as `rtp` and the counterparty account is not eligible for RTP, the `/transfer/authorization/create` request will fail with an `INVALID_FIELD` error code. To pre-check to determine whether a counterparty account can support RTP, call `/transfer/capabilities/get` before calling `/transfer/authorization/create`.
     * @enum {string}
     */
    TransferNetwork: "ach" | "same-day-ach" | "rtp";
    /**
     * TransferACHNetwork
     * @description The ACH networks used for the funds flow.
     *
     * For requests submitted as either `ach` or `same-day-ach` the cutoff for same-day is 3:30 PM Eastern Time and the cutoff for next-day transfers is 5:30 PM Eastern Time. It is recommended to submit a request at least 15 minutes before the cutoff time in order to ensure that it will be processed before the cutoff. Any request that is indicated as `same-day-ach` and that misses the same-day cutoff, but is submitted in time for the next-day cutoff, will be sent over next-day rails and will not incur same-day charges.
     * @enum {string}
     */
    TransferACHNetwork: "ach" | "same-day-ach";
    /**
     * BankTransferNetwork
     * @description The network or rails used for the transfer. Valid options are `ach`, `same-day-ach`, or `wire`.
     * @enum {string}
     */
    BankTransferNetwork: "ach" | "same-day-ach" | "wire";
    /**
     * TransferFailure
     * @description The failure reason if the event type for a transfer is `"failed"` or `"returned"`. Null value otherwise.
     */
    TransferFailure: ({
      /** @description The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `returned`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes). */
      ach_return_code?: string | null;
      /** @description A human-readable description of the reason for the failure or reversal. */
      description?: string;
      [key: string]: unknown;
    }) | null;
    /**
     * BankTransferFailure
     * @description The failure reason if the type of this transfer is `"failed"` or `"reversed"`. Null value otherwise.
     */
    BankTransferFailure: ({
      /** @description The ACH return code, e.g. `R01`.  A return code will be provided if and only if the transfer status is `reversed`. For a full listing of ACH return codes, see [Bank Transfers errors](https://plaid.com/docs/errors/bank-transfers/#ach-return-codes). */
      ach_return_code?: string | null;
      /** @description A human-readable description of the reason for the failure or reversal. */
      description?: string;
      [key: string]: unknown;
    }) | null;
    /**
     * TransferAuthorizationCreateRequest
     * @description Defines the request schema for `/transfer/authorization/create`
     */
    TransferAuthorizationCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["TransferAccessToken"];
      account_id: components["schemas"]["TransferAccountID"];
      funding_account_id?: components["schemas"]["TransferMigratedFundingAccountIDRequest"];
      payment_profile_token?: components["schemas"]["TransferPaymentProfileToken"];
      type: components["schemas"]["TransferType"];
      network: components["schemas"]["TransferNetwork"];
      amount: components["schemas"]["TransferAmount"];
      ach_class?: components["schemas"]["ACHClass"];
      user: components["schemas"]["TransferAuthorizationUserInRequest"];
      device?: components["schemas"]["TransferAuthorizationDevice"];
      /**
       * @deprecated
       * @description Plaid's unique identifier for the origination account for this authorization. If not specified, the default account will be used.
       */
      origination_account_id?: string;
      /** @description The currency of the transfer amount. The default value is "USD". */
      iso_currency_code?: string;
      idempotency_key?: components["schemas"]["TransferAuthorizationIdempotencyKey"];
      /** @description If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. This field is not currently used and is present to support planned future functionality. */
      user_present?: boolean | null;
      /**
       * @description If set to `false`, Plaid will not offer a `guarantee_decision` for this request (Guarantee customers only).
       * @default true
       */
      with_guarantee?: boolean | null;
      /** @description The unique identifier returned by Plaid's [beacon](https://plaid.com/docs/transfer/guarantee/#using-a-beacon) when it is run on your webpage. */
      beacon_session_id?: string | null;
      /** @description The Plaid client ID that is the originator of this transfer. Only needed if creating transfers on behalf of another client as a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms). */
      originator_client_id?: string | null;
      /** @deprecated */
      credit_funds_source?: components["schemas"]["TransferCreditFundsSource"];
      /** @description Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `authorization` is created at the `virtual_time` on the provided test clock. */
      test_clock_id?: string | null;
    };
    /**
     * TransferCapabilitiesGetRequest
     * @description Defines the request schema for `/transfer/capabilities/get`
     */
    TransferCapabilitiesGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["TransferAccessToken"];
      account_id: components["schemas"]["TransferAccountID"];
      payment_profile_token?: components["schemas"]["PaymentProfileToken"];
    };
    /**
     * TransferConfigurationGetRequest
     * @description Defines the request schema for `/transfer/configuration/get`
     */
    TransferConfigurationGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The Plaid client ID of the transfer originator. Should only be present if `client_id` is a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms). */
      originator_client_id?: string | null;
    };
    /**
     * TransferMetricsGetRequest
     * @description Defines the request schema for `/transfer/metrics/get`
     */
    TransferMetricsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The Plaid client ID of the transfer originator. Should only be present if `client_id` is a [Platform customer](https://plaid.com/docs/transfer/application/#originators-vs-platforms). */
      originator_client_id?: string | null;
    };
    /**
     * TransferCreateRequest
     * @description Defines the request schema for `/transfer/create`
     */
    TransferCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key?: components["schemas"]["TransferCreateIdempotencyKey"];
      access_token: components["schemas"]["TransferAccessToken"];
      account_id: components["schemas"]["TransferAccountID"];
      /** @description Plaid’s unique identifier for a transfer authorization. This parameter also serves the purpose of acting as an idempotency identifier. */
      authorization_id: string;
      /** @deprecated */
      type?: components["schemas"]["TransferType"];
      /** @deprecated */
      network?: components["schemas"]["TransferNetwork"];
      amount?: components["schemas"]["TransferAmount"];
      /** @description The transfer description. Maximum of 15 characters. If reprocessing a returned transfer, please note that the `description` field must be `"Retry"` to indicate that it's a retry of a previously returned transfer. You may retry a transfer up to 2 times, within 180 days of creating the original transfer. Only transfers that were returned with code `R01` or `R09` may be retried. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes). */
      description: string;
      /** @deprecated */
      ach_class?: components["schemas"]["ACHClass"];
      user?: components["schemas"]["TransferUserInRequestDeprecated"];
      metadata?: components["schemas"]["TransferMetadata"];
      /**
       * @deprecated
       * @description Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank.
       */
      origination_account_id?: string | null;
      /**
       * @deprecated
       * @description The currency of the transfer amount. The default value is "USD".
       */
      iso_currency_code?: string;
      /** @description Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the `transfer` is created at the `virtual_time` on the provided `test_clock`. */
      test_clock_id?: string | null;
      facilitator_fee?: components["schemas"]["TransferFacilitatorFee"];
    };
    /**
     * TransferRecurringCreateRequest
     * @description Defines the request schema for `/transfer/recurring/create`
     */
    TransferRecurringCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["TransferAccessToken"];
      idempotency_key: components["schemas"]["TransferRecurringIdempotencyKey"];
      account_id: components["schemas"]["TransferAccountID"];
      funding_account_id?: components["schemas"]["TransferUnmigratedFundingAccountIDRequest"];
      type: components["schemas"]["TransferType"];
      network: components["schemas"]["TransferNetwork"];
      ach_class?: components["schemas"]["ACHClass"];
      amount: components["schemas"]["TransferAmount"];
      /** @description If the end user is initiating the specific transfer themselves via an interactive UI, this should be `true`; for automatic recurring payments where the end user is not actually initiating each individual transfer, it should be `false`. */
      user_present?: boolean | null;
      /**
       * @deprecated
       * @description The currency of the transfer amount. The default value is "USD".
       */
      iso_currency_code?: string;
      /** @description The description of the recurring transfer. */
      description: string;
      /** @description Plaid’s unique identifier for a test clock. This field may only be used when using `sandbox` environment. If provided, the created `recurring_transfer` is associated with the `test_clock`. New originations are automatically generated when the associated `test_clock` advances. */
      test_clock_id?: string | null;
      schedule: components["schemas"]["TransferRecurringSchedule"];
      user: components["schemas"]["TransferUserInRequest"];
      device?: components["schemas"]["TransferDevice"];
    };
    /**
     * BankTransferCreateRequest
     * @description Defines the request schema for `/bank_transfer/create`
     */
    BankTransferCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key: components["schemas"]["BankTransferIdempotencyKey"];
      access_token: components["schemas"]["BankTransferAccessToken"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. */
      account_id: string;
      type: components["schemas"]["BankTransferType"];
      network: components["schemas"]["BankTransferNetwork"];
      amount: components["schemas"]["BankTransferAmount"];
      /** @description The currency of the transfer amount – should be set to "USD". */
      iso_currency_code: string;
      /** @description The transfer description. Maximum of 10 characters. */
      description: string;
      ach_class?: components["schemas"]["ACHClass"];
      user: components["schemas"]["BankTransferUser"];
      /** @description An arbitrary string provided by the client for storage with the bank transfer. May be up to 100 characters. */
      custom_tag?: string | null;
      metadata?: components["schemas"]["BankTransferMetadata"];
      /** @description Plaid’s unique identifier for the origination account for this transfer. If you have more than one origination account, this value must be specified. Otherwise, this field should be left blank. */
      origination_account_id?: string | null;
    };
    /**
     * TransferAuthorizationCreateResponse
     * @description Defines the response schema for `/transfer/authorization/create`
     */
    TransferAuthorizationCreateResponse: {
      authorization: components["schemas"]["TransferAuthorization"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferCapabilitiesGetResponse
     * @description Defines the response schema for `/transfer/capabilities/get`
     */
    TransferCapabilitiesGetResponse: {
      institution_supported_networks: components["schemas"]["InstitutionSupportedNetworks"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferConfigurationGetResponse
     * @description Defines the response schema for `/transfer/configuration/get`
     */
    TransferConfigurationGetResponse: {
      request_id: components["schemas"]["RequestID"];
      /**
       * @deprecated
       * @description The max limit of dollar amount of a single transfer (decimal string with two digits of precision e.g. "10.00").
       */
      max_single_transfer_amount: string;
      /** @description The max limit of dollar amount of a single credit transfer (decimal string with two digits of precision e.g. "10.00"). */
      max_single_transfer_credit_amount: string;
      /** @description The max limit of dollar amount of a single debit transfer (decimal string with two digits of precision e.g. "10.00"). */
      max_single_transfer_debit_amount: string;
      /** @description The max limit of sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00"). */
      max_daily_credit_amount: string;
      /** @description The max limit of sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00"). */
      max_daily_debit_amount: string;
      /**
       * @deprecated
       * @description The max limit of sum of dollar amount of credit and debit transfers in one calendar month (decimal string with two digits of precision e.g. "10.00").
       */
      max_monthly_amount: string;
      /** @description The max limit of sum of dollar amount of credit transfers in one calendar month (decimal string with two digits of precision e.g. "10.00"). */
      max_monthly_credit_amount: string;
      /** @description The max limit of sum of dollar amount of debit transfers in one calendar month (decimal string with two digits of precision e.g. "10.00"). */
      max_monthly_debit_amount: string;
      /** @description The currency of the dollar amount, e.g. "USD". */
      iso_currency_code: string;
      [key: string]: unknown;
    };
    /**
     * TransferMetricsGetResponse
     * @description Defines the response schema for `/transfer/metrics/get`
     */
    TransferMetricsGetResponse: {
      request_id: components["schemas"]["RequestID"];
      /** @description Sum of dollar amount of debit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00"). */
      daily_debit_transfer_volume: string;
      /** @description Sum of dollar amount of credit transfers in last 24 hours (decimal string with two digits of precision e.g. "10.00"). */
      daily_credit_transfer_volume: string;
      /**
       * @deprecated
       * @description Sum of dollar amount of credit and debit transfers in current calendar month (decimal string with two digits of precision e.g. "10.00").
       */
      monthly_transfer_volume: string;
      /** @description Sum of dollar amount of debit transfers in current calendar month (decimal string with two digits of precision e.g. "10.00"). */
      monthly_debit_transfer_volume: string;
      /** @description Sum of dollar amount of credit transfers in current calendar month (decimal string with two digits of precision e.g. "10.00"). */
      monthly_credit_transfer_volume: string;
      /** @description The currency of the dollar amount, e.g. "USD". */
      iso_currency_code: string;
      [key: string]: unknown;
    };
    /**
     * @description
     * A decision regarding the proposed transfer.
     *
     * `approved` – The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
     *
     * `declined` – Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
     * @enum {string}
     */
    TransferAuthorizationDecision: "approved" | "declined";
    /**
     * TransferAuthorization
     * @description Contains the authorization decision for a proposed transfer.
     */
    TransferAuthorization: {
      id: components["schemas"]["TransferAuthorizationID"];
      /**
       * Format: date-time
       * @description The datetime representing when the authorization was created, in the format `2006-01-02T15:04:05Z`.
       */
      created: string;
      decision: components["schemas"]["TransferAuthorizationDecision"];
      decision_rationale: components["schemas"]["TransferAuthorizationDecisionRationale"];
      guarantee_decision: components["schemas"]["TransferAuthorizationGuaranteeDecision"];
      guarantee_decision_rationale: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationale"];
      payment_risk: components["schemas"]["TransferAuthorizationPaymentRisk"];
      proposed_transfer: components["schemas"]["TransferAuthorizationProposedTransfer"];
      [key: string]: unknown;
    };
    /**
     * InstitutionSupportedNetworks
     * @description Contains the RTP network and types supported by the linked Item's institution.
     */
    InstitutionSupportedNetworks: {
      rtp: components["schemas"]["TransferCapabilitiesGetRTP"];
      [key: string]: unknown;
    };
    /**
     * TransferCapabilitiesGetRTP
     * @description Contains the supported service types in RTP
     */
    TransferCapabilitiesGetRTP: {
      /**
       * @description When `true`, the linked Item's institution supports RTP credit transfer.
       * @default false
       */
      credit?: boolean;
      [key: string]: unknown;
    };
    /**
     * TransferCreateResponse
     * @description Defines the response schema for `/transfer/create`
     */
    TransferCreateResponse: {
      transfer: components["schemas"]["Transfer"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRecurringCreateResponse
     * @description Defines the response schema for `/transfer/recurring/create`
     */
    TransferRecurringCreateResponse: {
      recurring_transfer?: components["schemas"]["RecurringTransferNullable"];
      decision: components["schemas"]["TransferAuthorizationDecision"];
      decision_rationale?: components["schemas"]["TransferAuthorizationDecisionRationale"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferCreateResponse
     * @description Defines the response schema for `/bank_transfer/create`
     */
    BankTransferCreateResponse: {
      bank_transfer: components["schemas"]["BankTransfer"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferListRequest
     * @description Defines the request schema for `/transfer/list`
     */
    TransferListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * @description The maximum number of transfers to return.
       * @default 25
       */
      count?: number;
      /**
       * @description The number of transfers to skip before returning results.
       * @default 0
       */
      offset?: number;
      /**
       * @deprecated
       * @description Filter transfers to only those originated through the specified origination account.
       */
      origination_account_id?: string | null;
      /** @description Filter transfers to only those with the specified originator client. */
      originator_client_id?: string | null;
      /** @description Filter transfers to only those with the specified `funding_account_id`. */
      funding_account_id?: string | null;
    };
    /**
     * TransferRecurringListRequest
     * @description Defines the request schema for `/transfer/recurring/list`
     */
    TransferRecurringListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_time?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of recurring transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_time?: string | null;
      /**
       * @description The maximum number of recurring transfers to return.
       * @default 25
       */
      count?: number;
      /**
       * @description The number of recurring transfers to skip before returning results.
       * @default 0
       */
      offset?: number;
      /** @description Filter recurring transfers to only those with the specified `funding_account_id`. */
      funding_account_id?: string | null;
    };
    /**
     * BankTransferListRequest
     * @description Defines the request schema for `/bank_transfer/list`
     */
    BankTransferListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * @description The maximum number of bank transfers to return.
       * @default 25
       */
      count?: number;
      /**
       * @description The number of bank transfers to skip before returning results.
       * @default 0
       */
      offset?: number;
      /** @description Filter bank transfers to only those originated through the specified origination account. */
      origination_account_id?: string | null;
      direction?: components["schemas"]["BankTransferDirection"];
    };
    /**
     * TransferListResponse
     * @description Defines the response schema for `/transfer/list`
     */
    TransferListResponse: {
      transfers: components["schemas"]["Transfer"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRecurringListResponse
     * @description Defines the response schema for `/transfer/recurring/list`
     */
    TransferRecurringListResponse: {
      recurring_transfers: components["schemas"]["RecurringTransfer"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferListResponse
     * @description Defines the response schema for `/bank_transfer/list`
     */
    BankTransferListResponse: {
      bank_transfers: components["schemas"]["BankTransfer"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferDirection
     * @description Indicates the direction of the transfer: `outbound` for API-initiated transfers, or `inbound` for payments received by the FBO account.
     * @enum {string|null}
     */
    BankTransferDirection: "outbound" | "inbound" | null;
    /**
     * TransferCancelRequest
     * @description Defines the request schema for `/transfer/cancel`
     */
    TransferCancelRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      transfer_id: components["schemas"]["TransferID"];
      /**
       * @deprecated
       * @description The Plaid client ID of the transfer originator. Should only be present if `client_id` is a third-party sender (TPS).
       */
      originator_client_id?: string | null;
    };
    /**
     * TransferRecurringCancelRequest
     * @description Defines the request schema for `/transfer/recurring/cancel`
     */
    TransferRecurringCancelRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      recurring_transfer_id: components["schemas"]["RecurringTransferID"];
    };
    /**
     * BankTransferCancelRequest
     * @description Defines the request schema for `/bank_transfer/cancel`
     */
    BankTransferCancelRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      bank_transfer_id: components["schemas"]["BankTransferID"];
    };
    /**
     * TransferCancelResponse
     * @description Defines the response schema for `/transfer/cancel`
     */
    TransferCancelResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRecurringCancelResponse
     * @description Defines the response schema for `/transfer/recurring/cancel`
     */
    TransferRecurringCancelResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferCancelResponse
     * @description Defines the response schema for `/bank_transfer/cancel`
     */
    BankTransferCancelResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferType
     * @description The type of transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
     * @enum {string|null}
     */
    TransferEventListTransferType: "debit" | "credit" | null;
    /**
     * TransferEventListRequest
     * @description Defines the request schema for `/transfer/event/list`
     */
    TransferEventListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * TransferID
       * @description Plaid’s unique identifier for a transfer.
       */
      transfer_id?: string | null;
      /** @description The account ID to get events for all transactions to/from an account. */
      account_id?: string | null;
      transfer_type?: components["schemas"]["TransferEventListTransferType"];
      /** @description Filter events by event type. */
      event_types?: components["schemas"]["TransferEventType"][];
      /** @description Plaid’s unique identifier for a sweep. */
      sweep_id?: string;
      /**
       * @description The maximum number of transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The offset into the list of transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 events will be returned.
       * @default 0
       */
      offset?: number | null;
      /**
       * @deprecated
       * @description The origination account ID to get events for transfers from a specific origination account.
       */
      origination_account_id?: string | null;
      /** @description Filter transfer events to only those with the specified originator client. */
      originator_client_id?: string | null;
      /** @description Filter transfer events to only those with the specified `funding_account_id`. */
      funding_account_id?: string | null;
    };
    /**
     * BankTransferType
     * @description The type of bank transfer. This will be either `debit` or `credit`.  A `debit` indicates a transfer of money into your origination account; a `credit` indicates a transfer of money out of your origination account.
     * @enum {string|null}
     */
    BankTransferEventListBankTransferType: "debit" | "credit" | null;
    /**
     * BankTransferDirection
     * @description Indicates the direction of the transfer: `outbound`: for API-initiated transfers
     * `inbound`: for payments received by the FBO account.
     * @enum {string|null}
     */
    BankTransferEventListDirection: "inbound" | "outbound" | null;
    /**
     * BankTransferEventListRequest
     * @description Defines the request schema for `/bank_transfer/event/list`
     */
    BankTransferEventListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of bank transfers to list. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_date?: string | null;
      /**
       * BankTransferID
       * @description Plaid’s unique identifier for a bank transfer.
       */
      bank_transfer_id?: string | null;
      /** @description The account ID to get events for all transactions to/from an account. */
      account_id?: string | null;
      bank_transfer_type?: components["schemas"]["BankTransferEventListBankTransferType"];
      /** @description Filter events by event type. */
      event_types?: components["schemas"]["BankTransferEventType"][];
      /**
       * @description The maximum number of bank transfer events to return. If the number of events matching the above parameters is greater than `count`, the most recent events will be returned.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The offset into the list of bank transfer events. When `count`=25 and `offset`=0, the first 25 events will be returned. When `count`=25 and `offset`=25, the next 25 bank transfer events will be returned.
       * @default 0
       */
      offset?: number | null;
      /** @description The origination account ID to get events for transfers from a specific origination account. */
      origination_account_id?: string | null;
      direction?: components["schemas"]["BankTransferEventListDirection"];
    };
    /**
     * TransferEventType
     * @description The type of event that this transfer represents. Event types with prefix `sweep` represents events for Plaid Ledger sweeps.
     *
     * `pending`: A new transfer was created; it is in the pending state.
     *
     * `cancelled`: The transfer was cancelled by the client.
     *
     * `failed`: The transfer failed, no funds were moved.
     *
     * `posted`: The transfer has been successfully submitted to the payment network.
     *
     * `settled`: Credits are available to be withdrawn or debits have been deducted from the Plaid linked account.
     *
     * `returned`: A posted transfer was returned.
     *
     * `swept`: The transfer was swept to / from the sweep account.
     *
     * `swept_settled`: Credits are available to be withdrawn or debits have been deducted from the customer’s business checking account.
     *
     * `return_swept`: Due to the transfer being returned, funds were pulled from or pushed back to the sweep account.
     *
     * `sweep.pending`: A new ledger sweep was created; it is in the pending state.
     *
     * `sweep.posted`: The ledger sweep has been successfully submitted to the payment network.
     *
     * `sweep.settled`: The transaction has settled in the funding account. This means that funds withdrawn from Plaid Ledger balance have reached the funding account, or funds to be deposited into the Plaid Ledger Balance have been pulled, and the hold period has begun.
     *
     * `sweep.returned`: A posted ledger sweep was returned.
     *
     * `sweep.failed`: The ledger sweep failed, no funds were moved.
     *
     * `refund.pending`: A new refund was created; it is in the pending state.
     *
     * `refund.cancelled`: The refund was cancelled.
     *
     * `refund.failed`: The refund failed, no funds were moved.
     *
     * `refund.posted`: The refund has been successfully submitted to the payment network.
     *
     * `refund.settled`: The refund transaction has settled in the Plaid linked account.
     *
     * `refund.returned`: A posted refund was returned.
     *
     * `refund.swept`: The refund was swept from the sweep account.
     *
     * `refund.return_swept`: Due to the refund being returned, funds were pushed back to the sweep account.
     * @enum {string}
     */
    TransferEventType: "pending" | "cancelled" | "failed" | "posted" | "settled" | "returned" | "swept" | "swept_settled" | "return_swept" | "sweep.pending" | "sweep.posted" | "sweep.settled" | "sweep.returned" | "sweep.failed";
    /**
     * TransferLedgerSweepSimulateEventType
     * @description The asynchronous event to be simulated. May be: `posted`, `settled`, `failed`, or `returned`.
     *
     * An error will be returned if the event type is incompatible with the current ledger sweep status. Compatible status --> event type transitions include:
     *
     * `sweep.pending` --> `sweep.posted`
     *
     * `sweep.pending` --> `sweep.failed`
     *
     * `sweep.posted` --> `sweep.settled`
     *
     * `sweep.posted` --> `sweep.returned`
     *
     * `sweep.settled` --> `sweep.returned`
     *
     * @enum {string}
     */
    TransferLedgerSweepSimulateEventType: "sweep.posted" | "sweep.settled" | "sweep.returned" | "sweep.failed";
    /**
     * BankTransferEventType
     * @description The type of event that this bank transfer represents.
     *
     * `pending`: A new transfer was created; it is in the pending state.
     *
     * `cancelled`: The transfer was cancelled by the client.
     *
     * `failed`: The transfer failed, no funds were moved.
     *
     * `posted`: The transfer has been successfully submitted to the payment network.
     *
     * `reversed`: A posted transfer was reversed.
     * @enum {string}
     */
    BankTransferEventType: "pending" | "cancelled" | "failed" | "posted" | "reversed";
    /**
     * TransferEvent
     * @description Represents an event in the Transfers API.
     */
    TransferEvent: {
      /** @description Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers. */
      event_id: number;
      /**
       * Format: date-time
       * @description The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
       */
      timestamp: string;
      event_type: components["schemas"]["TransferEventType"];
      /** @description The account ID associated with the transfer. This field is omitted for Plaid Ledger Sweep events. */
      account_id?: string;
      funding_account_id: components["schemas"]["TransferFundingAccountIDResponseNullable"];
      /** @description Plaid’s unique identifier for a transfer. This field is `null` for Plaid Ledger Sweep events. */
      transfer_id: string;
      /**
       * @deprecated
       * @description The ID of the origination account that this balance belongs to.
       */
      origination_account_id: string | null;
      transfer_type?: components["schemas"]["OmittableTransferType"];
      /**
       * TransferAmount
       * @description The amount of the transfer (decimal string with two digits of precision e.g. "10.00"). This field is omitted for Plaid Ledger Sweep events.
       */
      transfer_amount?: string;
      failure_reason: components["schemas"]["TransferFailure"];
      sweep_id: components["schemas"]["TransferSweepIDNullable"];
      sweep_amount: components["schemas"]["TransferSweepAmount"];
      /** @description Plaid’s unique identifier for a refund. A non-null value indicates the event is for the associated refund of the transfer. */
      refund_id: string | null;
      /** @description The Plaid client ID that is the originator of the transfer that this event applies to. Only present if the transfer was created on behalf of another client as a third-party sender (TPS). */
      originator_client_id: string | null;
      [key: string]: unknown;
    };
    /**
     * BankTransferEvent
     * @description Represents an event in the Bank Transfers API.
     */
    BankTransferEvent: {
      /** @description Plaid’s unique identifier for this event. IDs are sequential unsigned 64-bit integers. */
      event_id: number;
      /**
       * Format: date-time
       * @description The datetime when this event occurred. This will be of the form `2006-01-02T15:04:05Z`.
       */
      timestamp: string;
      event_type: components["schemas"]["BankTransferEventType"];
      /** @description The account ID associated with the bank transfer. */
      account_id: string;
      bank_transfer_id: components["schemas"]["BankTransferID"];
      /** @description The ID of the origination account that this balance belongs to. */
      origination_account_id: string | null;
      bank_transfer_type: components["schemas"]["BankTransferType"];
      /** @description The bank transfer amount. */
      bank_transfer_amount: string;
      /** @description The currency of the bank transfer amount. */
      bank_transfer_iso_currency_code: string;
      failure_reason: components["schemas"]["BankTransferFailure"];
      direction: components["schemas"]["BankTransferDirection"];
      [key: string]: unknown;
    };
    /**
     * TransferEventListResponse
     * @description Defines the response schema for `/transfer/event/list`
     */
    TransferEventListResponse: {
      transfer_events: components["schemas"]["TransferEvent"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferEventListResponse
     * @description Defines the response schema for `/bank_transfer/event/list`
     */
    BankTransferEventListResponse: {
      bank_transfer_events: components["schemas"]["BankTransferEvent"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferEventSyncRequest
     * @description Defines the request schema for `/bank_transfer/event/sync`
     */
    BankTransferEventSyncRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially. */
      after_id: number;
      /**
       * @description The maximum number of bank transfer events to return.
       * @default 25
       */
      count?: number | null;
    };
    /**
     * TransferEventSyncRequest
     * @description Defines the request schema for `/transfer/event/sync`
     */
    TransferEventSyncRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The latest (largest) `event_id` fetched via the sync endpoint, or 0 initially. */
      after_id: number;
      /**
       * @description The maximum number of transfer events to return.
       * @default 25
       */
      count?: number | null;
    };
    /**
     * BankTransferEventSyncResponse
     * @description Defines the response schema for `/bank_transfer/event/sync`
     */
    BankTransferEventSyncResponse: {
      bank_transfer_events: components["schemas"]["BankTransferEvent"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferEventSyncResponse
     * @description Defines the response schema for `/transfer/event/sync`
     */
    TransferEventSyncResponse: {
      transfer_events: components["schemas"]["TransferEvent"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferSweepGetRequest
     * @description Defines the request schema for `/bank_transfer/sweep/get`
     */
    BankTransferSweepGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Identifier of the sweep. */
      sweep_id: string;
    };
    /**
     * TransferSweepGetRequest
     * @description Defines the request schema for `/transfer/sweep/get`
     */
    TransferSweepGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Plaid's unique identifier for the sweep (UUID) or a shortened form consisting of the first 8 characters of the identifier (8-digit hexadecimal string). */
      sweep_id: string;
    };
    /**
     * BankTransferSweepGetResponse
     * @description BankTransferSweepGetResponse defines the response schema for `/bank_transfer/sweep/get`
     */
    BankTransferSweepGetResponse: {
      sweep: components["schemas"]["BankTransferSweep"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferSweepGetResponse
     * @description Defines the response schema for `/transfer/sweep/get`
     */
    TransferSweepGetResponse: {
      sweep: components["schemas"]["TransferSweep"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferSweepListRequest
     * @description BankTransferSweepListRequest defines the request schema for `/bank_transfer/sweep/list`
     */
    BankTransferSweepListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description If multiple origination accounts are available, `origination_account_id` must be used to specify the account that the sweeps belong to. */
      origination_account_id?: string | null;
      /**
       * Format: date-time
       * @description The start datetime of sweeps to return (RFC 3339 format).
       */
      start_time?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of sweeps to return (RFC 3339 format).
       */
      end_time?: string | null;
      /**
       * @description The maximum number of sweeps to return.
       * @default 25
       */
      count?: number | null;
    };
    /**
     * SweepStatus
     * @description The status of a sweep transfer
     *
     * `"pending"` - The sweep is currently pending
     * `"posted"` - The sweep has been posted
     * `"settled"` - The sweep has settled
     * `"returned"` - The sweep has been returned
     * `"failed"` - The sweep has failed
     * @enum {string|null}
     */
    SweepStatus: "pending" | "posted" | "settled" | "returned" | "failed" | null;
    /**
     * SweepTrigger
     * @description The trigger of the sweep
     *
     * `"manual"` - The sweep is created manually by the customer
     * `"incoming"` - The sweep is created by incoming funds flow (e.g. Incoming Wire)
     * `"balance_threshold"` - The sweep is created by balance threshold setting
     * `"automatic_aggregate"` - The sweep is created by the Plaid automatic aggregation process. These funds did not pass through the Plaid Ledger balance.
     * @enum {string|null}
     */
    SweepTrigger: "manual" | "incoming" | "balance_threshold" | "automatic_aggregate" | null;
    /**
     * SweepDescription
     * @description The description of the deposit that will be passed to the receiving bank (up to 10 characters). Note that banks utilize this field differently, and may or may not show it on the bank statement.
     */
    SweepDescription: string | null;
    /**
     * TransferSweepListRequest
     * @description Defines the request schema for `/transfer/sweep/list`
     */
    TransferSweepListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of sweeps to return (RFC 3339 format).
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of sweeps to return (RFC 3339 format).
       */
      end_date?: string | null;
      /**
       * @description The maximum number of sweeps to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of sweeps to skip before returning results.
       * @default 0
       */
      offset?: number;
      /** @description Filter sweeps to only those with the specified amount. */
      amount?: string | null;
      status?: components["schemas"]["SweepStatus"];
      /** @description Filter sweeps to only those with the specified originator client. */
      originator_client_id?: string | null;
      /** @description Filter sweeps to only those with the specified `funding_account_id`. */
      funding_account_id?: string | null;
      /** @description Filter sweeps to only those with the included `transfer_id`. */
      transfer_id?: string | null;
      trigger?: components["schemas"]["SweepTrigger"];
    };
    /**
     * TransferSweepListResponse
     * @description Defines the response schema for `/transfer/sweep/list`
     */
    TransferSweepListResponse: {
      sweeps: components["schemas"]["TransferSweep"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferSweepListResponse
     * @description BankTransferSweepListResponse defines the response schema for `/bank_transfer/sweep/list`
     */
    BankTransferSweepListResponse: {
      sweeps: components["schemas"]["BankTransferSweep"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferSweep
     * @description BankTransferSweep describes a sweep transfer.
     */
    BankTransferSweep: {
      /** @description Identifier of the sweep. */
      id: string;
      /**
       * Format: date-time
       * @description The datetime when the sweep occurred, in RFC 3339 format.
       */
      created_at: string;
      /** @description The amount of the sweep. */
      amount: string;
      /** @description The currency of the sweep, e.g. "USD". */
      iso_currency_code: string;
      [key: string]: unknown;
    };
    /**
     * TransferSweep
     * @description Describes a sweep of funds to / from the sweep account.
     *
     * A sweep is associated with many sweep events (events of type `swept` or `return_swept`) which can be retrieved by invoking the `/transfer/event/list` endpoint with the corresponding `sweep_id`.
     *
     * `swept` events occur when the transfer amount is credited or debited from your sweep account, depending on the `type` of the transfer. `return_swept` events occur when a transfer is returned and Plaid undoes the credit or debit.
     *
     * The total sum of the `swept` and `return_swept` events is equal to the `amount` of the sweep Plaid creates and matches the amount of the entry on your sweep account ledger.
     */
    TransferSweep: {
      /** @description Identifier of the sweep. */
      id: string;
      funding_account_id: components["schemas"]["TransferFundingAccountIDResponse"];
      /**
       * Format: date-time
       * @description The datetime when the sweep occurred, in RFC 3339 format.
       */
      created: string;
      /**
       * @description Signed decimal amount of the sweep as it appears on your sweep account ledger (e.g. "-10.00")
       *
       * If amount is not present, the sweep was net-settled to zero and outstanding debits and credits between the sweep account and Plaid are balanced.
       */
      amount: string;
      /** @description The currency of the sweep, e.g. "USD". */
      iso_currency_code: string;
      /**
       * Format: date
       * @description The date when the sweep settled, in the YYYY-MM-DD format.
       */
      settled: string | null;
      status?: components["schemas"]["SweepStatus"];
      trigger?: components["schemas"]["SweepTrigger"];
      /** @description The description of the deposit that will be passed to the receiving bank (up to 10 characters). Note that banks utilize this field differently, and may or may not show it on the bank statement. */
      description?: string;
      network_trace_id?: components["schemas"]["TransferNetworkTraceID"];
      [key: string]: unknown;
    };
    /**
     * SimulatedTransferSweep
     * @description A sweep returned from the `/sandbox/transfer/sweep/simulate` endpoint.
     * Can be null if there are no transfers to include in a sweep.
     */
    SimulatedTransferSweep: {
      [key: string]: unknown;
    } & components["schemas"]["TransferSweep"];
    /**
     * BankTransferBalanceGetRequest
     * @description Defines the request schema for `/bank_transfer/balance/get`
     */
    BankTransferBalanceGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description If multiple origination accounts are available, `origination_account_id` must be used to specify the account for which balance will be returned. */
      origination_account_id?: string | null;
    };
    /**
     * BankTransferBalanceGetResponse
     * @description Defines the response schema for `/bank_transfer/balance/get`
     */
    BankTransferBalanceGetResponse: {
      balance: components["schemas"]["BankTransferBalance"];
      /** @description The ID of the origination account that this balance belongs to. */
      origination_account_id: string | null;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferBalance
     * @description Information about the balance of a bank transfer
     */
    BankTransferBalance: {
      /** @description The total available balance - the sum of all successful debit transfer amounts minus all credit transfer amounts. */
      available: string;
      /** @description The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance. */
      transactable: string;
      [key: string]: unknown;
    };
    /**
     * TransferBalanceGetRequest
     * @description Defines the request schema for `/transfer/balance/get`
     */
    TransferBalanceGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      /**
       * @deprecated
       * @description Client ID of the end customer.
       */
      originator_client_id?: string | null;
      secret?: components["schemas"]["APISecret"];
      type?: components["schemas"]["TransferBalanceType"];
    };
    /**
     * TransferBalanceGetResponse
     * @description Defines the response schema for `/transfer/balance/get`
     */
    TransferBalanceGetResponse: {
      balance: components["schemas"]["TransferBalance"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferBalance
     * @description Information about the balance held with Plaid.
     */
    TransferBalance: {
      /** @description The amount of this balance available for use (decimal string with two digits of precision e.g. "10.00"). */
      available: string;
      /** @description The available balance, plus amount of pending funds that in processing (decimal string with two digits of precision e.g. "10.00"). */
      current?: string;
      type: components["schemas"]["TransferBalanceType"];
      [key: string]: unknown;
    };
    /**
     * TransferLedgerGetRequest
     * @description Defines the request schema for `/transfer/ledger/get`
     */
    TransferLedgerGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Client ID of the end customer. */
      originator_client_id?: string | null;
    };
    /**
     * TransferLedgerGetResponse
     * @description Defines the response schema for `/transfer/ledger/get`
     */
    TransferLedgerGetResponse: {
      balance: components["schemas"]["TransferLedgerBalance"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferLedgerDistributeRequest
     * @description Defines the request schema for `/transfer/ledger/distribute`
     */
    TransferLedgerDistributeRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The client to pull money from. Must be the platform itself or its originator. One of `from_client_id` and `to_client_id` must be the platform's `client_id`. */
      from_client_id: string;
      /** @description The client to credit money to. Must be the platform itself or its originator. One of `from_client_id` and `to_client_id` must be the platform's `client_id`. */
      to_client_id: string;
      /** @description The amount to move (decimal string with two digits of precision e.g. "10.00"). Amount must be positive. */
      amount: string;
      idempotency_key: components["schemas"]["LedgerDistributeIdempotencyKey"];
      /** @description An optional description for the ledger distribute operation. */
      description?: string;
    };
    /**
     * TransferLedgerDistributeResponse
     * @description Defines the response schema for `/transfer/ledger/distribute`
     */
    TransferLedgerDistributeResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferLedgerBalance
     * @description Information about the balance of the ledger held with Plaid.
     */
    TransferLedgerBalance: {
      /** @description The amount of this balance available for use (decimal string with two digits of precision e.g. "10.00"). */
      available: string;
      /** @description The amount of pending funds that are in processing (decimal string with two digits of precision e.g. "10.00"). */
      pending: string;
      [key: string]: unknown;
    };
    /**
     * TransferLedgerDepositRequest
     * @description Defines the request schema for `/transfer/ledger/deposit`
     */
    TransferLedgerDepositRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      originator_client_id?: components["schemas"]["TransferOriginatorClientID"];
      funding_account_id?: components["schemas"]["TransferLedgerFundingAccountIDRequest"];
      /** @description A positive amount of how much will be deposited into ledger (decimal string with two digits of precision e.g. "5.50"). */
      amount: string;
      description?: components["schemas"]["SweepDescription"];
      idempotency_key: components["schemas"]["LedgerDepositIdempotencyKey"];
      network: components["schemas"]["TransferACHNetwork"];
    };
    /**
     * TransferLedgerWithdrawRequest
     * @description Defines the request schema for `/transfer/ledger/withdraw`
     */
    TransferLedgerWithdrawRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      originator_client_id?: components["schemas"]["TransferOriginatorClientID"];
      funding_account_id?: components["schemas"]["TransferLedgerFundingAccountIDRequest"];
      /** @description A positive amount of how much will be withdrawn from the ledger balance (decimal string with two digits of precision e.g. "5.50"). */
      amount: string;
      description?: components["schemas"]["SweepDescription"];
      idempotency_key: components["schemas"]["LedgerWithdrawIdempotencyKey"];
      network: components["schemas"]["TransferNetwork"];
    };
    /**
     * TransferLedgerDepositResponse
     * @description Defines the response schema for `/transfer/ledger/deposit`
     */
    TransferLedgerDepositResponse: {
      sweep: components["schemas"]["TransferSweep"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferLedgerWithdrawResponse
     * @description Defines the response schema for `/transfer/ledger/withdraw`
     */
    TransferLedgerWithdrawResponse: {
      sweep: components["schemas"]["TransferSweep"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferBalanceType
     * @description The type of balance.
     *
     * `prefunded_rtp_credits` - Your prefunded RTP credit balance with Plaid
     * `prefunded_ach_credits` - Your prefunded ACH credit balance with Plaid
     * @enum {string}
     */
    TransferBalanceType: "prefunded_rtp_credits" | "prefunded_ach_credits";
    /**
     * TransferOriginatorFundingAccountUpdateRequest
     * @description Defines the request schema for `/transfer/originator/funding_account/update`
     */
    TransferOriginatorFundingAccountUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The Plaid client ID of the transfer originator. */
      originator_client_id: string;
      funding_account: components["schemas"]["TransferFundingAccount"];
    };
    /**
     * TransferOriginatorFundingAccountUpdateResponse
     * @description Defines the response schema for `/transfer/originator/funding_account/update`
     */
    TransferOriginatorFundingAccountUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BankTransferMigrateAccountRequest
     * @description Defines the request schema for `/bank_transfer/migrate_account`
     */
    BankTransferMigrateAccountRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The user's account number. */
      account_number: string;
      /** @description The user's routing number. */
      routing_number: string;
      /** @description The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
      wire_routing_number?: string;
      /** @description The type of the bank account (`checking` or `savings`). */
      account_type: string;
    };
    /**
     * BankTransferMigrateAccountResponse
     * @description Defines the response schema for `/bank_transfer/migrate_account`
     */
    BankTransferMigrateAccountResponse: {
      /** @description The Plaid `access_token` for the newly created Item. */
      access_token: string;
      /** @description The Plaid `account_id` for the newly created Item. */
      account_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferMigrateAccountRequest
     * @description Defines the request schema for `/transfer/migrate_account`
     */
    TransferMigrateAccountRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The user's account number. */
      account_number: string;
      /** @description The user's routing number. */
      routing_number: string;
      /** @description The user's wire transfer routing number. This is the ABA number; for some institutions, this may differ from the ACH number used in `routing_number`. */
      wire_routing_number?: string;
      /** @description The type of the bank account (`checking` or `savings`). */
      account_type: string;
    };
    /**
     * TransferMigrateAccountResponse
     * @description Defines the response schema for `/transfer/migrate_account`
     */
    TransferMigrateAccountResponse: {
      /** @description The Plaid `access_token` for the newly created Item. */
      access_token: string;
      /** @description The Plaid `account_id` for the newly created Item. */
      account_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferOriginatorCreateRequest
     * @description Defines the request schema for `/transfer/originator/create`
     */
    TransferOriginatorCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The company name of the end customer being created. This will be displayed in public-facing surfaces, e.g. Plaid Dashboard. */
      company_name: string;
    };
    /**
     * TransferOriginatorCreateResponse
     * @description Defines the response schema for `/transfer/originator/create`
     */
    TransferOriginatorCreateResponse: {
      /** @description Client ID of the originator. This identifier will be used when creating transfers and should be stored associated with end user information. */
      originator_client_id: string;
      /** @description The company name of the end customer. */
      company_name: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferQuestionnaireCreateRequest
     * @description Defines the request schema for `/transfer/questionnaire/create`
     */
    TransferQuestionnaireCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Client ID of the end customer. */
      originator_client_id: string;
      /** @description URL the end customer will be redirected to after completing questions in Plaid-hosted onboarding flow. */
      redirect_uri: string;
    };
    /**
     * TransferQuestionnaireCreateResponse
     * @description Defines the response schema for `/transfer/questionnaire/create`
     */
    TransferQuestionnaireCreateResponse: {
      /** @description Plaid-hosted onboarding URL that you will redirect the end customer to. */
      onboarding_url: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferDiligenceSubmitRequest
     * @description Defines the request schema for `/transfer/diligence/submit`
     */
    TransferDiligenceSubmitRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Client ID of the the originator whose diligence that you want to submit. */
      originator_client_id: string;
      originator_diligence: components["schemas"]["TransferOriginatorDiligence"];
    };
    /**
     * TransferDiligenceSubmitResponse
     * @description Defines the response schema for `/transfer/diligence/submit`
     */
    TransferDiligenceSubmitResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferDiligenceDocumentUploadRequest
     * @description Defines the request schema for `/transfer/diligence/document/upload`
     */
    TransferDiligenceDocumentUploadRequest: {
      /** @description The Client ID of the originator whose document that you want to upload. */
      originator_client_id: string;
      /**
       * Format: binary
       * @description A file to upload. The file size must be less than 20MB. Supported file extensions: .pdf.
       */
      file: string;
      purpose: components["schemas"]["TransferDocumentPurpose"];
    };
    /**
     * TransferDiligenceDocumentUploadResponse
     * @description Defines the response schema for `/transfer/diligence/document/upload`
     */
    TransferDiligenceDocumentUploadResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * purpose
     * @description Specifies the purpose of the uploaded file.
     *
     * `"DUE_DILIGENCE"` - The transfer due diligence document of the originator.
     * @enum {string}
     */
    TransferDocumentPurpose: "DUE_DILIGENCE";
    /** @description The diligence information for the originator. */
    TransferOriginatorDiligence: {
      /** @description The business name of the originator. */
      dba: string;
      /** @description The tax ID of the originator. */
      tax_id: string;
      credit_usage_configuration?: components["schemas"]["TransferCreditUsageConfiguration"];
      debit_usage_configuration?: components["schemas"]["TransferDebitUsageConfiguration"];
      address: components["schemas"]["TransferOriginatorAddress"];
      /** @description The website of the originator. */
      website: string;
      /** @description The NAICS code of the originator. */
      naics_code: string;
      funding_account: components["schemas"]["TransferFundingAccount"];
    };
    /** @description The originator's address. */
    TransferOriginatorAddress: {
      /** @description The full city name. */
      city: string;
      /** @description The full street address. */
      street: string;
      /** @description The two-letter code for the state or province (e.g., "CA"). */
      region: string;
      /** @description The postal code (e.g., "94103"). */
      postal_code: string;
      /** @description ISO-3166-1 alpha-2 country code standard. */
      country_code: string;
    };
    /** @description Specifies the originator's expected usage of credits. For all dollar amounts, use a decimal string with two digits of precision e.g. "10.00". This field is required if the originator is expected to process credit transfers. */
    TransferCreditUsageConfiguration: {
      expected_frequency: components["schemas"]["OriginatorExpectedTransferFrequency"];
      /** @description The originator’s expected highest amount for a single credit transfer. */
      expected_highest_amount: string;
      /** @description The originator’s expected average amount per credit. */
      expected_average_amount: string;
      /** @description The originator’s monthly expected ACH credit processing amount for the next 6-12 months. */
      expected_monthly_amount: string;
      /**
       * @description Specifies the expected use cases for the originator’s credit transfers. This should be a list that contains one or more of the following codes:
       *
       * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
       *
       * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, e.g. bill payment
       *
       * `"web"` - A credit Entry initiated by or on behalf of a holder of a Consumer Account that is intended for a Consumer Account of a Receiver
       */
      sec_codes: components["schemas"]["CreditACHClass"][];
    } | null;
    /**
     * CreditACHClass
     * @description Specifies the use case of the transfer. Required for transfers on an ACH network.
     *
     * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
     *
     * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
     *
     * `"web"` - A credit Entry initiated by or on behalf of a holder of a Consumer Account that is intended for a Consumer Account of a Receiver
     * @enum {string}
     */
    CreditACHClass: "ccd" | "ppd" | "web";
    /** @description Specifies the originator's expected usage of debits. For all dollar amounts, use a decimal string with two digits of precision e.g. "10.00". This field is required if the originator is expected to process debit transfers. */
    TransferDebitUsageConfiguration: {
      expected_frequency: components["schemas"]["OriginatorExpectedTransferFrequency"];
      /** @description The originator’s expected highest amount for a single debit transfer. */
      expected_highest_amount: string;
      /** @description The originator’s expected average amount per debit. */
      expected_average_amount: string;
      /** @description The originator’s monthly expected ACH debit processing amount for the next 6-12 months. */
      expected_monthly_amount: string;
      /**
       * @description Specifies the expected use cases for the originator’s debit transfers. This should be a list that contains one or more of the following codes:
       *
       * `"ccd"` - Corporate Credit or Debit - fund transfer between two corporate bank accounts
       *
       * `"ppd"` - Prearranged Payment or Deposit - the transfer is part of a pre-existing relationship with a consumer, eg. bill payment
       *
       * `"tel"` - Telephone-Initiated Entry
       *
       * `"web"` - Internet-Initiated Entry - debits from a consumer’s account where their authorization is obtained over the Internet
       */
      sec_codes: components["schemas"]["ACHClass"][];
    } | null;
    /**
     * OriginatorExpectedTransferFrequency
     * @description The originator's expected transfer frequency.
     * @enum {string}
     */
    OriginatorExpectedTransferFrequency: "once_per_month" | "twice_per_month" | "once_per_week" | "daily";
    /**
     * TransferFundingAccount
     * @description The originator's funding account, linked with Plaid Link or `/transfer/migrate_account`.
     */
    TransferFundingAccount: {
      access_token: components["schemas"]["AccessToken"];
      /** @description The Plaid `account_id` for the newly created Item. */
      account_id: string;
    };
    /**
     * TransferOriginatorGetRequest
     * @description Defines the request schema for `/transfer/originator/get`
     */
    TransferOriginatorGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Client ID of the end customer (i.e. the originator). */
      originator_client_id: string;
    };
    /**
     * TransferOriginatorGetResponse
     * @description Defines the response schema for `/transfer/originator/get`
     */
    TransferOriginatorGetResponse: {
      originator: components["schemas"]["DetailedOriginator"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferOriginatorListRequest
     * @description Defines the request schema for `/transfer/originator/list`
     */
    TransferOriginatorListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @description The maximum number of originators to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of originators to skip before returning results.
       * @default 0
       */
      offset?: number | null;
    };
    /**
     * TransferOriginatorListResponse
     * @description Defines the response schema for `/transfer/originator/list`
     */
    TransferOriginatorListResponse: {
      originators: components["schemas"]["Originator"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRepaymentListRequest
     * @description Defines the request schema for `/transfer/repayment/list`
     */
    TransferRepaymentListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start datetime of repayments to return (RFC 3339 format).
       */
      start_date?: string | null;
      /**
       * Format: date-time
       * @description The end datetime of repayments to return (RFC 3339 format).
       */
      end_date?: string | null;
      /**
       * @description The maximum number of repayments to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of repayments to skip before returning results.
       * @default 0
       */
      offset?: number;
    };
    /**
     * TransferRepaymentListResponse
     * @description Defines the response schema for `/transfer/repayments/list`
     */
    TransferRepaymentListResponse: {
      repayments: components["schemas"]["TransferRepayment"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRepayment
     * @description A repayment is created automatically after one or more guaranteed transactions receive a return. If there are multiple eligible returns in a day, they are batched together into a single repayment.
     *
     * Repayments are sent over ACH, with funds typically available on the next banking day.
     */
    TransferRepayment: {
      /** @description Identifier of the repayment. */
      repayment_id: string;
      /**
       * Format: date-time
       * @description The datetime when the repayment occurred, in RFC 3339 format.
       */
      created: string;
      /** @description Decimal amount of the repayment as it appears on your account ledger. */
      amount: string;
      /** @description The currency of the repayment, e.g. "USD". */
      iso_currency_code: string;
      [key: string]: unknown;
    };
    /**
     * TransferRepaymentReturnListRequest
     * @description Defines the request schema for `/transfer/repayment/return/list`
     */
    TransferRepaymentReturnListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Identifier of the repayment to query. */
      repayment_id: string;
      /**
       * @description The maximum number of repayments to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of repayments to skip before returning results.
       * @default 0
       */
      offset?: number;
    };
    /**
     * TransferRepaymentReturnListResponse
     * @description Defines the response schema for `/transfer/repayments/return/list`
     */
    TransferRepaymentReturnListResponse: {
      repayment_returns: components["schemas"]["TransferRepaymentReturn"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRepaymentReturn
     * @description Represents a return on a Guaranteed ACH transfer that is included in the specified repayment.
     */
    TransferRepaymentReturn: {
      /** @description The unique identifier of the guaranteed transfer that was returned. */
      transfer_id: string;
      /** @description The unique identifier of the corresponding `returned` transfer event. */
      event_id: number;
      /** @description The value of the returned transfer. */
      amount: string;
      /** @description The currency of the repayment, e.g. "USD". */
      iso_currency_code: string;
      [key: string]: unknown;
    };
    /**
     * TransferIntentCreateRequest
     * @description Defines the request schema for `/transfer/intent/create`
     */
    TransferIntentCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The Plaid `account_id` corresponding to the end-user account that will be debited or credited. */
      account_id?: string | null;
      funding_account_id?: components["schemas"]["TransferUnmigratedFundingAccountIDRequest"];
      mode: components["schemas"]["TransferIntentCreateMode"];
      network?: components["schemas"]["TransferIntentCreateNetwork"];
      amount: components["schemas"]["TransferAmount"];
      /** @description A description for the underlying transfer. Maximum of 8 characters. */
      description: string;
      ach_class?: components["schemas"]["ACHClass"];
      /**
       * @deprecated
       * @description Plaid’s unique identifier for the origination account for the intent. If not provided, the default account will be used.
       */
      origination_account_id?: string | null;
      user: components["schemas"]["TransferUserInRequest"];
      metadata?: components["schemas"]["TransferMetadata"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code?: string;
      /**
       * @description When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only).
       * @default false
       */
      require_guarantee?: boolean | null;
    };
    /**
     * @description The status of the transfer intent.
     *
     * `PENDING`: The transfer intent is pending.
     * `SUCCEEDED`: The transfer intent was successfully created.
     * `FAILED`: The transfer intent was unable to be created.
     * @enum {string}
     */
    TransferIntentStatus: "PENDING" | "SUCCEEDED" | "FAILED";
    /**
     * TransferIntentCreate
     * @description Represents a transfer intent within Transfer UI.
     */
    TransferIntentCreate: {
      /** @description Plaid's unique identifier for the transfer intent object. */
      id: string;
      /**
       * Format: date-time
       * @description The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
       */
      created: string;
      status: components["schemas"]["TransferIntentStatus"];
      /** @description The Plaid `account_id` corresponding to the end-user account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
      account_id?: string | null;
      /**
       * @deprecated
       * @description Plaid’s unique identifier for the origination account for the intent. If not provided, the default account will be used.
       */
      origination_account_id: string;
      funding_account_id: components["schemas"]["TransferFundingAccountIDResponse"];
      amount: components["schemas"]["TransferAmount"];
      mode: components["schemas"]["TransferIntentCreateMode"];
      network?: components["schemas"]["TransferIntentCreateNetwork"];
      ach_class?: components["schemas"]["ACHClass"];
      user: components["schemas"]["TransferUserInResponse"];
      /** @description A description for the underlying transfer. Maximum of 8 characters. */
      description: string;
      metadata?: components["schemas"]["TransferMetadata"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /** @description When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
      require_guarantee?: boolean | null;
      [key: string]: unknown;
    };
    /**
     * TransferIntentCreateResponse
     * @description Defines the response schema for `/transfer/intent/create`
     */
    TransferIntentCreateResponse: {
      transfer_intent: components["schemas"]["TransferIntentCreate"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferIntentGetRequest
     * @description Defines the request schema for `/transfer/intent/get`
     */
    TransferIntentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Plaid's unique identifier for a transfer intent object. */
      transfer_intent_id: string;
      [key: string]: unknown;
    };
    /**
     * @description
     * A decision regarding the proposed transfer.
     *
     * `APPROVED` – The proposed transfer has received the end user's consent and has been approved for processing by Plaid. The `decision_rationale` field is set if Plaid was unable to fetch the account information. You may proceed with the transfer, but further review is recommended (i.e., use Link in update to re-authenticate your user when `decision_rationale.code` is `ITEM_LOGIN_REQUIRED`). Refer to the `code` field in the `decision_rationale` object for details.
     *
     * `DECLINED` – Plaid reviewed the proposed transfer and declined processing. Refer to the `code` field in the `decision_rationale` object for details.
     * @enum {string|null}
     */
    TransferIntentAuthorizationDecision: "APPROVED" | "DECLINED" | null;
    /**
     * TransferIntentGet
     * @description Represents a transfer intent within Transfer UI.
     */
    TransferIntentGet: {
      /** @description Plaid's unique identifier for a transfer intent object. */
      id: string;
      /**
       * Format: date-time
       * @description The datetime the transfer was created. This will be of the form `2006-01-02T15:04:05Z`.
       */
      created: string;
      status: components["schemas"]["TransferIntentStatus"];
      /** @description Plaid's unique identifier for the transfer created through the UI. Returned only if the transfer was successfully created. Null value otherwise. */
      transfer_id: string | null;
      failure_reason: components["schemas"]["TransferIntentGetFailureReason"];
      authorization_decision: components["schemas"]["TransferIntentAuthorizationDecision"];
      authorization_decision_rationale: components["schemas"]["TransferAuthorizationDecisionRationale"];
      /** @description The Plaid `account_id` for the account that will be debited or credited. Returned only if `account_id` was set on intent creation. */
      account_id?: string | null;
      /**
       * @deprecated
       * @description Plaid’s unique identifier for the origination account used for the transfer.
       */
      origination_account_id: string;
      funding_account_id: components["schemas"]["TransferFundingAccountIDResponse"];
      amount: components["schemas"]["TransferAmount"];
      mode: components["schemas"]["TransferIntentCreateMode"];
      network?: components["schemas"]["TransferIntentCreateNetwork"];
      ach_class?: components["schemas"]["ACHClass"];
      user: components["schemas"]["TransferUserInResponse"];
      /** @description A description for the underlying transfer. Maximum of 8 characters. */
      description: string;
      metadata?: components["schemas"]["TransferMetadata"];
      /** @description The currency of the transfer amount, e.g. "USD" */
      iso_currency_code: string;
      /** @description When `true`, the transfer requires a `GUARANTEED` decision by Plaid to proceed (Guarantee customers only). */
      require_guarantee?: boolean | null;
      guarantee_decision: components["schemas"]["TransferAuthorizationGuaranteeDecision"];
      guarantee_decision_rationale: components["schemas"]["TransferAuthorizationGuaranteeDecisionRationale"];
      [key: string]: unknown;
    };
    /**
     * TransferIntentGetResponse
     * @description Defines the response schema for `/transfer/intent/get`
     */
    TransferIntentGetResponse: {
      transfer_intent: components["schemas"]["TransferIntentGet"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRefundCreateRequest
     * @description Defines the request schema for `/transfer/refund/create`
     */
    TransferRefundCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      transfer_id: components["schemas"]["TransferIDForRefund"];
      amount: components["schemas"]["TransferRefundAmount"];
      idempotency_key: components["schemas"]["TransferRefundIdempotencyKey"];
    };
    /**
     * TransferRefundCreateResponse
     * @description Defines the response schema for `/transfer/refund/create`
     */
    TransferRefundCreateResponse: {
      refund: components["schemas"]["TransferRefund"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRefundFailure
     * @description The failure reason if the event type for a refund is `"failed"` or `"returned"`. Null value otherwise.
     */
    TransferRefundFailure: ({
      /** @description The ACH return code, e.g. `R01`.  A return code will be provided if and only if the refund status is `returned`. For a full listing of ACH return codes, see [Transfer errors](https://plaid.com/docs/errors/transfer/#ach-return-codes). */
      ach_return_code?: string | null;
      /** @description A human-readable description of the reason for the failure or reversal. */
      description?: string;
      [key: string]: unknown;
    }) | null;
    /**
     * TransferRefund
     * @description Represents a refund within the Transfers API.
     */
    TransferRefund: {
      id: components["schemas"]["TransferRefundID"];
      transfer_id: components["schemas"]["TransferIDForRefund"];
      amount: components["schemas"]["TransferRefundAmount"];
      status: components["schemas"]["TransferRefundStatus"];
      failure_reason: components["schemas"]["TransferRefundFailure"];
      /**
       * Format: date-time
       * @description The datetime when this refund was created. This will be of the form `2006-01-02T15:04:05Z`
       */
      created: string;
      network_trace_id?: components["schemas"]["TransferNetworkTraceID"];
      [key: string]: unknown;
    };
    /**
     * TransferRefundGetRequest
     * @description Defines the request schema for `/transfer/refund/get`
     */
    TransferRefundGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      refund_id: components["schemas"]["TransferRefundID"];
    };
    /**
     * TransferRefundCreateResponse
     * @description Defines the response schema for `/transfer/refund/get`
     */
    TransferRefundGetResponse: {
      refund: components["schemas"]["TransferRefund"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * TransferRefundCancelRequest
     * @description Defines the request schema for `/transfer/refund/cancel`
     */
    TransferRefundCancelRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      refund_id: components["schemas"]["TransferRefundID"];
    };
    /**
     * TransferRefundCancelResponse
     * @description Defines the response schema for `/transfer/refund/cancel`
     */
    TransferRefundCancelResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxBankTransferSimulateRequest
     * @description Defines the request schema for `/sandbox/bank_transfer/simulate`
     */
    SandboxBankTransferSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      bank_transfer_id: components["schemas"]["BankTransferID"];
      /**
       * @description The asynchronous event to be simulated. May be: `posted`, `failed`, or `reversed`.
       *
       * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
       *
       * `pending` --> `failed`
       *
       * `pending` --> `posted`
       *
       * `posted` --> `reversed`
       */
      event_type: string;
      failure_reason?: components["schemas"]["BankTransferFailure"];
    };
    /**
     * SandboxTransferSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/simulate`
     */
    SandboxTransferSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      transfer_id: components["schemas"]["TransferID"];
      /** @description Plaid’s unique identifier for a test clock. If provided, the event to be simulated is created at the `virtual_time` on the provided `test_clock`. */
      test_clock_id?: string | null;
      /**
       * @description The asynchronous event to be simulated. May be: `posted`, `settled`, `failed`, or `returned`.
       *
       * An error will be returned if the event type is incompatible with the current transfer status. Compatible status --> event type transitions include:
       *
       * `pending` --> `failed`
       *
       * `pending` --> `posted`
       *
       * `posted` --> `returned`
       *
       * `posted` --> `settled`
       */
      event_type: string;
      failure_reason?: components["schemas"]["TransferFailure"];
    };
    /**
     * SandboxTransferRefundSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/refund/simulate`
     */
    SandboxTransferRefundSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      refund_id: components["schemas"]["TransferRefundID"];
      /** @description Plaid’s unique identifier for a test clock. If provided, the event to be simulated is created at the `virtual_time` on the provided `test_clock`. */
      test_clock_id?: string | null;
      /**
       * @description The asynchronous event to be simulated. May be: `refund.posted`, `refund.settled`, `refund.failed`, or `refund.returned`.
       *
       * An error will be returned if the event type is incompatible with the current refund status. Compatible status --> event type transitions include:
       *
       * `refund.pending` --> `refund.failed`
       *
       * `refund.pending` --> `refund.posted`
       *
       * `refund.posted` --> `refund.returned`
       *
       * `refund.posted` --> `refund.settled`
       *
       * `refund.posted` events can only be simulated if the refunded transfer has been transitioned to settled. This mimics the ordering of events in Production.
       */
      event_type: string;
      failure_reason?: components["schemas"]["TransferFailure"];
    };
    /**
     * SandboxTransferLedgerDepositSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/ledger/deposit/simulate`
     */
    SandboxTransferLedgerDepositSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      sweep_id: components["schemas"]["TransferSweepID"];
      event_type: components["schemas"]["TransferLedgerSweepSimulateEventType"];
      failure_reason?: components["schemas"]["TransferFailure"];
    };
    /**
     * SandboxTransferLedgerWithdrawSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/ledger/withdraw/simulate`
     */
    SandboxTransferLedgerWithdrawSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      sweep_id: components["schemas"]["TransferSweepID"];
      event_type: components["schemas"]["TransferLedgerSweepSimulateEventType"];
      failure_reason?: components["schemas"]["TransferFailure"];
    };
    /**
     * SandboxTransferSweepSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/sweep/simulate`
     */
    SandboxTransferSweepSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Plaid’s unique identifier for a test clock. If provided, the sweep to be simulated is created on the day of the `virtual_time` on the `test_clock`. If the date of `virtual_time` is on weekend or a federal holiday, the next available banking day is used. */
      test_clock_id?: string | null;
    };
    /**
     * SandboxTransferLedgerSimulateAvailableRequest
     * @description Defines the request schema for `/sandbox/transfer/ledger/simulate_available`
     */
    SandboxTransferLedgerSimulateAvailableRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Plaid’s unique identifier for a test clock. If provided, only the pending balance that is due before the `virtual_timestamp` on the test clock will be converted. */
      test_clock_id?: string | null;
    };
    /**
     * SandboxTransferTestClockCreateRequest
     * @description Defines the request schema for `/sandbox/transfer/test_clock/create`
     */
    SandboxTransferTestClockCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * VirtualTime
       * Format: date-time
       * @description The virtual timestamp on the test clock. If not provided, the current timestamp will be used. This will be of the form `2006-01-02T15:04:05Z`.
       */
      virtual_time?: string | null;
    };
    /**
     * SandboxTransferTestClockAdvanceRequest
     * @description Defines the request schema for `/sandbox/transfer/test_clock/advance`
     */
    SandboxTransferTestClockAdvanceRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      test_clock_id: components["schemas"]["TransferTestClockID"];
      new_virtual_time: components["schemas"]["VirtualTime"];
    };
    /**
     * SandboxTransferTestClockGetRequest
     * @description Defines the request schema for `/sandbox/transfer/test_clock/get`
     */
    SandboxTransferTestClockGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      test_clock_id: components["schemas"]["TransferTestClockID"];
    };
    /**
     * SandboxTransferTestClockListRequest
     * @description Defines the request schema for `/sandbox/transfer/test_clock/list`
     */
    SandboxTransferTestClockListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date-time
       * @description The start virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      start_virtual_time?: string | null;
      /**
       * Format: date-time
       * @description The end virtual timestamp of test clocks to return. This should be in RFC 3339 format (i.e. `2019-12-06T22:35:49Z`)
       */
      end_virtual_time?: string | null;
      /**
       * @description The maximum number of test clocks to return.
       * @default 25
       */
      count?: number | null;
      /**
       * @description The number of test clocks to skip before returning results.
       * @default 0
       */
      offset?: number;
    };
    /**
     * SandboxBankTransferSimulateResponse
     * @description Defines the response schema for `/sandbox/bank_transfer/simulate`
     */
    SandboxBankTransferSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/simulate`
     */
    SandboxTransferSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferRefundSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/refund/simulate`
     */
    SandboxTransferRefundSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferLedgerSimulateAvailableResponse
     * @description Defines the response schema for `/sandbox/transfer/ledger/simulate_available`
     */
    SandboxTransferLedgerSimulateAvailableResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferLedgerDepositSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/ledger/deposit/simulate`
     */
    SandboxTransferLedgerDepositSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferLedgerWithdrawSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/ledger/withdraw/simulate`
     */
    SandboxTransferLedgerWithdrawSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferSweepSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/sweep/simulate`
     */
    SandboxTransferSweepSimulateResponse: {
      sweep?: components["schemas"]["SimulatedTransferSweep"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferTestClockCreateResponse
     * @description Defines the response schema for `/sandbox/transfer/test_clock/create`
     */
    SandboxTransferTestClockCreateResponse: {
      test_clock: components["schemas"]["TransferTestClock"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferTestClockAdvanceResponse
     * @description Defines the response schema for `/sandbox/transfer/test_clock/advance`
     */
    SandboxTransferTestClockAdvanceResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferTestClockGetResponse
     * @description Defines the response schema for `/sandbox/transfer/test_clock/get`
     */
    SandboxTransferTestClockGetResponse: {
      test_clock: components["schemas"]["TransferTestClock"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferTestClockListResponse
     * @description Defines the response schema for `/sandbox/transfer/test_clock/list`
     */
    SandboxTransferTestClockListResponse: {
      test_clocks: components["schemas"]["TransferTestClock"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferRepaymentSimulateRequest
     * @description Defines the request schema for `/sandbox/transfer/repayment/simulate`
     */
    SandboxTransferRepaymentSimulateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * SandboxTransferSimulateResponse
     * @description Defines the response schema for `/sandbox/transfer/repayment/simulate`
     */
    SandboxTransferRepaymentSimulateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * AccountFiltersResponse
     * @description The `account_filters` specified in the original call to `/link/token/create`.
     */
    AccountFiltersResponse: {
      depository?: components["schemas"]["DepositoryFilter"];
      credit?: components["schemas"]["CreditFilter"];
      loan?: components["schemas"]["LoanFilter"];
      investment?: components["schemas"]["InvestmentFilter"];
      [key: string]: unknown;
    };
    /**
     * InstitutionsSearchAccountFilter
     * @description An account filter to apply to institutions search requests
     */
    InstitutionsSearchAccountFilter: {
      loan?: components["schemas"]["AccountSubtype"][];
      depository?: components["schemas"]["AccountSubtype"][];
      credit?: components["schemas"]["AccountSubtype"][];
      investment?: components["schemas"]["AccountSubtype"][];
      [key: string]: unknown;
    };
    /**
     * AccountIdentity
     * @description Identity information about an account
     */
    AccountIdentity: components["schemas"]["AccountBase"] & {
      /** @description Data returned by the financial institution about the account owner or owners. Only returned by Identity or Assets endpoints. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution; detecting whether the linked account is a business account is not currently supported. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29) */
      owners: components["schemas"]["Owner"][];
      [key: string]: unknown;
    };
    /**
     * AccountIdentityMatchScore
     * @description Identity match scores for an account
     */
    AccountIdentityMatchScore: components["schemas"]["AccountBase"] & {
      legal_name?: components["schemas"]["NameMatchScore"];
      phone_number?: components["schemas"]["PhoneNumberMatchScore"];
      email_address?: components["schemas"]["EmailAddressMatchScore"];
      address?: components["schemas"]["AddressMatchScore"];
      [key: string]: unknown;
    };
    /**
     * NameMatchScore
     * @description Score found by matching name provided by the API with the name on the account at the financial institution. If the account contains multiple owners, the maximum match score is filled.
     */
    NameMatchScore: ({
      /** @description Match score for name. 100 is a perfect score, 99-85 means a strong match, 84-70 is a partial match, any score less than 70 is a mismatch. Typically, the match threshold should be set to a score of 70 or higher. If the name is missing from either the API or financial institution, this is null. */
      score?: number | null;
      /** @description first or last name completely matched, likely a family member */
      is_first_name_or_last_name_match?: boolean | null;
      /** @description nickname matched, example Jennifer and Jenn. */
      is_nickname_match?: boolean | null;
      /**
       * @deprecated
       * @description Is `true` if the name on either of the names that was matched for the score contained strings indicative of a business name, such as "CORP", "LLC", "INC", or "LTD". A `true` result generally indicates the entity is a business. However, a `false` result does not mean the entity is not a business, as some businesses do not use these strings in the names used for their financial institution accounts.
       */
      is_business_name_detected?: boolean | null;
      [key: string]: unknown;
    }) | null;
    /**
     * PhoneNumberMatchScore
     * @description Score found by matching phone number provided by the API with the phone number on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled.
     */
    PhoneNumberMatchScore: ({
      /** @description Match score for normalized phone number. 100 is a perfect match, 99-70 is a partial match (matching the same phone number with extension against one without extension, etc.), anything below 70 is considered a mismatch. Typically, the match threshold should be set to a score of 70 or higher. If the phone number is missing from either the API or financial institution, this is null. */
      score?: number | null;
      [key: string]: unknown;
    }) | null;
    /**
     * EmailAddressMatchScore
     * @description Score found by matching email provided by the API with the email on the account at the financial institution. 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled.
     */
    EmailAddressMatchScore: ({
      /** @description Match score for normalized email. 100 is a perfect match, 99-70 is a partial match (matching the same email with different '+' extensions), anything below 70 is considered a mismatch. Typically, the match threshold should be set to a score of 70 or higher. If the email is missing from either the API or financial institution, this is null. */
      score?: number | null;
      [key: string]: unknown;
    }) | null;
    /**
     * AddressMatchScore
     * @description Score found by matching address provided by the API with the address on the account at the financial institution. The score can range from 0 to 100 where 100 is a perfect match and 0 is a no match. If the account contains multiple owners, the maximum match score is filled.
     */
    AddressMatchScore: ({
      /** @description Match score for address. 100 is a perfect match, 99-90 is a strong match, 89-70 is a partial match, anything below 70 is considered a weak match. Typically, the match threshold should be set to a score of 70 or higher. If the address is missing from either the API or financial institution, this is null. */
      score?: number | null;
      /** @description postal code was provided for both and was a match */
      is_postal_code_match?: boolean | null;
      [key: string]: unknown;
    }) | null;
    /**
     * DepositoryFilter
     * @description A filter to apply to `depository`-type accounts
     */
    DepositoryFilter: {
      account_subtypes: components["schemas"]["DepositoryAccountSubtypes"];
      [key: string]: unknown;
    };
    /**
     * CreditFilter
     * @description A filter to apply to `credit`-type accounts
     */
    CreditFilter: {
      account_subtypes: components["schemas"]["CreditAccountSubtypes"];
      [key: string]: unknown;
    };
    /**
     * LoanFilter
     * @description A filter to apply to `loan`-type accounts
     */
    LoanFilter: {
      account_subtypes: components["schemas"]["LoanAccountSubtypes"];
      [key: string]: unknown;
    };
    /**
     * InvestmentFilter
     * @description A filter to apply to `investment`-type accounts (or `brokerage`-type accounts for API versions 2018-05-22 and earlier).
     */
    InvestmentFilter: {
      account_subtypes: components["schemas"]["InvestmentAccountSubtypes"];
      [key: string]: unknown;
    };
    /**
     * OtherFilter
     * @description A filter to apply to `other`-type accounts
     */
    OtherFilter: {
      account_subtypes: components["schemas"]["OtherAccountSubtypes"];
      [key: string]: unknown;
    };
    /**
     * DepositoryAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    DepositoryAccountSubtypes: components["schemas"]["DepositoryAccountSubtype"][];
    /**
     * CreditAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    CreditAccountSubtypes: components["schemas"]["CreditAccountSubtype"][];
    /**
     * LoanAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    LoanAccountSubtypes: components["schemas"]["LoanAccountSubtype"][];
    /**
     * InvestmentAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    InvestmentAccountSubtypes: components["schemas"]["InvestmentAccountSubtype"][];
    /**
     * OtherAccountSubtypes
     * @description An array of account subtypes to display in Link. If not specified, all account subtypes will be shown. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema).
     */
    OtherAccountSubtypes: components["schemas"]["OtherAccountSubtype"][];
    /**
     * @description Valid account subtypes for depository accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-depository).
     * @enum {string}
     */
    DepositoryAccountSubtype: "checking" | "savings" | "hsa" | "cd" | "money market" | "paypal" | "prepaid" | "cash management" | "ebt" | "all";
    /**
     * @description Valid account subtypes for credit accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-credit).
     * @enum {string}
     */
    CreditAccountSubtype: "credit card" | "paypal" | "all";
    /**
     * @description Valid account subtypes for loan accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-loan).
     * @enum {string}
     */
    LoanAccountSubtype: "auto" | "business" | "commercial" | "construction" | "consumer" | "home equity" | "loan" | "mortgage" | "line of credit" | "student" | "other" | "all";
    /**
     * @description Valid account subtypes for investment accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-investment).
     * @enum {string}
     */
    InvestmentAccountSubtype: "529" | "401a" | "401k" | "403B" | "457b" | "brokerage" | "cash isa" | "crypto exchange" | "education savings account" | "fixed annuity" | "gic" | "health reimbursement arrangement" | "hsa" | "ira" | "isa" | "keogh" | "lif" | "life insurance" | "lira" | "lrif" | "lrsp" | "mutual fund" | "non-custodial wallet" | "non-taxable brokerage account" | "other" | "other annuity" | "other insurance" | "pension" | "prif" | "profit sharing plan" | "qshr" | "rdsp" | "resp" | "retirement" | "rlif" | "roth" | "roth 401k" | "rrif" | "rrsp" | "sarsep" | "sep ira" | "simple ira" | "sipp" | "stock plan" | "tfsa" | "trust" | "ugma" | "utma" | "variable annuity" | "all";
    /**
     * @description Valid account subtypes for other accounts. For a list containing descriptions of each subtype, see [Account schemas](https://plaid.com/docs/api/accounts/#StandaloneAccountType-other).
     * @enum {string}
     */
    OtherAccountSubtype: "other" | "all";
    /**
     * EmployersSearchRequest
     * @description EmployersSearchRequest defines the request schema for `/employers/search`.
     */
    EmployersSearchRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The employer name to be searched for. */
      query: string;
      /** @description The Plaid products the returned employers should support. Currently, this field must be set to `"deposit_switch"`. */
      products: string[];
    };
    /**
     * EmployersSearchResponse
     * @description EmployersSearchResponse defines the response schema for `/employers/search`.
     */
    EmployersSearchResponse: {
      /** @description A list of employers matching the search criteria. */
      employers: components["schemas"]["Employer"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * Employer
     * @description Data about the employer.
     */
    Employer: {
      /** @description Plaid's unique identifier for the employer. */
      employer_id: string;
      /** @description The name of the employer */
      name: string;
      address: components["schemas"]["AddressDataNullable"];
      /**
       * Format: double
       * @description A number from 0 to 1 indicating Plaid's level of confidence in the pairing between the employer and the institution (not yet implemented).
       */
      confidence_score: number;
      [key: string]: unknown;
    };
    /**
     * IncomeVerificationCreateRequest
     * @description IncomeVerificationCreateRequest defines the request schema for `/income/verification/create`
     */
    IncomeVerificationCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The URL endpoint to which Plaid should send webhooks related to the progress of the income verification process. */
      webhook: string;
      /** @description The ID of a precheck created with `/income/verification/precheck`. Will be used to improve conversion of the income verification flow. */
      precheck_id?: string;
      options?: components["schemas"]["IncomeVerificationCreateRequestOptions"];
    };
    /**
     * IncomeVerificationCreateRequestOptions
     * @description Optional arguments for `/income/verification/create`
     */
    IncomeVerificationCreateRequestOptions: {
      /** @description An array of access tokens corresponding to the Items that will be cross-referenced with the product data. Plaid will attempt to correlate transaction history from these Items with data from the user's paystub, such as date and amount. If the `transactions` product was not initialized for the Items during Link, it will be initialized after this Link session. */
      access_tokens?: components["schemas"]["AccessToken"][];
    };
    /**
     * IncomeVerificationCreateResponse
     * @description IncomeVerificationCreateResponse defines the response schema for `/income/verification/create`.
     */
    IncomeVerificationCreateResponse: {
      /** @description ID of the verification. This ID is persisted throughout the lifetime of the verification. */
      income_verification_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * IncomeVerificationPrecheckRequest
     * @description IncomeVerificationPrecheckRequest defines the request schema for `/income/verification/precheck`
     */
    IncomeVerificationPrecheckRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user?: components["schemas"]["IncomeVerificationPrecheckUser"];
      employer?: components["schemas"]["IncomeVerificationPrecheckEmployer"];
      payroll_institution?: components["schemas"]["IncomeVerificationPrecheckPayrollInstitution"];
      /** @deprecated */
      transactions_access_token?: components["schemas"]["AccessTokenNullable"];
      /** @description An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
      transactions_access_tokens?: components["schemas"]["AccessToken"][];
      us_military_info?: components["schemas"]["IncomeVerificationPrecheckMilitaryInfo"];
    };
    /**
     * IncomeVerificationPrecheckEmployer
     * @description Information about the end user's employer
     */
    IncomeVerificationPrecheckEmployer: ({
      /** @description The employer's name */
      name?: string | null;
      address?: components["schemas"]["IncomeVerificationPrecheckEmployerAddress"];
      /** @description The employer's tax id */
      tax_id?: string | null;
      /** @description The URL for the employer's public website */
      url?: string | null;
    }) | null;
    /**
     * IncomeVerificationPrecheckEmployerAddress
     * @description The address of the employer
     */
    IncomeVerificationPrecheckEmployerAddress: (components["schemas"]["IncomeVerificationPrecheckEmployerAddressData"] & {
      [key: string]: unknown;
    }) | null;
    /**
     * IncomeVerificationPrecheckPayrollInstitution
     * @description Information about the end user's payroll institution
     */
    IncomeVerificationPrecheckPayrollInstitution: ({
      /** @description The name of payroll institution */
      name?: string | null;
    }) | null;
    /**
     * AddressData
     * @description Data about the components comprising an address.
     */
    IncomeVerificationPrecheckEmployerAddressData: {
      /** @description The full city name */
      city?: string;
      /** @description The ISO 3166-1 alpha-2 country code */
      country?: string;
      /** @description The postal code. In API versions 2018-05-22 and earlier, this field is called `zip`. */
      postal_code?: string;
      /**
       * @description The region or state. In API versions 2018-05-22 and earlier, this field is called `state`.
       * Example: `"NC"`
       */
      region?: string;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street?: string;
      [key: string]: unknown;
    };
    /**
     * IncomeVerificationPrecheckMilitaryInfo
     * @description Data about military info in the income verification precheck.
     */
    IncomeVerificationPrecheckMilitaryInfo: ({
      /** @description Is the user currently active duty in the US military */
      is_active_duty?: boolean | null;
      /**
       * @description If the user is currently serving in the US military, the branch of the military in which they are serving
       * Valid values: 'AIR FORCE', 'ARMY', 'COAST GUARD', 'MARINES', 'NAVY', 'UNKNOWN'
       */
      branch?: string | null;
    }) | null;
    /**
     * IncomeVerificationPrecheckUser
     * @description Information about the user whose eligibility is being evaluated.
     */
    IncomeVerificationPrecheckUser: ({
      /** @description The user's first name */
      first_name?: string | null;
      /** @description The user's last name */
      last_name?: string | null;
      /** @description The user's email address */
      email_address?: string | null;
      home_address?: components["schemas"]["SignalAddressData"];
    }) | null;
    /**
     * IncomeVerificationPrecheckResponse
     * @description IncomeVerificationPrecheckResponse defines the response schema for `/income/verification/precheck`.
     */
    IncomeVerificationPrecheckResponse: {
      /** @description ID of the precheck. Provide this value when calling `/link/token/create` in order to optimize Link conversion. */
      precheck_id: string;
      request_id: components["schemas"]["RequestID"];
      confidence: components["schemas"]["IncomeVerificationPrecheckConfidence"];
      [key: string]: unknown;
    };
    /**
     * @description The confidence that Plaid can support the user in the digital income verification flow instead of requiring a manual paystub upload. One of the following:
     *
     * `"HIGH"`: It is very likely that this user can use the digital income verification flow.
     *
     * "`LOW`": It is unlikely that this user can use the digital income verification flow.
     *
     * `"UNKNOWN"`: It was not possible to determine if the user is supportable with the information passed.
     * @enum {string}
     */
    IncomeVerificationPrecheckConfidence: "HIGH" | "LOW" | "UNKNOWN";
    /**
     * LinkTokenCreateRequestIncomeVerification
     * @description Specifies options for initializing Link for use with the Income product. This field is required if `income_verification` is included in the `products` array.
     */
    LinkTokenCreateRequestIncomeVerification: {
      /**
       * @deprecated
       * @description The `income_verification_id` of the verification instance, as provided by `/income/verification/create`.
       */
      income_verification_id?: string;
      /** @description The `asset_report_id` of an asset report associated with the user, as provided by `/asset_report/create`. Providing an `asset_report_id` is optional and can be used to verify the user through a streamlined flow. If provided, the bank linking flow will be skipped. */
      asset_report_id?: string;
      /**
       * @description An array of access tokens corresponding to Items that a user has previously connected with. Data from these institutions will be cross-referenced with document data received during the Document Income flow to help verify that the uploaded documents are accurate. If the `transactions` product was not initialized for these Items during link, it will be initialized after this Link session.
       *
       * This field should only be used with the `payroll` income source type.
       */
      access_tokens?: components["schemas"]["AccessToken"][] | null;
      /** @description The types of source income data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
      income_source_types?: components["schemas"]["IncomeVerificationSourceType"][];
      bank_income?: components["schemas"]["LinkTokenCreateRequestIncomeVerificationBankIncome"];
      payroll_income?: components["schemas"]["LinkTokenCreateRequestIncomeVerificationPayrollIncome"];
      /** @description A list of user stated income sources */
      stated_income_sources?: components["schemas"]["LinkTokenCreateRequestUserStatedIncomeSource"][];
    };
    /**
     * IncomeVerificationSourceType
     * @description The types of source income data that users should be able to share
     * @enum {string}
     */
    IncomeVerificationSourceType: "bank" | "payroll";
    /**
     * LinkTokenCreateRequestIncomeVerificationBankIncome
     * @description Specifies options for initializing Link for use with Bank Income. This field is required if `income_verification` is included in the `products` array and `bank` is specified in `income_source_types`.
     */
    LinkTokenCreateRequestIncomeVerificationBankIncome: {
      /** @description The number of days of data to request for the Bank Income product */
      days_requested: number;
      /**
       * @description Whether to enable multiple Items to be added in the Link session
       * @default false
       */
      enable_multiple_items?: boolean | null;
    };
    /**
     * LinkTokenCreateRequestIncomeVerificationPayrollIncome
     * @description Specifies options for initializing Link for use with Payroll Income (including Document Income). Further customization options for Document Income, such as customizing which document types may be uploaded, are also available via the [Link Customization pane](https://dashboard.plaid.com/link) in the Dashboard. (Requires Production enablement.)
     */
    LinkTokenCreateRequestIncomeVerificationPayrollIncome: {
      /** @description The types of payroll income verification to enable for the Link session. If none are specified, then users will see both document and digital payroll income. */
      flow_types?: components["schemas"]["IncomeVerificationPayrollFlowType"][] | null;
      /**
       * @description An identifier to indicate whether the income verification Link token will be used for update mode. This field is only relevant for participants in the Payroll Income Refresh beta.
       * @default false
       */
      is_update_mode?: boolean;
      /** @description Uniquely identify a payroll income Item to update with.  This field is only relevant for participants in the Payroll Income Refresh beta. */
      item_id_to_update?: string | null;
      /** @description The types of analysis to enable for document uploads. If this field is not provided, then docs will undergo OCR parsing only. */
      parsing_config?: components["schemas"]["IncomeVerificationDocParsingConfig"][] | null;
    };
    /**
     * IncomeVerificationPayrollFlowType
     * @description Flow types to retrieve payroll income data
     * @enum {string}
     */
    IncomeVerificationPayrollFlowType: "payroll_digital_income" | "payroll_document_income";
    /**
     * IncomeVerificationDocParsingConfig
     * @description Analysis options to enable for document parsing
     * @enum {string}
     */
    IncomeVerificationDocParsingConfig: "ocr" | "fraud_risk";
    /**
     * IncomeVerificationStatusWebhook
     * @description Fired when the status of an income verification instance has changed. It will typically take several minutes for this webhook to fire after the end user has uploaded their documents in the Document Income flow.
     */
    IncomeVerificationStatusWebhook: {
      /** @description `"INCOME"` */
      webhook_type: string;
      /** @description `INCOME_VERIFICATION` */
      webhook_code: string;
      /** @description The Item ID associated with the verification. */
      item_id: string;
      user_id?: components["schemas"]["UserId"];
      /**
       * @description `VERIFICATION_STATUS_PROCESSING_COMPLETE`:  The income verification processing has completed. This indicates that the documents have been parsed successfully or that the documents were not parsable. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/credit/payroll_income/get` endpoint and check the document metadata to see which documents were successfully parsed.
       *
       * `VERIFICATION_STATUS_PROCESSING_FAILED`: An unexpected internal error occurred when attempting to process the verification documentation.
       *
       * `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
       */
      verification_status: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * IncomeVerificationRiskSignalsStatusWebhook
     * @description Fired when risk signals have been processed for documents uploaded via Document Income. It will typically take a minute or two for this webhook to fire after the end user has uploaded their documents in the Document Income flow. Once this webhook has fired, `/credit/payroll_income/risk_signals/get` may then be called to determine whether the documents were successfully processed and to retrieve risk data.
     */
    IncomeVerificationRiskSignalsStatusWebhook: {
      /** @description `"INCOME"` */
      webhook_type: string;
      /** @description `INCOME_VERIFICATION_RISK_SIGNALS` */
      webhook_code: string;
      /** @description The Item ID associated with the verification. */
      item_id: string;
      user_id?: components["schemas"]["UserId"];
      /** @description `RISK_SIGNALS_PROCESSING_COMPLETE`: The income verification fraud detection processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/credit/payroll_income/risk_signals/get` endpoint to get all risk signal data. */
      risk_signals_status?: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * LinkTokenCreateRequestBaseReport
     * @description Specifies options for initializing Link for use with the Base Report product. This field is required if `assets` is included in the `products` array and the client is CRA-enabled.
     */
    LinkTokenCreateRequestBaseReport: {
      /** @description The maximum integer number of days of history to include in the Base Report. */
      days_requested: number;
    };
    /**
     * LinkTokenCreateRequestEmployment
     * @description Specifies options for initializing Link for use with the Employment product. This field is required if `employment` is included in the `products` array.
     */
    LinkTokenCreateRequestEmployment: {
      /** @description The types of source employment data that users will be permitted to share. Options include `bank` and `payroll`. Currently you can only specify one of these options. */
      employment_source_types?: components["schemas"]["EmploymentSourceType"][];
      bank_employment?: components["schemas"]["LinkTokenCreateRequestEmploymentBankIncome"];
    };
    /**
     * EmploymentSourceType
     * @description The types of source employment data that users should be able to share
     * @enum {string}
     */
    EmploymentSourceType: "bank" | "payroll";
    /**
     * LinkTokenCreateRequestEmploymentBankIncome
     * @description Specifies options for initializing Link for use with Bank Employment. This field is required if `employment` is included in the `products` array and `bank` is specified in `employment_source_types`.
     */
    LinkTokenCreateRequestEmploymentBankIncome: {
      /** @description The number of days of data to request for the Bank Employment product. */
      days_requested: number;
    };
    /**
     * IncomeSummary
     * @description The verified fields from a paystub verification. All fields are provided as reported on the paystub.
     */
    IncomeSummary: {
      employer_name: components["schemas"]["EmployerIncomeSummaryFieldString"];
      employee_name: components["schemas"]["EmployeeIncomeSummaryFieldString"];
      ytd_gross_income: components["schemas"]["YTDGrossIncomeSummaryFieldNumber"];
      ytd_net_income: components["schemas"]["YTDNetIncomeSummaryFieldNumber"];
      pay_frequency: components["schemas"]["PayFrequency"];
      projected_wage: components["schemas"]["ProjectedIncomeSummaryFieldNumber"];
      verified_transaction: components["schemas"]["TransactionData"];
      [key: string]: unknown;
    };
    /**
     * TransactionData
     * @description Information about the matched direct deposit transaction used to verify a user's payroll information.
     */
    TransactionData: {
      /** @description The description of the transaction. */
      description: string;
      /**
       * Format: double
       * @description The amount of the transaction.
       */
      amount: number;
      /**
       * Format: date
       * @description The date of the transaction, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      date: string;
      /** @description A unique identifier for the end user's account. */
      account_id: string;
      /** @description A unique identifier for the transaction. */
      transaction_id: string;
      [key: string]: unknown;
    } | null;
    /**
     * IncomeSummaryFieldString
     * @description Data about the income summary
     */
    IncomeSummaryFieldString: {
      /** @description The value of the field. */
      value: string;
      verification_status: components["schemas"]["VerificationStatus"];
      [key: string]: unknown;
    } | null;
    /** @description The name of the employer, as reported on the paystub. */
    EmployerIncomeSummaryFieldString: components["schemas"]["IncomeSummaryFieldString"] & {
      [key: string]: unknown;
    };
    /** @description The name of the employee, as reported on the paystub. */
    EmployeeIncomeSummaryFieldString: components["schemas"]["IncomeSummaryFieldString"] & {
      [key: string]: unknown;
    };
    /**
     * IncomeSummaryFieldNumber
     * @description Field number for income summary
     */
    IncomeSummaryFieldNumber: {
      /**
       * Format: double
       * @description The value of the field.
       */
      value: number;
      verification_status: components["schemas"]["VerificationStatus"];
      [key: string]: unknown;
    } | null;
    /** @description Year-to-date pre-tax earnings, as reported on the paystub. */
    YTDGrossIncomeSummaryFieldNumber: components["schemas"]["IncomeSummaryFieldNumber"] & {
      [key: string]: unknown;
    };
    /** @description Year-to-date earnings after any tax withholdings, benefit payments or deductions, as reported on the paystub. */
    YTDNetIncomeSummaryFieldNumber: components["schemas"]["IncomeSummaryFieldNumber"] & {
      [key: string]: unknown;
    };
    /** @description The employee's estimated annual salary, as derived from information reported on the paystub. */
    ProjectedIncomeSummaryFieldNumber: components["schemas"]["IncomeSummaryFieldNumber"] & {
      [key: string]: unknown;
    };
    /**
     * PayFrequency
     * @description The frequency of the pay period.
     */
    PayFrequency: {
      value: components["schemas"]["PayFrequencyValue"];
      verification_status: components["schemas"]["VerificationStatus"];
      [key: string]: unknown;
    } | null;
    /**
     * PayFrequencyValue
     * @description The frequency of the pay period.
     * @enum {string}
     */
    PayFrequencyValue: "monthly" | "semimonthly" | "weekly" | "biweekly" | "unknown" | null;
    /**
     * VerificationStatus
     * @description The verification status. One of the following:
     *
     * `"VERIFIED"`: The information was successfully verified.
     *
     * `"UNVERIFIED"`: The verification has not yet been performed.
     *
     * `"NEEDS_INFO"`: The verification was attempted but could not be completed due to missing information.
     *
     * "`UNABLE_TO_VERIFY`": The verification was performed and the information could not be verified.
     *
     * `"UNKNOWN"`: The verification status is unknown.
     * @enum {string}
     */
    VerificationStatus: "VERIFIED" | "UNVERIFIED" | "NEEDS_INFO" | "UNABLE_TO_VERIFY" | "UNKNOWN";
    /**
     * VerificationRefreshStatus
     * @description The verification refresh status. One of the following:
     *
     * `"VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED"` User presence is required to refresh an income verification.
     * `"VERIFICATION_REFRESH_SUCCESSFUL"` The income verification refresh was successful.
     * `"VERIFICATION_REFRESH_NOT_FOUND"` No new data was found after the income verification refresh.
     * @enum {string}
     */
    VerificationRefreshStatus: "VERIFICATION_REFRESH_STATUS_USER_PRESENCE_REQUIRED" | "VERIFICATION_REFRESH_SUCCESSFUL" | "VERIFICATION_REFRESH_NOT_FOUND";
    /**
     * CreditPayrollIncomeRefreshStatus
     * @description The verification refresh status. One of the following:
     *
     * `"USER_PRESENCE_REQUIRED"` User presence is required to refresh an income verification.
     * `"SUCCESSFUL"` The income verification refresh was successful.
     * `"NOT_FOUND"` No new data was found after the income verification refresh.
     */
    CreditPayrollIncomeRefreshStatus: string;
    /**
     * IncomeVerificationPaystubsGetRequest
     * @description IncomeVerificationPaystubsGetRequest defines the request schema for `/income/verification/paystubs/get`.
     */
    IncomeVerificationPaystubsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @deprecated
       * @description The ID of the verification for which to get paystub information.
       */
      income_verification_id?: string | null;
      access_token?: components["schemas"]["AccessTokenNullable"];
    };
    /**
     * IncomeVerificationPaystubsGetResponse
     * @description IncomeVerificationPaystubsGetResponse defines the response schema for `/income/verification/paystubs/get`.
     */
    IncomeVerificationPaystubsGetResponse: {
      /** @description Metadata for an income document. */
      document_metadata?: components["schemas"]["DocumentMetadata"][];
      paystubs: components["schemas"]["Paystub"][];
      error?: components["schemas"]["PlaidError"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * DocumentMetadata
     * @description An object representing metadata from the end user's uploaded document.
     */
    DocumentMetadata: {
      /** @description The name of the document. */
      name?: string;
      /**
       * @description The processing status of the document.
       *
       * `PROCESSING_COMPLETE`: The document was successfully processed.
       *
       * `DOCUMENT_ERROR`: The document could not be processed. Possible causes include: The document was an unacceptable document type such as an offer letter or bank statement, the document image was cropped or blurry, or the document was corrupted.
       *
       * `UNKNOWN` or `null`: An internal error occurred. If this happens repeatedly, contact support or your Plaid account manager.
       */
      status?: string | null;
      /** @description An identifier of the document that is also present in the paystub response. */
      doc_id?: string;
      doc_type?: components["schemas"]["DocType"];
      [key: string]: unknown;
    };
    /**
     * DocType
     * @description The type of document.
     *
     * `DOCUMENT_TYPE_PAYSTUB`: A paystub.
     *
     * `DOCUMENT_TYPE_BANK_STATEMENT`: A bank statement.
     *
     * `DOCUMENT_TYPE_US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
     *
     * `DOCUMENT_TYPE_US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
     *
     * `DOCUMENT_TYPE_US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
     *
     * `DOCUMENT_TYPE_US_MILITARY_CLES`: A Civilian Leave and Earnings Statement (CLES) issued by the US military.
     *
     * `DOCUMENT_TYPE_GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
     *
     * `DOCUMENT_TYPE_NONE`: Used to indicate that there is no underlying document for the data.
     *
     * `DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.
     *
     * `UNKNOWN`: Document type could not be determined.
     * @enum {string}
     */
    DocType: "UNKNOWN" | "DOCUMENT_TYPE_PAYSTUB" | "DOCUMENT_TYPE_BANK_STATEMENT" | "DOCUMENT_TYPE_US_TAX_W2" | "DOCUMENT_TYPE_US_MILITARY_ERAS" | "DOCUMENT_TYPE_US_MILITARY_LES" | "DOCUMENT_TYPE_US_MILITARY_CLES" | "DOCUMENT_TYPE_GIG" | "DOCUMENT_TYPE_NONE" | "DOCUMENT_TYPE_US_TAX_1099_MISC" | "DOCUMENT_TYPE_US_TAX_1099_K" | "DOCUMENT_TYPE_PLAID_GENERATED_PAYSTUB_PDF";
    /**
     * Paystub
     * @description An object representing data extracted from the end user's paystub.
     */
    Paystub: {
      deductions: components["schemas"]["Deductions"];
      /** @description An identifier of the document referenced by the document metadata. */
      doc_id: string;
      earnings: components["schemas"]["Earnings"];
      employee: components["schemas"]["Employee"];
      employer: components["schemas"]["PaystubEmployer"];
      employment_details?: components["schemas"]["EmploymentDetails"];
      net_pay: components["schemas"]["NetPay"];
      pay_period_details: components["schemas"]["PayPeriodDetails"];
      paystub_details?: components["schemas"]["PaystubDetails"];
      /** @deprecated */
      income_breakdown?: components["schemas"]["IncomeBreakdown"][];
      ytd_earnings?: components["schemas"]["PaystubYTDDetails"];
      [key: string]: unknown;
    };
    /**
     * Deductions
     * @description An object with the deduction information found on a paystub.
     */
    Deductions: {
      /** @deprecated */
      subtotals?: components["schemas"]["Total"][];
      breakdown: components["schemas"]["DeductionsBreakdown"][];
      /** @deprecated */
      totals?: components["schemas"]["Total"][];
      total: components["schemas"]["DeductionsTotal"];
      [key: string]: unknown;
    };
    /**
     * DeductionsBreakdown
     * @description An object representing the deduction line items for the pay period
     */
    DeductionsBreakdown: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount?: number | null;
      /** @description Description of the deduction line item */
      description?: string | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction
       */
      ytd_amount?: number | null;
      [key: string]: unknown;
    };
    /**
     * DeductionsTotal
     * @description An object representing the total deductions for the pay period
     */
    DeductionsTotal: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount?: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date total amount of the deductions
       */
      ytd_amount?: number | null;
      [key: string]: unknown;
    };
    /**
     * Total
     * @deprecated
     * @description An object representing both the current pay period and year to date amount for a category.
     */
    Total: {
      canonical_description?: components["schemas"]["TotalCanonicalDescription"];
      /** @description Text of the line item as printed on the paystub. */
      description?: string | null;
      current_pay?: components["schemas"]["Pay"];
      ytd_pay?: components["schemas"]["Pay"];
      [key: string]: unknown;
    };
    /**
     * @description Commonly used term to describe the line item.
     * @enum {string|null}
     */
    TotalCanonicalDescription: "BONUS" | "COMMISSION" | "OVERTIME" | "PAID TIME OFF" | "REGULAR PAY" | "VACATION" | "EMPLOYEE MEDICARE" | "FICA" | "SOCIAL SECURITY EMPLOYEE TAX" | "MEDICAL" | "VISION" | "DENTAL" | "NET PAY" | "TAXES" | "NOT_FOUND" | "OTHER" | null;
    /**
     * Pay
     * @deprecated
     * @description An object representing a monetary amount.
     */
    Pay: {
      /**
       * Format: double
       * @description A numerical amount of a specific currency.
       */
      amount?: number | null;
      /** @description Currency code, e.g. USD */
      currency?: string | null;
      [key: string]: unknown;
    };
    /**
     * Earnings
     * @description An object representing both a breakdown of earnings on a paystub and the total earnings.
     */
    Earnings: {
      /** @deprecated */
      subtotals?: components["schemas"]["EarningsTotal"][];
      /** @deprecated */
      totals?: components["schemas"]["EarningsTotal"][];
      breakdown?: components["schemas"]["EarningsBreakdown"][];
      total?: components["schemas"]["EarningsTotal"];
      [key: string]: unknown;
    };
    /**
     * EarningsBreakdown
     * @description An object representing the earnings line items for the pay period.
     */
    EarningsBreakdown: {
      canonical_description?: components["schemas"]["EarningsBreakdownCanonicalDescription"];
      /**
       * Format: double
       * @description Raw amount of the earning line item.
       */
      current_amount?: number | null;
      /** @description Description of the earning line item. */
      description?: string | null;
      /** @description Number of hours applicable for this earning. */
      hours?: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * Format: double
       * @description Hourly rate applicable for this earning.
       */
      rate?: number | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction.
       */
      ytd_amount?: number | null;
      [key: string]: unknown;
    };
    /**
     * @description Commonly used term to describe the earning line item.
     * @enum {string|null}
     */
    EarningsBreakdownCanonicalDescription: "BONUS" | "COMMISSION" | "OVERTIME" | "PAID TIME OFF" | "REGULAR PAY" | "VACATION" | "BASIC ALLOWANCE HOUSING" | "BASIC ALLOWANCE SUBSISTENCE" | "OTHER" | null;
    /**
     * EarningsTotal
     * @description An object representing both the current pay period and year to date amount for an earning category.
     */
    EarningsTotal: {
      /**
       * Format: double
       * @description Total amount of the earnings for this pay period
       */
      current_amount?: number | null;
      current_pay?: components["schemas"]["Pay"];
      ytd_pay?: components["schemas"]["Pay"];
      /** @description Total number of hours worked for this pay period */
      hours?: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The total year-to-date amount of the earnings
       */
      ytd_amount?: number | null;
      [key: string]: unknown;
    };
    /**
     * EmploymentDetails
     * @deprecated
     * @description An object representing employment details found on a paystub.
     */
    EmploymentDetails: {
      annual_salary?: components["schemas"]["Pay"];
      /**
       * Format: date
       * @description Date on which the employee was hired, in the YYYY-MM-DD format.
       */
      hire_date?: string | null;
      [key: string]: unknown;
    };
    /**
     * NetPay
     * @description An object representing information about the net pay amount on the paystub.
     */
    NetPay: {
      /**
       * Format: double
       * @description Raw amount of the net pay for the pay period
       */
      current_amount?: number | null;
      /** @description Description of the net pay */
      description?: string | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the net pay
       */
      ytd_amount?: number | null;
      total?: components["schemas"]["Total"];
      [key: string]: unknown;
    };
    /**
     * PaystubDetails
     * @deprecated
     * @description An object representing details that can be found on the paystub.
     */
    PaystubDetails: {
      /**
       * Format: date
       * @description Beginning date of the pay period on the paystub in the 'YYYY-MM-DD' format.
       */
      pay_period_start_date?: string | null;
      /**
       * Format: date
       * @description Ending date of the pay period on the paystub in the 'YYYY-MM-DD' format.
       */
      pay_period_end_date?: string | null;
      /**
       * Format: date
       * @description Pay date on the paystub in the 'YYYY-MM-DD' format.
       */
      pay_date?: string | null;
      /** @description The name of the payroll provider that generated the paystub, e.g. ADP */
      paystub_provider?: string | null;
      pay_frequency?: components["schemas"]["PaystubPayFrequency"];
      [key: string]: unknown;
    };
    /**
     * @description The frequency at which the employee is paid. Possible values: `MONTHLY`, `BI-WEEKLY`, `WEEKLY`, `SEMI-MONTHLY`.
     * @enum {string|null}
     */
    PaystubPayFrequency: "MONTHLY" | "BI-WEEKLY" | "WEEKLY" | "SEMI-MONTHLY" | null;
    /**
     * IncomeBreakdown
     * @deprecated
     * @description An object representing a breakdown of the different income types on the paystub.
     */
    IncomeBreakdown: {
      type: components["schemas"]["IncomeBreakdownType"];
      /**
       * Format: double
       * @description The hourly rate at which the income is paid.
       */
      rate: number | null;
      /** @description The number of hours logged for this income for this pay period. */
      hours: number | null;
      /**
       * Format: double
       * @description The total pay for this pay period.
       */
      total: number | null;
      [key: string]: unknown;
    };
    /**
     * @description The type of income. Possible values include:
     *   `"regular"`: regular income
     *   `"overtime"`: overtime income
     *   `"bonus"`: bonus income
     * @enum {string|null}
     */
    IncomeBreakdownType: "bonus" | "overtime" | "regular" | null;
    /**
     * Employee
     * @description Data about the employee.
     */
    Employee: {
      address: components["schemas"]["PaystubAddress"];
      /** @description The name of the employee. */
      name: string | null;
      /** @description Marital status of the employee - either `single` or `married`. */
      marital_status?: string | null;
      taxpayer_id?: components["schemas"]["TaxpayerID"];
      [key: string]: unknown;
    };
    /**
     * TaxpayerID
     * @description Taxpayer ID of the individual receiving the paystub.
     */
    TaxpayerID: {
      /** @description Type of ID, e.g. 'SSN' */
      id_type?: string | null;
      /** @description ID mask; i.e. last 4 digits of the taxpayer ID */
      id_mask?: string | null;
      /**
       * @deprecated
       * @description Last 4 digits of unique number of ID.
       */
      last_4_digits?: string | null;
      [key: string]: unknown;
    };
    /**
     * Employer
     * @description Information about the employer on the paystub
     */
    PaystubEmployer: {
      address?: components["schemas"]["PaystubAddress"];
      /** @description The name of the employer on the paystub. */
      name: string | null;
      [key: string]: unknown;
    };
    /**
     * Address
     * @description Address on the paystub
     */
    PaystubAddress: {
      /** @description The full city name. */
      city?: string | null;
      /** @description The ISO 3166-1 alpha-2 country code. */
      country?: string | null;
      /** @description The postal code of the address. */
      postal_code?: string | null;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region?: string | null;
      /** @description The full street address. */
      street?: string | null;
      /**
       * @deprecated
       * @description Street address line 1.
       */
      line1?: string | null;
      /**
       * @deprecated
       * @description Street address line 2.
       */
      line2?: string | null;
      /**
       * @deprecated
       * @description The region or state
       * Example: `"NC"`
       */
      state_code?: string | null;
      [key: string]: unknown;
    };
    /**
     * PayPeriodDetails
     * @description Details about the pay period.
     */
    PayPeriodDetails: {
      /**
       * Format: double
       * @description The amount of the paycheck.
       */
      check_amount?: number | null;
      distribution_breakdown?: components["schemas"]["DistributionBreakdown"][];
      /**
       * Format: date
       * @description The pay period end date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
       */
      end_date?: string | null;
      /**
       * Format: double
       * @description Total earnings before tax/deductions.
       */
      gross_earnings?: number | null;
      /**
       * Format: date
       * @description The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      pay_date?: string | null;
      /**
       * @description The frequency at which an individual is paid.
       * @enum {string|null}
       */
      pay_frequency?: "PAY_FREQUENCY_UNKNOWN" | "PAY_FREQUENCY_WEEKLY" | "PAY_FREQUENCY_BIWEEKLY" | "PAY_FREQUENCY_SEMIMONTHLY" | "PAY_FREQUENCY_MONTHLY" | null;
      /**
       * Format: date
       * @deprecated
       * @description The date on which the paystub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      pay_day?: string | null;
      /**
       * Format: date
       * @description The pay period start date, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format: "yyyy-mm-dd".
       */
      start_date?: string | null;
      [key: string]: unknown;
    };
    /**
     * DistributionBreakdown
     * @description Information about the accounts that the payment was distributed to.
     */
    DistributionBreakdown: {
      /** @description Name of the account for the given distribution. */
      account_name?: string | null;
      /** @description The name of the bank that the payment is being deposited to. */
      bank_name?: string | null;
      /**
       * Format: double
       * @description The amount distributed to this account.
       */
      current_amount?: number | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code?: string | null;
      /** @description The last 2-4 alphanumeric characters of an account's official account number. */
      mask?: string | null;
      /** @description Type of the account that the paystub was sent to (e.g. 'checking'). */
      type?: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code?: string | null;
      current_pay?: components["schemas"]["Pay"];
      [key: string]: unknown;
    };
    /**
     * PaystubDeduction
     * @description Deduction on the paystub
     */
    PaystubDeduction: {
      /** @description The description of the deduction, as provided on the paystub. For example: `"401(k)"`, `"FICA MED TAX"`. */
      type: string | null;
      /** @description `true` if the deduction is pre-tax; `false` otherwise. */
      is_pretax: boolean | null;
      /**
       * Format: double
       * @description The amount of the deduction.
       */
      total: number | null;
      [key: string]: unknown;
    };
    /**
     * PaystubYTDDetails
     * @deprecated
     * @description The amount of income earned year to date, as based on paystub data.
     */
    PaystubYTDDetails: {
      /**
       * Format: double
       * @description Year-to-date gross earnings.
       */
      gross_earnings?: number | null;
      /**
       * Format: double
       * @description Year-to-date net (take home) earnings.
       */
      net_earnings?: number | null;
      [key: string]: unknown;
    };
    /**
     * IncomeVerificationDocumentsDownloadRequest
     * @description IncomeVerificationDocumentsDownloadRequest defines the request schema for `/income/verification/documents/download`.
     */
    IncomeVerificationDocumentsDownloadRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @deprecated
       * @description The ID of the verification.
       */
      income_verification_id?: string | null;
      access_token?: components["schemas"]["AccessTokenNullable"];
      /** @description The document ID to download. If passed, a single document will be returned in the resulting zip file, rather than all document */
      document_id?: string | null;
    };
    /**
     * IncomeVerificationTaxformsGetRequest
     * @description IncomeVerificationTaxformsGetRequest defines the request schema for `/income/verification/taxforms/get`
     */
    IncomeVerificationTaxformsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * @deprecated
       * @description The ID of the verification.
       */
      income_verification_id?: string | null;
      access_token?: components["schemas"]["AccessTokenNullable"];
    };
    /**
     * IncomeVerificationTaxformsGetResponse
     * @description IncomeVerificationTaxformsGetResponse defines the response schema for `/income/verification/taxforms/get`
     */
    IncomeVerificationTaxformsGetResponse: {
      request_id?: components["schemas"]["RequestID"];
      document_metadata: components["schemas"]["DocumentMetadata"][];
      /** @description A list of forms. */
      taxforms: components["schemas"]["Taxform"][];
      error?: components["schemas"]["PlaidError"];
      [key: string]: unknown;
    };
    /**
     * Taxform
     * @description Data about an official document used to report the user's income to the IRS.
     */
    Taxform: {
      /** @description An identifier of the document referenced by the document metadata. */
      doc_id?: string;
      /** @description The type of tax document. Currently, the only supported value is `w2`. */
      document_type: string;
      w2?: components["schemas"]["W2"];
      [key: string]: unknown;
    };
    /**
     * W2
     * @description W2 is an object that represents income data taken from a W2 tax document.
     */
    W2: {
      employer?: components["schemas"]["PaystubEmployer"];
      employee?: components["schemas"]["Employee"];
      /** @description The tax year of the W2 document. */
      tax_year?: string | null;
      /** @description An employee identification number or EIN. */
      employer_id_number?: string | null;
      /** @description Wages from tips and other compensation. */
      wages_tips_other_comp?: string | null;
      /** @description Federal income tax withheld for the tax year. */
      federal_income_tax_withheld?: string | null;
      /** @description Wages from social security. */
      social_security_wages?: string | null;
      /** @description Social security tax withheld for the tax year. */
      social_security_tax_withheld?: string | null;
      /** @description Wages and tips from medicare. */
      medicare_wages_and_tips?: string | null;
      /** @description Medicare tax withheld for the tax year. */
      medicare_tax_withheld?: string | null;
      /** @description Tips from social security. */
      social_security_tips?: string | null;
      /** @description Allocated tips. */
      allocated_tips?: string | null;
      /** @description Contents from box 9 on the W2. */
      box_9?: string | null;
      /** @description Dependent care benefits. */
      dependent_care_benefits?: string | null;
      /** @description Nonqualified plans. */
      nonqualified_plans?: string | null;
      box_12?: components["schemas"]["W2Box12"][];
      /** @description Statutory employee. */
      statutory_employee?: string | null;
      /** @description Retirement plan. */
      retirement_plan?: string | null;
      /** @description Third party sick pay. */
      third_party_sick_pay?: string | null;
      /** @description Other. */
      other?: string | null;
      state_and_local_wages?: components["schemas"]["W2StateAndLocalWages"][];
      [key: string]: unknown;
    };
    /**
     * W2Box12
     * @description Data on the W2 Box 12
     */
    W2Box12: {
      /** @description W2 Box 12 code. */
      code?: string | null;
      /** @description W2 Box 12 amount. */
      amount?: string | null;
      [key: string]: unknown;
    };
    /**
     * W2StateAndLocalWages
     * @description W2 state and local wages
     */
    W2StateAndLocalWages: {
      /** @description State associated with the wage. */
      state?: string | null;
      /** @description State identification number of the employer. */
      employer_state_id_number?: string | null;
      /** @description Wages and tips from the specified state. */
      state_wages_tips?: string | null;
      /** @description Income tax from the specified state. */
      state_income_tax?: string | null;
      /** @description Wages and tips from the locality. */
      local_wages_tips?: string | null;
      /** @description Income tax from the locality. */
      local_income_tax?: string | null;
      /** @description Name of the locality. */
      locality_name?: string | null;
      [key: string]: unknown;
    };
    /**
     * IncomeVerificationWebhookStatus
     * @description Status of the income verification webhook
     */
    IncomeVerificationWebhookStatus: {
      id: string;
      [key: string]: unknown;
    };
    /**
     * EmploymentVerificationGetRequest
     * @description EmploymentVerificationGetRequest defines the request schema for `/employment/verification/get`.
     */
    EmploymentVerificationGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /**
     * EmploymentVerificationGetResponse
     * @description EmploymentVerificationGetResponse defines the response schema for `/employment/verification/get`.
     */
    EmploymentVerificationGetResponse: {
      /** @description A list of employment verification summaries. */
      employments: components["schemas"]["EmploymentVerification"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * EmploymentVerification
     * @description An object containing proof of employment data for an individual
     */
    EmploymentVerification: {
      status?: components["schemas"]["EmploymentVerificationStatus"];
      /**
       * Format: date
       * @description Start of employment in ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string | null;
      /**
       * Format: date
       * @description End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
       */
      end_date?: string | null;
      employer?: components["schemas"]["EmployerVerification"];
      /** @description Current title of employee. */
      title?: string | null;
      platform_ids?: components["schemas"]["PlatformIds"];
      [key: string]: unknown;
    };
    /**
     * @description Current employment status.
     * @enum {string|null}
     */
    EmploymentVerificationStatus: "EMPLOYMENT_STATUS_ACTIVE" | "EMPLOYMENT_STATUS_INACTIVE" | null;
    /**
     * EmployerVerification
     * @description An object containing employer data.
     */
    EmployerVerification: {
      /** @description Name of employer. */
      name?: string | null;
      [key: string]: unknown;
    };
    /**
     * PlatformIds
     * @description An object containing a set of ids related to an employee
     */
    PlatformIds: {
      /** @description The ID of an employee as given by their employer */
      employee_id?: string | null;
      /** @description The ID of an employee as given by their payroll */
      payroll_id?: string | null;
      /** @description The ID of the position of the employee */
      position_id?: string | null;
      [key: string]: unknown;
    };
    /**
     * HealthIncident
     * @description A status health incident
     */
    HealthIncident: {
      /**
       * Format: date-time
       * @description The start date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
       */
      start_date: string;
      /**
       * Format: date-time
       * @description The end date of the incident, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
       */
      end_date?: string | null;
      /** @description The title of the incident */
      title: string;
      /** @description Updates on the health incident. */
      incident_updates: components["schemas"]["IncidentUpdate"][];
      [key: string]: unknown;
    };
    /**
     * IncidentUpdate
     * @description An update on the health incident
     */
    IncidentUpdate: {
      /** @description The content of the update. */
      description?: string;
      /**
       * @description The status of the incident.
       * @enum {string}
       */
      status?: "INVESTIGATING" | "IDENTIFIED" | "SCHEDULED" | "RESOLVED" | "UNKNOWN";
      /**
       * Format: date-time
       * @description The date when the update was published, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format, e.g. `"2020-10-30T15:26:48Z"`.
       */
      updated_date?: string;
      [key: string]: unknown;
    };
    /**
     * DepositSwitchAltCreateRequest
     * @description DepositSwitchAltCreateRequest defines the request schema for `/deposit_switch/alt/create`
     */
    DepositSwitchAltCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      target_account: components["schemas"]["DepositSwitchTargetAccount"];
      target_user: components["schemas"]["DepositSwitchTargetUser"];
      options?: components["schemas"]["DepositSwitchCreateRequestOptions"];
      /**
       * CountryCode
       * @description ISO-3166-1 alpha-2 country code standard.
       * @enum {string|null}
       */
      country_code?: "US" | "CA" | null;
    };
    /**
     * DepositSwitchAltCreateResponse
     * @description DepositSwitchAltCreateResponse defines the response schema for `/deposit_switch/alt/create`
     */
    DepositSwitchAltCreateResponse: {
      /** @description ID of the deposit switch. This ID is persisted throughout the lifetime of the deposit switch. */
      deposit_switch_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * DepositSwitchTargetAccount
     * @description The deposit switch destination account
     */
    DepositSwitchTargetAccount: {
      /** @description Account number for deposit switch destination */
      account_number: string;
      /** @description Routing number for deposit switch destination */
      routing_number: string;
      /** @description The name of the deposit switch destination account, as it will be displayed to the end user in the Deposit Switch interface. It is not required to match the name used in online banking. */
      account_name: string;
      /**
       * @description The account subtype of the account, either `checking` or `savings`.
       * @enum {string}
       */
      account_subtype: "checking" | "savings";
      [key: string]: unknown;
    };
    /**
     * DepositSwitchTargetUser
     * @description The deposit switch target user
     */
    DepositSwitchTargetUser: {
      /** @description The given name (first name) of the user. */
      given_name: string;
      /** @description The family name (last name) of the user. */
      family_name: string;
      /** @description The phone number of the user. The endpoint can accept a variety of phone number formats, including E.164. */
      phone: string;
      /** @description The email address of the user. */
      email: string;
      address?: components["schemas"]["DepositSwitchAddressData"];
      /** @description The taxpayer ID of the user, generally their SSN, EIN, or TIN. */
      tax_payer_id?: string;
      [key: string]: unknown;
    };
    /**
     * DepositSwitchAddressData
     * @description The user's address.
     */
    DepositSwitchAddressData: {
      /** @description The full city name */
      city: string;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region: string;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street: string;
      /** @description The postal code */
      postal_code: string;
      /** @description The ISO 3166-1 alpha-2 country code */
      country: string;
      [key: string]: unknown;
    };
    /**
     * CreditBankEmploymentGetRequest
     * @description CreditBankEmploymentGetRequest defines the request schema for `/beta/credit/v1/bank_employment/get`.
     */
    CreditBankEmploymentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /**
     * CreditBankEmploymentGetResponse
     * @description CreditBankEmploymentGetResponse defines the response schema for `/beta/credit/v1/bank_employment/get`.
     */
    CreditBankEmploymentGetResponse: {
      /** @description Bank Employment data. Each entry in the array will be a distinct bank employment report. */
      bank_employment_reports: components["schemas"]["CreditBankEmploymentReport"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description The report of the Bank Employment data for an end user. */
    CreditBankEmploymentReport: {
      /** @description The unique identifier associated with the Bank Employment Report. */
      bank_employment_report_id: string;
      /**
       * Format: date-time
       * @description The time when the Bank Employment Report was generated, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
       */
      generated_time: string;
      /** @description The number of days requested by the customer for the Bank Employment Report. */
      days_requested: number;
      /** @description The list of Items in the report along with the associated metadata about the Item. */
      items: components["schemas"]["CreditBankEmploymentItem"][];
      /** @description If data from the Bank Employment report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete. */
      warnings: components["schemas"]["CreditBankEmploymentWarning"][];
    };
    /** @description The details and metadata for an end user's Item. */
    CreditBankEmploymentItem: {
      /** @description The unique identifier for the Item. */
      item_id: string;
      /**
       * Format: date-time
       * @description The time when this Item's data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
       */
      last_updated_time: string;
      /** @description The unique identifier of the institution associated with the Item. */
      institution_id: string;
      /** @description The name of the institution associated with the Item. */
      institution_name: string;
      /** @description The bank employment information for this Item. Each entry in the array is a different employer found. */
      bank_employments: components["schemas"]["CreditBankEmployment"][];
      /** @description The Item's accounts that have Bank Employment data. */
      bank_employment_accounts: components["schemas"]["CreditBankIncomeAccount"][];
    };
    /** @description Detailed information for the bank employment. */
    CreditBankEmployment: {
      /** @description A unique identifier for the bank employment. */
      bank_employment_id: string;
      /** @description Plaid's unique identifier for the account. */
      account_id: string;
      employer: components["schemas"]["CreditBankEmployer"];
      /**
       * Format: date
       * @description The date of the most recent deposit from this employer.
       */
      latest_deposit_date: string;
      /**
       * Format: date
       * @description The date of the earliest deposit from this employer from within the period of the days requested.
       */
      earliest_deposit_date: string;
    };
    /** @description Object containing employer data. */
    CreditBankEmployer: {
      /** @description Name of the employer. */
      name: string;
    };
    /** @description The warning associated with the data that was unavailable for the Bank Employment Report. */
    CreditBankEmploymentWarning: {
      warning_type: components["schemas"]["CreditBankEmploymentWarningType"];
      warning_code: components["schemas"]["CreditBankIncomeWarningCode"];
      cause: components["schemas"]["CreditBankIncomeCause"];
    };
    /**
     * @description The warning type which will always be `BANK_EMPLOYMENT_WARNING`.
     * @enum {string}
     */
    CreditBankEmploymentWarningType: "BANK_EMPLOYMENT_WARNING";
    /**
     * CreditBankIncomeGetRequest
     * @description CreditBankIncomeGetRequest defines the request schema for `/credit/bank_income/get`.
     */
    CreditBankIncomeGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
      options?: components["schemas"]["CreditBankIncomeGetRequestOptions"];
    };
    /** @description An optional object for `/credit/bank_income/get` request options. */
    CreditBankIncomeGetRequestOptions: {
      /**
       * @description How many Bank Income Reports should be fetched. Multiple reports may be available if the report has been re-created or refreshed. If more than one report is available, the most recent reports will be returned first.
       * @default 1
       */
      count?: number;
    };
    /**
     * CreditBankIncomeGetResponse
     * @description CreditBankIncomeGetResponse defines the response schema for `/credit/bank_income/get`
     */
    CreditBankIncomeGetResponse: {
      bank_income?: components["schemas"]["CreditBankIncome"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditBankIncomePDFGetRequest
     * @description CreditBankIncomePDFGetRequest defines the request schema for `/credit/bank_income/pdf/get`
     */
    CreditBankIncomePDFGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /**
     * CreditBankIncomePDFGetResponse
     * Format: binary
     * @description CreditBankIncomePDFGetResponse defines the response schema for `/credit/bank_income/pdf/get`
     */
    CreditBankIncomePDFGetResponse: string;
    /** @description The report of the Bank Income data for an end user. */
    CreditBankIncome: {
      /** @description The unique identifier associated with the Bank Income Report. */
      bank_income_id?: string;
      /**
       * Format: date-time
       * @description The time when the Bank Income Report was generated.
       */
      generated_time?: string;
      /** @description The number of days requested by the customer for the Bank Income Report. */
      days_requested?: number;
      /** @description The list of Items in the report along with the associated metadata about the Item. */
      items?: components["schemas"]["CreditBankIncomeItem"][];
      bank_income_summary?: components["schemas"]["CreditBankIncomeSummary"];
      /** @description If data from the Bank Income report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete. */
      warnings?: components["schemas"]["CreditBankIncomeWarning"][];
    };
    /** @description The details and metadata for an end user's Item. */
    CreditBankIncomeItem: {
      /** @description The Item's accounts that have Bank Income data. */
      bank_income_accounts?: components["schemas"]["CreditBankIncomeAccount"][];
      /** @description The income sources for this Item. Each entry in the array is a single income source. */
      bank_income_sources?: components["schemas"]["CreditBankIncomeSource"][];
      /**
       * Format: date-time
       * @description The time when this Item's data was last retrieved from the financial institution.
       */
      last_updated_time?: string;
      /** @description The unique identifier of the institution associated with the Item. */
      institution_id?: string;
      /** @description The name of the institution associated with the Item. */
      institution_name?: string;
      /** @description The unique identifier for the Item. */
      item_id?: string;
    };
    /** @description The Item's bank accounts that have the selected data. */
    CreditBankIncomeAccount: {
      /** @description Plaid's unique identifier for the account. */
      account_id: string;
      /**
       * @description The last 2-4 alphanumeric characters of an account's official account number.
       * Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
       */
      mask: string | null;
      /** @description The name of the bank account. */
      name: string;
      /** @description The official name of the bank account. */
      official_name: string | null;
      subtype: components["schemas"]["DepositoryAccountSubtype"];
      type: components["schemas"]["CreditBankIncomeAccountType"];
      /** @description Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array. */
      owners: components["schemas"]["Owner"][];
    };
    /**
     * @description The account type. This will always be `depository`.
     * @enum {string}
     */
    CreditBankIncomeAccountType: "depository";
    /** @description Detailed information for the income source. */
    CreditBankIncomeSource: {
      /** @description A unique identifier for an income source. */
      income_source_id?: string;
      /** @description The most common name or original description for the underlying income transactions. */
      income_description?: string;
      income_category?: components["schemas"]["CreditBankIncomeCategory"];
      /** @description Plaid's unique identifier for the account. */
      account_id?: string;
      /**
       * Format: date
       * @description Minimum of all dates within the specific income sources in the user's bank account for days requested by the client.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      pay_frequency?: components["schemas"]["CreditBankIncomePayFrequency"];
      /** @description Total amount of earnings in the user’s bank account for the specific income source for days requested by the client. */
      total_amount?: number;
      /** @description Number of transactions for the income source within the start and end date. */
      transaction_count?: number;
      historical_summary?: components["schemas"]["CreditBankIncomeHistoricalSummary"][];
    };
    /**
     * @description The income category. Note that the `CASH` value has been deprecated and is used only for existing legacy implementations. It has been replaced by the new categories `CASH_DEPOSIT` (representing cash or check deposits) and `TRANSFER_FROM_APPLICATION` (representing cash transfers originating from apps, such as Zelle or Venmo).
     * @enum {string}
     */
    CreditBankIncomeCategory: "SALARY" | "UNEMPLOYMENT" | "CASH" | "GIG_ECONOMY" | "RENTAL" | "CHILD_SUPPORT" | "MILITARY" | "RETIREMENT" | "LONG_TERM_DISABILITY" | "BANK_INTEREST" | "CASH_DEPOSIT" | "TRANSFER_FROM_APPLICATION" | "TAX_REFUND" | "BENEFIT_OTHER" | "OTHER";
    /**
     * @description The income pay frequency.
     * @enum {string}
     */
    CreditBankIncomePayFrequency: "WEEKLY" | "BIWEEKLY" | "SEMI_MONTHLY" | "MONTHLY" | "DAILY" | "UNKNOWN";
    /** @description The ISO 4217 currency code of the amount or balance. */
    CreditIsoCurrencyCode: string | null;
    /**
     * @description The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
     * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
     */
    CreditUnofficialCurrencyCode: string | null;
    /** @description This contains an amount, denominated in the currency specified by either `iso_currency_code` or `unofficial_currency_code` */
    CreditAmountWithCurrency: {
      /** @description Value of amount with up to 2 decimal places. */
      amount?: number;
      iso_currency_code?: components["schemas"]["CreditIsoCurrencyCode"];
      unofficial_currency_code?: components["schemas"]["CreditUnofficialCurrencyCode"];
      [key: string]: unknown;
    };
    /** @description Summary for bank income across all income sources and items (max history of 730 days). */
    CreditBankIncomeSummary: {
      /**
       * @deprecated
       * @description Total amount of earnings across all the income sources in the end user's Items for the days requested by the client.
       * This may return an incorrect value if the summary includes income sources in multiple currencies.
       * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
       */
      total_amount?: number;
      /**
       * @deprecated
       * @description The ISO 4217 currency code of the amount or balance.
       * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
       */
      iso_currency_code?: string | null;
      /**
       * @deprecated
       * @description The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
       * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-bank-income-summary-total-amounts) instead.
       */
      unofficial_currency_code?: string | null;
      /**
       * @description Total amount of earnings across all the income sources in the end user's Items for the days requested by the client.
       * This can contain multiple amounts, with each amount denominated in one unique currency.
       */
      total_amounts?: components["schemas"]["CreditAmountWithCurrency"][];
      /**
       * Format: date
       * @description The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The latest date in which all income sources identified by Plaid appear in the user's account.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      /** @description Number of income sources per end user. */
      income_sources_count?: number;
      /** @description Number of income categories per end user. */
      income_categories_count?: number;
      /** @description Number of income transactions per end user. */
      income_transactions_count?: number;
      historical_summary?: components["schemas"]["CreditBankIncomeHistoricalSummary"][];
      [key: string]: unknown;
    };
    /** @description The end user's monthly summary for the income source(s). */
    CreditBankIncomeHistoricalSummary: {
      /**
       * @deprecated
       * @description Total amount of earnings for the income source(s) of the user for the month in the summary.
       * This may return an incorrect value if the summary includes income sources in multiple currencies.
       * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
       */
      total_amount?: number;
      /**
       * @deprecated
       * @description The ISO 4217 currency code of the amount or balance.
       * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
       */
      iso_currency_code?: string | null;
      /**
       * @deprecated
       * @description The unofficial currency code associated with the amount or balance. Always `null` if `iso_currency_code` is non-null.
       * Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       * Please use [`total_amounts`](https://plaid.com/docs/api/products/income/#credit-bank_income-get-response-bank-income-items-bank-income-sources-historical-summary-total-amounts) instead.
       */
      unofficial_currency_code?: string | null;
      /**
       * @description Total amount of earnings for the income source(s) of the user for the month in the summary.
       * This can contain multiple amounts, with each amount denominated in one unique currency.
       */
      total_amounts?: components["schemas"]["CreditAmountWithCurrency"][];
      /**
       * Format: date
       * @description The start date of the period covered in this monthly summary.
       * This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The end date of the period included in this monthly summary.
       * This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      transactions?: components["schemas"]["CreditBankIncomeTransaction"][];
      [key: string]: unknown;
    };
    /** @description The transactions data for the end user's income source(s). */
    CreditBankIncomeTransaction: {
      /**
       * @description The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`.
       * Positive values when money moves out of the account; negative values when money moves in.
       * For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
       */
      amount?: number;
      /**
       * Format: date
       * @description For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted.
       * Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
       */
      date?: string;
      /** @description The merchant name or transaction description. */
      name?: string;
      /** @description The string returned by the financial institution to describe the transaction. */
      original_description?: string | null;
      /**
       * @description When true, identifies the transaction as pending or unsettled.
       * Pending transaction details (name, type, amount, category ID) may change before they are settled.
       */
      pending?: boolean;
      /** @description The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
      transaction_id?: string;
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      iso_currency_code?: components["schemas"]["CreditIsoCurrencyCode"];
      unofficial_currency_code?: components["schemas"]["CreditUnofficialCurrencyCode"];
      [key: string]: unknown;
    };
    /**
     * CreditBankIncomeRefreshRequest
     * @description CreditBankIncomeRefreshRequest defines the request schema for `/credit/bank_income/refresh`.
     */
    CreditBankIncomeRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
      options?: components["schemas"]["CreditBankIncomeRefreshRequestOptions"];
    };
    /** @description An optional object for `/credit/bank_income/refresh` request options. */
    CreditBankIncomeRefreshRequestOptions: {
      /** @description How many days of data to include in the refresh. If not specified, this will default to the days requested in the most recently generated bank income report for the user. */
      days_requested?: number;
    };
    /**
     * CreditBankIncomeRefreshResponse
     * @description CreditBankIncomeRefreshResponse defines the response schema for `/credit/bank_income/refresh`.
     */
    CreditBankIncomeRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditBankIncomeWebhookUpdateRequest
     * @description CreditBankIncomeWebhookUpdateRequest defines the request schema for `/credit/bank_income/webhook/update`.
     */
    CreditBankIncomeWebhookUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
      /** @description Whether the user should be enabled for proactive webhook notifications when their income changes */
      enable_webhooks: boolean;
    };
    /**
     * CreditBankIncomeWebhookUpdateResponse
     * @description CreditBankIncomeWebhookUpdateResponse defines the response schema for `/credit/bank_income/webhook/update`.
     */
    CreditBankIncomeWebhookUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditBankStatementsUploadsGetRequest
     * @description CreditBankStatementsUploadsGetRequest defines the request schema for `/credit/bank_statements/uploads/get`
     */
    CreditBankStatementsUploadsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /**
     * CreditPayrollIncomeParsingConfigUpdateRequest
     * @description CreditPayrollIncomeParsingConfigUpdateRequest defines the request schema for `/credit/payroll_income/documents/update`.
     */
    CreditPayrollIncomeParsingConfigUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
      item_id?: components["schemas"]["ItemId"];
      /** @description The types of analysis to enable for the document income verification session */
      parsing_config: components["schemas"]["IncomeVerificationDocParsingConfig"][];
      [key: string]: unknown;
    };
    /**
     * CreditPayrollIncomeParsingConfigUpdateResponse
     * @description CreditPayrollIncomeParsingConfigUpdateResponse defines the response schema for `/credit/payroll_income/documents/update`.
     */
    CreditPayrollIncomeParsingConfigUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditBankStatementsUploadsGetResponse
     * @description CreditBankStatementsUploadsGetResponse defines the response schema for `/credit/bank_statements/uploads/get`
     */
    CreditBankStatementsUploadsGetResponse: {
      /** @description Array of bank statement upload items. */
      items: components["schemas"]["CreditBankStatementUploadItem"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditPayrollIncomeRiskSignalsGetRequest
     * @description CreditPayrollIncomeRiskSignalsGetRequest defines the request schema for `/credit/payroll_income/risk_signals/get`
     */
    CreditPayrollIncomeRiskSignalsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
    };
    /**
     * CreditPayrollIncomeRiskSignalsGetReponse
     * @description CreditPayrollIncomeRiskSignalsGetRequest defines the response schema for `/credit/payroll_income/risk_signals/get`
     */
    CreditPayrollIncomeRiskSignalsGetResponse: {
      /** @description Array of payroll items. */
      items: components["schemas"]["PayrollRiskSignalsItem"][];
      error?: components["schemas"]["PlaidError"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * PayrollRiskSignalsItem
     * @description Object containing fraud risk data pertaining to the Item linked as part of the verification.
     */
    PayrollRiskSignalsItem: {
      item_id: components["schemas"]["ItemId"];
      /** @description Array of payroll income document authenticity data retrieved for each of the user's accounts. */
      verification_risk_signals: components["schemas"]["DocumentRiskSignalsObject"][];
      [key: string]: unknown;
    };
    /**
     * DocumentRiskSignalsObject
     * @description Object containing fraud risk data for a set of income documents.
     */
    DocumentRiskSignalsObject: {
      /** @description ID of the payroll provider account. */
      account_id: string | null;
      /** @description Array of document metadata and associated risk signals per document */
      single_document_risk_signals: components["schemas"]["SingleDocumentRiskSignal"][];
      /** @description Array of risk signals computed from a set of uploaded documents and the associated documents' metadata */
      multi_document_risk_signals: components["schemas"]["MultiDocumentRiskSignal"][];
      [key: string]: unknown;
    };
    /**
     * RiskSignalDocumentReference
     * @description Object containing metadata for the document
     */
    RiskSignalDocumentReference: {
      /** @description An identifier of the document referenced by the document metadata. */
      document_id?: string | null;
      /** @description The name of the document */
      document_name?: string;
      status?: components["schemas"]["RiskSignalDocumentStatus"];
      [key: string]: unknown;
    };
    /**
     * RiskSignalDocumentStatus
     * @description Status of a document for risk signal analysis
     * @enum {string}
     */
    RiskSignalDocumentStatus: "PROCESSING" | "PROCESSING_COMPLETE" | "PROCESSING_ERROR" | "PASSWORD_PROTECTED" | "VIRUS_DETECTED";
    /**
     * DocumentRiskSummary
     * @description A summary across all risk signals associated with a document
     */
    DocumentRiskSummary: {
      /** @description A number between 0 and 100, inclusive, where a score closer to 0 indicates a document is likely to be trustworthy and a score closer to 100 indicates a document is likely to be fraudulent */
      risk_score: number | null;
      [key: string]: unknown;
    };
    /**
     * SingleDocumentRiskSignal
     * @description Object containing all risk signals and relevant metadata for a single document
     */
    SingleDocumentRiskSignal: {
      document_reference: components["schemas"]["RiskSignalDocumentReference"];
      /** @description Array of attributes that indicate whether or not there is fraud risk with a document */
      risk_signals: components["schemas"]["DocumentRiskSignal"][];
      risk_summary: components["schemas"]["DocumentRiskSummary"];
      [key: string]: unknown;
    };
    /**
     * MultiDocumentRiskSignal
     * @description Object containing risk signals and relevant metadata for a set of uploaded documents
     */
    MultiDocumentRiskSignal: {
      /** @description Array of objects containing attributes that could indicate if a document is fraudulent */
      document_references: components["schemas"]["RiskSignalDocumentReference"][];
      /** @description Array of attributes that indicate whether or not there is fraud risk with a set of documents */
      risk_signals: components["schemas"]["DocumentRiskSignal"][];
      [key: string]: unknown;
    };
    /** @description CreditAuditCopyTokenCreateRequest defines the request schema for `/credit/audit_copy_token/create` */
    CreditAuditCopyTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description List of report tokens; can include at most one VOA/standard Asset Report tokens and one VOE Asset Report Token. */
      report_tokens: string[];
    };
    /** @description CreditAuditCopyTokenCreateResponse defines the response schema for `/credit/audit_copy_token/get` */
    CreditAuditCopyTokenCreateResponse: {
      /** @description A token that can be shared with a third party auditor, which allows them to fetch the Asset Reports attached to the token. This token should be stored securely. */
      audit_copy_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description CreditAuditCopyTokenRemoveRequest defines the request schema for `/credit/audit_copy_token/remove` */
    CreditAuditCopyTokenRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `audit_copy_token` granting access to the Audit Copy you would like to revoke. */
      audit_copy_token: string;
    };
    /** @description CreditAuditCopyTokenRemoveResponse defines the response schema for `/credit/audit_copy_token/remove` */
    CreditAuditCopyTokenRemoveResponse: {
      /** @description `true` if the Audit Copy was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditPayrollIncomeGetRequest
     * @description CreditPayrollIncomeGetRequest defines the request schema for `/credit/payroll_income/get`.
     */
    CreditPayrollIncomeGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
    };
    /**
     * CreditPayrollIncomeGetResponse
     * @description Defines the response body for `/credit/payroll_income/get`.
     */
    CreditPayrollIncomeGetResponse: {
      /** @description Array of payroll items. */
      items: components["schemas"]["PayrollItem"][];
      error?: components["schemas"]["PlaidError"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditDocumentMetadata
     * @description Object representing metadata pertaining to the document.
     */
    CreditDocumentMetadata: {
      /** @description The name of the document. */
      name: string;
      document_type: components["schemas"]["CreditDocumentType"];
      /**
       * @description Signed URL to retrieve the underlying file. For Payroll Income, the file type will always be PDF, and the file may not be available, in which case the field will be `null`. If you would like Plaid to generate a PDF if the original is not available, contact your Account Manager. For Document Income, this field will not be `null`, and the file type will be the original file type uploaded by the user. For more details on available file types, see the [Document Income](https://www.plaid.com/docs/income/payroll-income) documentation.
       *
       * This download URL can only be used once and expires after two minutes. To generate a new download URL, call `/credit/payroll_income/get` again.
       */
      download_url: string | null;
      /**
       * @description The processing status of the document.
       *
       * `PROCESSING_COMPLETE`: The document was successfully processed.
       *
       * `DOCUMENT_ERROR`: The document could not be processed. Possible causes include: The document was an unacceptable document type such as an offer letter or bank statement, the document image was cropped or blurry, or the document was corrupted.
       *
       * `UNKNOWN` or `null`: An internal error occurred. If this happens repeatedly, contact support or your Plaid account manager.
       */
      status: string | null;
      /** @description The number of pages of the uploaded document (if available). */
      page_count?: number | null;
      [key: string]: unknown;
    };
    /**
     * CreditDocumentType
     * @description The type of document.
     *
     * `PAYSTUB`: A paystub.
     *
     * `BANK_STATEMENT`: A bank statement.
     *
     * `US_TAX_W2`: A W-2 wage and tax statement provided by a US employer reflecting wages earned by the employee.
     *
     * `US_MILITARY_ERAS`: An electronic Retirement Account Statement (eRAS) issued by the US military.
     *
     * `US_MILITARY_LES`: A Leave and Earnings Statement (LES) issued by the US military.
     *
     * `US_MILITARY_CLES`: A Civilian Leave and Earnings Statment (CLES) issued by the US military.
     *
     * `GIG`: Used to indicate that the income is related to gig work. Does not necessarily correspond to a specific document type.
     *
     * `PLAID_GENERATED_PAYSTUB_PDF`: Used to indicate that the PDF for the paystub was generated by Plaid.
     *
     * `NONE`: Used to indicate that there is no underlying document for the data.
     *
     * `UNKNOWN`: Document type could not be determined.
     */
    CreditDocumentType: string | null;
    /**
     * CreditBankStatementUploadItem
     * @description An object containing information about the bank statement upload Item.
     */
    CreditBankStatementUploadItem: {
      item_id: components["schemas"]["ItemId"];
      bank_statements: components["schemas"]["CreditBankStatementUploadObject"][];
      status: components["schemas"]["PayrollItemStatus"];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated.
       */
      updated_at: string | null;
    };
    /**
     * CreditBankStatementUploadObject
     * @description An object containing data that has been parsed from a user-uploaded bank statement.
     */
    CreditBankStatementUploadObject: {
      /** @description An array of transactions appearing on the bank statement. */
      transactions: components["schemas"]["CreditBankStatementUploadTransaction"][];
      document_metadata: components["schemas"]["CreditDocumentMetadata"];
      /** @description An identifier of the document referenced by the document metadata. */
      document_id: string | null;
      /** @description An array of bank accounts associated with the uploaded bank statement. */
      bank_accounts: components["schemas"]["CreditBankStatementUploadBankAccount"][];
      [key: string]: unknown;
    };
    /**
     * CreditBankStatementUploadTransaction
     * @description An object containing data about a transaction appearing on a user-uploaded bank statement.
     */
    CreditBankStatementUploadTransaction: {
      /** @description The value of the transaction. A negative amount indicates that money moved into the account (such as a paycheck being deposited). */
      amount: number | null;
      /**
       * Format: date
       * @description The date of when the transaction was made, in ISO 8601 format (YYYY-MM-DD).
       */
      date: string | null;
      /** @description The raw description of the transaction as it appears on the bank statement. */
      original_description: string | null;
      /** @description The unique id of the bank account that this transaction occurs in */
      account_id: string | null;
    };
    /**
     * CreditBankStatementUploadBankAccount
     * @description An object containing data about a user's bank account related to an uploaded bank statement.
     */
    CreditBankStatementUploadBankAccount: {
      /** @description The name of the bank account */
      name: string | null;
      /** @description The name of the bank institution. */
      bank_name: string | null;
      /** @description The type of the bank account. */
      account_type: string | null;
      /** @description The bank account number. */
      account_number: string | null;
      owner: components["schemas"]["CreditBankStatementUploadAccountOwner"];
      /** @description An array of period objects, containing more data on the overall period of the statement. */
      periods: components["schemas"]["CreditBankStatementUploadBankAccountPeriod"][];
      /** @description The unique id of the bank account */
      account_id: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditBankStatementUploadAccountOwner
     * @description An object containing data about the owner of the bank account for the uploaded bank statement.
     */
    CreditBankStatementUploadAccountOwner: {
      /** @description The name of the account owner */
      name: string | null;
      address: components["schemas"]["CreditBankStatementUploadAccountOwnerAddress"];
      [key: string]: unknown;
    };
    /**
     * CreditBankStatementUploadAccountOwnerAddress
     * @description Address on the uploaded bank statement
     */
    CreditBankStatementUploadAccountOwnerAddress: {
      /** @description The full city name. */
      city: string | null;
      /** @description The ISO 3166-1 alpha-2 country code. */
      country: string | null;
      /** @description The postal code of the address. */
      postal_code: string | null;
      /**
       * @description The region or state.
       * Example: `"NC"`
       */
      region: string | null;
      /** @description The full street address. */
      street: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditBankStatementUploadBankAccountPeriod
     * @description An object containing data on the overall period of the statement.
     */
    CreditBankStatementUploadBankAccountPeriod: {
      /**
       * Format: date
       * @description The start date of the statement period in ISO 8601 format (YYYY-MM-DD).
       */
      start_date: string | null;
      /**
       * Format: date
       * @description The end date of the statement period in ISO 8601 format (YYYY-MM-DD).
       */
      end_date: string | null;
      /** @description The starting balance of the bank account for the period. */
      starting_balance: number | null;
      /** @description The ending balance of the bank account for the period. */
      ending_balance: number | null;
    };
    /**
     * PayrollItem
     * @description An object containing information about the payroll item.
     */
    PayrollItem: {
      item_id: components["schemas"]["ItemId"];
      /** @description The unique identifier of the institution associated with the Item. */
      institution_id: string;
      /** @description The name of the institution associated with the Item. */
      institution_name: string;
      accounts: components["schemas"]["PayrollIncomeAccountData"][];
      payroll_income: components["schemas"]["PayrollIncomeObject"][];
      status: components["schemas"]["PayrollItemStatus"];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the Item was updated.
       */
      updated_at: string | null;
    };
    /**
     * PayrollIncomeAccountData
     * @description An object containing account level data.
     */
    PayrollIncomeAccountData: ({
      /** @description ID of the payroll provider account. */
      account_id: string | null;
      rate_of_pay: components["schemas"]["PayrollIncomeRateOfPay"];
      /** @description The frequency at which an individual is paid. */
      pay_frequency: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * PayrollIncomeObject
     * @description An object representing payroll data.
     */
    PayrollIncomeObject: {
      /** @description ID of the payroll provider account. */
      account_id: string | null;
      /** @description Array of pay stubs for the user. */
      pay_stubs: components["schemas"]["CreditPayStub"][];
      /** @description Array of tax form W-2s. */
      w2s: components["schemas"]["CreditW2"][];
      /** @description Array of tax form 1099s. */
      form1099s: components["schemas"]["Credit1099"][];
      [key: string]: unknown;
    };
    /**
     * Credit1099
     * @description An object representing an end user's 1099 tax form
     */
    Credit1099: {
      /** @description An identifier of the document referenced by the document metadata. */
      document_id: string | null;
      document_metadata?: components["schemas"]["CreditDocumentMetadata"];
      form_1099_type?: components["schemas"]["Form1099Type"];
      recipient?: components["schemas"]["Credit1099Recipient"];
      payer?: components["schemas"]["Credit1099Payer"];
      filer?: components["schemas"]["Credit1099Filer"];
      /** @description Tax year of the tax form. */
      tax_year?: string | null;
      /**
       * Format: double
       * @description Amount in rent by payer.
       */
      rents?: number | null;
      /**
       * Format: double
       * @description Amount in royalties by payer.
       */
      royalties?: number | null;
      /**
       * Format: double
       * @description Amount in other income by payer.
       */
      other_income?: number | null;
      /**
       * Format: double
       * @description Amount of federal income tax withheld from payer.
       */
      federal_income_tax_withheld?: number | null;
      /**
       * Format: double
       * @description Amount of fishing boat proceeds from payer.
       */
      fishing_boat_proceeds?: number | null;
      /**
       * Format: double
       * @description Amount of medical and healthcare payments from payer.
       */
      medical_and_healthcare_payments?: number | null;
      /**
       * Format: double
       * @description Amount of nonemployee compensation from payer.
       */
      nonemployee_compensation?: number | null;
      /**
       * Format: double
       * @description Amount of substitute payments made by payer.
       */
      substitute_payments_in_lieu_of_dividends_or_interest?: number | null;
      /** @description Whether or not payer made direct sales over $5000 of consumer products. */
      payer_made_direct_sales_of_5000_or_more_of_consumer_products_to_buyer?: string | null;
      /**
       * Format: double
       * @description Amount of crop insurance proceeds.
       */
      crop_insurance_proceeds?: number | null;
      /**
       * Format: double
       * @description Amount of golden parachute payments made by payer.
       */
      excess_golden_parachute_payments?: number | null;
      /**
       * Format: double
       * @description Amount of gross proceeds paid to an attorney by payer.
       */
      gross_proceeds_paid_to_an_attorney?: number | null;
      /**
       * Format: double
       * @description Amount of 409A deferrals earned by payer.
       */
      section_409a_deferrals?: number | null;
      /**
       * Format: double
       * @description Amount of 409A income earned by payer.
       */
      section_409a_income?: number | null;
      /**
       * Format: double
       * @description Amount of state tax withheld of payer for primary state.
       */
      state_tax_withheld?: number | null;
      /**
       * Format: double
       * @description Amount of state tax withheld of payer for secondary state.
       */
      state_tax_withheld_lower?: number | null;
      /** @description Primary state ID. */
      payer_state_number?: string | null;
      /** @description Secondary state ID. */
      payer_state_number_lower?: string | null;
      /**
       * Format: double
       * @description State income reported for primary state.
       */
      state_income?: number | null;
      /**
       * Format: double
       * @description State income reported for secondary state.
       */
      state_income_lower?: number | null;
      /** @description One of the values will be provided Payment card Third party network */
      transactions_reported?: string | null;
      /** @description Name of the PSE (Payment Settlement Entity). */
      pse_name?: string | null;
      /** @description Formatted (XXX) XXX-XXXX. Phone number of the PSE (Payment Settlement Entity). */
      pse_telephone_number?: string | null;
      /**
       * Format: double
       * @description Gross amount reported.
       */
      gross_amount?: number | null;
      /**
       * Format: double
       * @description Amount in card not present transactions.
       */
      card_not_present_transaction?: number | null;
      /** @description Merchant category of filer. */
      merchant_category_code?: string | null;
      /** @description Number of payment transactions made. */
      number_of_payment_transactions?: string | null;
      /**
       * Format: double
       * @description Amount reported for January.
       */
      january_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for February.
       */
      february_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for March.
       */
      march_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for April.
       */
      april_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for May.
       */
      may_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for June.
       */
      june_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for July.
       */
      july_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for August.
       */
      august_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for September.
       */
      september_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for October.
       */
      october_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for November.
       */
      november_amount?: number | null;
      /**
       * Format: double
       * @description Amount reported for December.
       */
      december_amount?: number | null;
      /** @description Primary state of business. */
      primary_state?: string | null;
      /** @description Secondary state of business. */
      secondary_state?: string | null;
      /** @description Primary state ID. */
      primary_state_id?: string | null;
      /** @description Secondary state ID. */
      secondary_state_id?: string | null;
      /**
       * Format: double
       * @description State income tax reported for primary state.
       */
      primary_state_income_tax?: number | null;
      /**
       * Format: double
       * @description State income tax reported for secondary state.
       */
      secondary_state_income_tax?: number | null;
      [key: string]: unknown;
    };
    /**
     * Form1099Type
     * @description Form 1099 Type
     * @enum {string}
     */
    Form1099Type: "FORM_1099_TYPE_UNKNOWN" | "FORM_1099_TYPE_MISC" | "FORM_1099_TYPE_K";
    /**
     * Credit1099Payer
     * @description An object representing a payer used by 1099-MISC tax documents.
     */
    Credit1099Payer: {
      address?: components["schemas"]["CreditPayStubAddress"];
      /** @description Name of payer. */
      name?: string | null;
      /** @description Tax identification number of payer. */
      tin?: string | null;
      /** @description Telephone number of payer. */
      telephone_number?: string | null;
      [key: string]: unknown;
    };
    /**
     * Credit1099Recipient
     * @description An object representing a recipient used in both 1099-K and 1099-MISC tax documents.
     */
    Credit1099Recipient: {
      address?: components["schemas"]["CreditPayStubAddress"];
      /** @description Name of recipient. */
      name?: string | null;
      /** @description Tax identification number of recipient. */
      tin?: string | null;
      /** @description Account number number of recipient. */
      account_number?: string | null;
      /** @description Checked if FACTA is a filing requirement. */
      facta_filing_requirement?: string | null;
      /** @description Checked if 2nd TIN exists. */
      second_tin_exists?: string | null;
      [key: string]: unknown;
    };
    /**
     * Credit1099Filer
     * @description An object representing a filer used by 1099-K tax documents.
     */
    Credit1099Filer: {
      address?: components["schemas"]["CreditPayStubAddress"];
      /** @description Name of filer. */
      name?: string | null;
      /** @description Tax identification number of filer. */
      tin?: string | null;
      /** @description One of the following values will be provided: Payment Settlement Entity (PSE), Electronic Payment Facilitator (EPF), Other Third Party */
      type?: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditPayStub
     * @description An object representing an end user's pay stub.
     */
    CreditPayStub: {
      deductions: components["schemas"]["CreditPayStubDeductions"];
      /** @description An identifier of the document referenced by the document metadata. */
      document_id: string | null;
      document_metadata: components["schemas"]["CreditDocumentMetadata"];
      earnings: components["schemas"]["CreditPayStubEarnings"];
      employee: components["schemas"]["CreditPayStubEmployee"];
      employer: components["schemas"]["CreditPayStubEmployer"];
      net_pay: components["schemas"]["CreditPayStubNetPay"];
      pay_period_details: components["schemas"]["PayStubPayPeriodDetails"];
      [key: string]: unknown;
    };
    /**
     * CreditPayStubDeductions
     * @description An object with the deduction information found on a pay stub.
     */
    CreditPayStubDeductions: {
      breakdown: components["schemas"]["PayStubDeductionsBreakdown"][];
      total: components["schemas"]["PayStubDeductionsTotal"];
      [key: string]: unknown;
    };
    /**
     * PayStubDeductionsBreakdown
     * @description An object representing the deduction line items for the pay period
     */
    PayStubDeductionsBreakdown: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount: number | null;
      /** @description Description of the deduction line item */
      description: string | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction
       */
      ytd_amount: number | null;
      [key: string]: unknown;
    };
    /**
     * PayStubDeductionsTotal
     * @description An object representing the total deductions for the pay period
     */
    PayStubDeductionsTotal: {
      /**
       * Format: double
       * @description Raw amount of the deduction
       */
      current_amount: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date total amount of the deductions
       */
      ytd_amount: number | null;
      [key: string]: unknown;
    };
    /**
     * CreditPayStubEarnings
     * @description An object representing both a breakdown of earnings on a pay stub and the total earnings.
     */
    CreditPayStubEarnings: {
      breakdown: components["schemas"]["PayStubEarningsBreakdown"][];
      total: components["schemas"]["PayStubEarningsTotal"];
      [key: string]: unknown;
    };
    /**
     * PayStubEarningsBreakdown
     * @description An object representing the earnings line items for the pay period.
     */
    PayStubEarningsBreakdown: {
      canonical_description: components["schemas"]["PayStubEarningsBreakdownCanonicalDescription"];
      /**
       * Format: double
       * @description Raw amount of the earning line item.
       */
      current_amount: number | null;
      /** @description Description of the earning line item. */
      description: string | null;
      /** @description Number of hours applicable for this earning. */
      hours: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * Format: double
       * @description Hourly rate applicable for this earning.
       */
      rate: number | null;
      /**
       * @description The unofficial currency code associated with the line item. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the deduction.
       */
      ytd_amount: number | null;
      [key: string]: unknown;
    };
    /** @description Commonly used term to describe the earning line item. */
    PayStubEarningsBreakdownCanonicalDescription: string | null;
    /**
     * PayStubEarningsTotal
     * @description An object representing both the current pay period and year to date amount for an earning category.
     */
    PayStubEarningsTotal: {
      /**
       * Format: double
       * @description Total amount of the earnings for this pay period.
       */
      current_amount: number | null;
      /** @description Total number of hours worked for this pay period. */
      hours: number | null;
      /** @description The ISO-4217 currency code of the line item. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the security. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The total year-to-date amount of the earnings.
       */
      ytd_amount: number | null;
      [key: string]: unknown;
    };
    /**
     * CreditPayStubEmployee
     * @description Data about the employee.
     */
    CreditPayStubEmployee: {
      address: components["schemas"]["CreditPayStubAddress"];
      /** @description The name of the employee. */
      name: string | null;
      /** @description Marital status of the employee - either `SINGLE` or `MARRIED` or `NOT LISTED`. */
      marital_status: string | null;
      taxpayer_id: components["schemas"]["PayStubTaxpayerID"];
      [key: string]: unknown;
    };
    /**
     * CreditPayStubAddress
     * @description Address on the pay stub.
     */
    CreditPayStubAddress: {
      /** @description The full city name. */
      city: string | null;
      /** @description The ISO 3166-1 alpha-2 country code. */
      country: string | null;
      /** @description The postal code of the address. */
      postal_code: string | null;
      /**
       * @description The region or state.
       * Example: `"NC"`
       */
      region: string | null;
      /** @description The full street address. */
      street: string | null;
      [key: string]: unknown;
    };
    /**
     * PayStubTaxpayerID
     * @description Taxpayer ID of the individual receiving the paystub.
     */
    PayStubTaxpayerID: {
      /** @description Type of ID, e.g. 'SSN'. */
      id_type: string | null;
      /** @description ID mask; i.e. last 4 digits of the taxpayer ID. */
      id_mask: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditPayStubEmployer
     * @description Information about the employer on the pay stub.
     */
    CreditPayStubEmployer: {
      address: components["schemas"]["CreditPayStubAddress"];
      /** @description The name of the employer on the pay stub. */
      name: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditPayStubNetPay
     * @description An object representing information about the net pay amount on the pay stub.
     */
    CreditPayStubNetPay: {
      /**
       * Format: double
       * @description Raw amount of the net pay for the pay period.
       */
      current_amount: number | null;
      /** @description Description of the net pay. */
      description: string | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /**
       * Format: double
       * @description The year-to-date amount of the net pay.
       */
      ytd_amount: number | null;
      [key: string]: unknown;
    };
    /**
     * PayStubPayPeriodDetails
     * @description Details about the pay period.
     */
    PayStubPayPeriodDetails: {
      /**
       * Format: double
       * @description The amount of the paycheck.
       */
      pay_amount: number | null;
      distribution_breakdown: components["schemas"]["PayStubDistributionBreakdown"][];
      /**
       * Format: date
       * @description The date on which the pay period ended, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      end_date: string | null;
      /**
       * Format: double
       * @description Total earnings before tax/deductions.
       */
      gross_earnings: number | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * Format: date
       * @description The date on which the pay stub was issued, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      pay_date: string | null;
      /** @description The frequency at which an individual is paid. */
      pay_frequency: string | null;
      pay_basis?: components["schemas"]["CreditPayStubPayBasisType"];
      /**
       * Format: date
       * @description The date on which the pay period started, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ("yyyy-mm-dd").
       */
      start_date: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * PayStubDistributionBreakdown
     * @description Information about the accounts that the payment was distributed to.
     */
    PayStubDistributionBreakdown: {
      /** @description Name of the account for the given distribution. */
      account_name: string | null;
      /** @description The name of the bank that the payment is being deposited to. */
      bank_name: string | null;
      /**
       * Format: double
       * @description The amount distributed to this account.
       */
      current_amount: number | null;
      /** @description The ISO-4217 currency code of the net pay. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /** @description The last 2-4 alphanumeric characters of an account's official account number. */
      mask: string | null;
      /** @description Type of the account that the paystub was sent to (e.g. 'checking'). */
      type: string | null;
      /**
       * @description The unofficial currency code associated with the net pay. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * ReportType
     * @description The report type. It can be `asset`. Income report types are not yet supported.
     * @enum {string}
     */
    ReportType: "asset";
    /**
     * DocumentRiskSignal
     * @description Details about a certain reason as to why a document could potentially be fraudulent.
     */
    DocumentRiskSignal: ({
      /**
       * DocumentRiskSignalResultType
       * @description The result from the risk signal check.
       */
      type: string | null;
      /**
       * DocumentRiskSignalField
       * @description The field which the risk signal was computed for
       */
      field: string | null;
      /**
       * DocumentRiskSignalHasFraudRisk
       * @description A flag used to quickly identify if the signal indicates that this field is authentic or fraudulent
       */
      has_fraud_risk: boolean | null;
      institution_metadata: components["schemas"]["DocumentRiskSignalInstitutionMetadata"];
      /**
       * DocumentRiskSignalExpectedValue
       * @description The expected value of the field, as seen on the document
       */
      expected_value: string | null;
      /**
       * DocumentRiskSignalActualValue
       * @description The derived value obtained in the risk signal calculation process for this field
       */
      actual_value: string | null;
      /**
       * DocumentRiskSignalDescription
       * @description A human-readable explanation providing more detail into the particular risk signal
       */
      signal_description: string | null;
      /**
       * DocumentRiskPageNumber
       * @description The relevant page associated with the risk signal
       */
      page_number: number | null;
      [key: string]: unknown;
    }) | null;
    /**
     * DocumentRiskSignalInstitutionMetadata
     * @description An object which contains additional metadata about the institution used to compute the verification attribute
     */
    DocumentRiskSignalInstitutionMetadata: {
      item_id: components["schemas"]["ItemId"];
      [key: string]: unknown;
    } | null;
    /**
     * PayrollItemStatus
     * @description Details about the status of the payroll item.
     */
    PayrollItemStatus: ({
      /**
       * PayrollItemStatusProcessingStatus
       * @description Denotes the processing status for the verification.
       *
       * `UNKNOWN`: The processing status could not be determined.
       *
       * `PROCESSING_COMPLETE`: The processing has completed and the user has approved for sharing. The data is available to be retrieved.
       *
       * `PROCESSING`: The verification is still processing. The data is not available yet.
       *
       * `FAILED`: The processing failed to complete successfully.
       *
       * `APPROVAL_STATUS_PENDING`: The processing has completed but the user has not yet approved the sharing of the data.
       */
      processing_status?: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * CreditW2
     * @description W2 is an object that represents income data taken from a W2 tax document.
     */
    CreditW2: {
      document_metadata: components["schemas"]["CreditDocumentMetadata"];
      /** @description An identifier of the document referenced by the document metadata. */
      document_id: string;
      employer: components["schemas"]["CreditPayStubEmployer"];
      employee: components["schemas"]["CreditPayStubEmployee"];
      /** @description The tax year of the W2 document. */
      tax_year: string | null;
      /** @description An employee identification number or EIN. */
      employer_id_number: string | null;
      /** @description Wages from tips and other compensation. */
      wages_tips_other_comp: string | null;
      /** @description Federal income tax withheld for the tax year. */
      federal_income_tax_withheld: string | null;
      /** @description Wages from social security. */
      social_security_wages: string | null;
      /** @description Social security tax withheld for the tax year. */
      social_security_tax_withheld: string | null;
      /** @description Wages and tips from medicare. */
      medicare_wages_and_tips: string | null;
      /** @description Medicare tax withheld for the tax year. */
      medicare_tax_withheld: string | null;
      /** @description Tips from social security. */
      social_security_tips: string | null;
      /** @description Allocated tips. */
      allocated_tips: string | null;
      /** @description Contents from box 9 on the W2. */
      box_9: string | null;
      /** @description Dependent care benefits. */
      dependent_care_benefits: string | null;
      /** @description Nonqualified plans. */
      nonqualified_plans: string | null;
      box_12: components["schemas"]["W2Box12"][];
      /** @description Statutory employee. */
      statutory_employee: string | null;
      /** @description Retirement plan. */
      retirement_plan: string | null;
      /** @description Third party sick pay. */
      third_party_sick_pay: string | null;
      /** @description Other. */
      other: string | null;
      state_and_local_wages: components["schemas"]["W2StateAndLocalWages"][];
      [key: string]: unknown;
    };
    /**
     * PayrollIncomeRateOfPay
     * @description An object representing the rate at which an individual is paid.
     */
    PayrollIncomeRateOfPay: {
      /** @description The rate at which an employee is paid. */
      pay_rate?: string | null;
      /**
       * Format: double
       * @description The amount at which an employee is paid.
       */
      pay_amount?: number | null;
      [key: string]: unknown;
    };
    /**
     * CreditPayrollIncomePrecheckRequest
     * @description Defines the request schema for `/credit/payroll_income/precheck`.
     */
    CreditPayrollIncomePrecheckRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
      /** @description An array of access tokens corresponding to Items belonging to the user whose eligibility is being checked. Note that if the Items specified here are not already initialized with `transactions`, providing them in this field will cause these Items to be initialized with (and billed for) the Transactions product. */
      access_tokens?: components["schemas"]["AccessToken"][];
      employer?: components["schemas"]["IncomeVerificationPrecheckEmployer"];
      us_military_info?: components["schemas"]["IncomeVerificationPrecheckMilitaryInfo"];
      payroll_institution?: components["schemas"]["IncomeVerificationPrecheckPayrollInstitution"];
    };
    /**
     * CreditPayrollIncomePrecheckResponse
     * @description Defines the response schema for `/credit/payroll_income/precheck`.
     */
    CreditPayrollIncomePrecheckResponse: {
      request_id: components["schemas"]["RequestID"];
      confidence: components["schemas"]["IncomeVerificationPrecheckConfidence"];
      [key: string]: unknown;
    };
    /**
     * CreditPayrollIncomeRefreshRequest
     * @description CreditPayrollIncomeRefreshRequest defines the request schema for `/credit/payroll_income/refresh`
     */
    CreditPayrollIncomeRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
      options?: components["schemas"]["CreditPayrollIncomeRefreshRequestOptions"];
    };
    /** @description An optional object for `/credit/payroll_income/refresh` request options. */
    CreditPayrollIncomeRefreshRequestOptions: {
      /** @description An array of `item_id`s to be refreshed. Each `item_id` should uniquely identify a payroll income item. If this field is not provided, all `item_id`s associated with the `user_token` will be refreshed. */
      item_ids?: string[];
      /** @description The URL where Plaid will send the payroll income refresh webhook. */
      webhook?: string;
    };
    /**
     * CreditPayrollIncomeRefreshResponse
     * @description CreditPayrollIncomeRefreshResponse defines the response schema for `/credit/payroll_income/refresh`
     */
    CreditPayrollIncomeRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      verification_refresh_status: components["schemas"]["CreditPayrollIncomeRefreshStatus"];
      [key: string]: unknown;
    };
    /**
     * CreditEmploymentGetRequest
     * @description CreditEmploymentGetRequest defines the request schema for `/credit/employment/get`.
     */
    CreditEmploymentGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /**
     * CreditEmploymentGetResponse
     * @description CreditEmploymentGetResponse defines the response schema for `/credit/employment/get`.
     */
    CreditEmploymentGetResponse: {
      /** @description Array of employment items. */
      items: components["schemas"]["CreditEmploymentItem"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditEmploymentItem
     * @description The object containing employment items.
     */
    CreditEmploymentItem: {
      item_id: components["schemas"]["ItemId"];
      employments: components["schemas"]["CreditEmploymentVerification"][];
      /**
       * EmploymentReportToken
       * @description Token to represent the underlying Employment data
       */
      employment_report_token?: string;
      [key: string]: unknown;
    };
    /**
     * CreditEmploymentVerification
     * @description The object containing proof of employment data for an individual.
     */
    CreditEmploymentVerification: {
      /** @description ID of the payroll provider account. */
      account_id: string | null;
      status: components["schemas"]["CreditEmploymentVerificationStatus"];
      /**
       * Format: date
       * @description Start of employment in ISO 8601 format (YYYY-MM-DD).
       */
      start_date: string | null;
      /**
       * Format: date
       * @description End of employment, if applicable. Provided in ISO 8601 format (YYY-MM-DD).
       */
      end_date: string | null;
      employer: components["schemas"]["CreditEmployerVerification"];
      /** @description Current title of employee. */
      title: string | null;
      platform_ids: components["schemas"]["CreditPlatformIds"];
      employee_type: components["schemas"]["CreditEmploymentEmployeeType"];
      /**
       * Format: date
       * @description The date of the employee's most recent paystub in ISO 8601 format (YYYY-MM-DD).
       */
      last_paystub_date: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditEmploymentEmployeeType
     * @description The type of employment for the individual.
     * `"FULL_TIME"`: A full-time employee.
     * `"PART_TIME"`: A part-time employee.
     * `"CONTRACTOR"`: An employee typically hired externally through a contracting group.
     * `"TEMPORARY"`: A temporary employee.
     * `"OTHER"`: The employee type is not one of the above defined types.
     */
    CreditEmploymentEmployeeType: string | null;
    /**
     * CreditEmploymentVerificationStatus
     * @description Current employment status.
     */
    CreditEmploymentVerificationStatus: string | null;
    /**
     * CreditEmployerVerification
     * @description An object containing employer data.
     */
    CreditEmployerVerification: {
      /** @description Name of employer. */
      name: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditPlatformIds
     * @description The object containing a set of ids related to an employee.
     */
    CreditPlatformIds: {
      /** @description The ID of an employee as given by their employer. */
      employee_id: string | null;
      /** @description The ID of an employee as given by their payroll. */
      payroll_id: string | null;
      /** @description The ID of the position of the employee. */
      position_id: string | null;
      [key: string]: unknown;
    };
    /** @description The warning associated with the data that was unavailable for the Bank Income Report. */
    CreditBankIncomeWarning: {
      warning_type?: components["schemas"]["CreditBankIncomeWarningType"];
      warning_code?: components["schemas"]["CreditBankIncomeWarningCode"];
      cause?: components["schemas"]["CreditBankIncomeCause"];
    };
    /**
     * @description The warning type which will always be `BANK_INCOME_WARNING`.
     * @enum {string}
     */
    CreditBankIncomeWarningType: "BANK_INCOME_WARNING";
    /**
     * @description The warning code identifies a specific kind of warning.
     * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
     * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
     * `ITEM_UNAPPROVED`: User exited flow before giving permission to share data for the Item
     * `REPORT_DELETED`: Report deleted due to customer or consumer request
     * `DATA_UNAVAILABLE`: No relevant data was found for the Item
     * @enum {string}
     */
    CreditBankIncomeWarningCode: "IDENTITY_UNAVAILABLE" | "TRANSACTIONS_UNAVAILABLE" | "ITEM_UNAPPROVED" | "REPORT_DELETED" | "DATA_UNAVAILABLE";
    /** @description An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
    CreditBankIncomeCause: {
      error_type: components["schemas"]["CreditBankIncomeErrorType"];
      /** @description We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred. */
      error_code: string;
      /** @description A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
      error_message: string;
      /**
       * @description A user-friendly representation of the error code. null if the error is not related to user action.
       * This may change over time and is not safe for programmatic use.
       */
      display_message: string;
      /** @description The `item_id` of the Item associated with this warning. */
      item_id: string;
    };
    /**
     * @description A broad categorization of the error. Safe for programmatic use.
     * @enum {string}
     */
    CreditBankIncomeErrorType: "INTERNAL_SERVER_ERROR" | "INSUFFICIENT_CREDENTIALS" | "ITEM_LOCKED" | "USER_SETUP_REQUIRED" | "COUNTRY_NOT_SUPPORTED" | "INSTITUTION_DOWN" | "INSTITUTION_NO_LONGER_SUPPORTED" | "INSTITUTION_NOT_RESPONDING" | "INVALID_CREDENTIALS" | "INVALID_MFA" | "INVALID_SEND_METHOD" | "ITEM_LOGIN_REQUIRED" | "MFA_NOT_SUPPORTED" | "NO_ACCOUNTS" | "ITEM_NOT_SUPPORTED" | "ACCESS_NOT_GRANTED";
    /** @description CreditRelayCreateRequest defines the request schema for `/credit/relay/create` */
    CreditRelayCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description List of report token strings, with at most one token of each report type. Currently only Asset Report token is supported. */
      report_tokens: string[];
      /** @description The `secondary_client_id` is the client id of the third party with whom you would like to share the relay token. */
      secondary_client_id: string;
      /** @description URL to which Plaid will send webhooks when the Secondary Client successfully retrieves an Asset Report by calling `/credit/relay/get`. */
      webhook?: string | null;
    };
    /** @description CreditRelayCreateResponse defines the response schema for `/credit/relay/create` */
    CreditRelayCreateResponse: {
      /** @description A token that can be shared with a third party to allow them to access the Asset Report. This token should be stored securely. */
      relay_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * CreditRelayGetRequest
     * @description CreditRelayGetRequest defines the request schema for `/credit/relay/get`
     */
    CreditRelayGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `relay_token` granting access to the report you would like to get. */
      relay_token: string;
      report_type: components["schemas"]["ReportType"];
    };
    /**
     * CreditRelayPDFGetRequest
     * @description CreditRelayPDFGetRequest defines the request schema for `/credit/relay/pdf/get`
     */
    CreditRelayPDFGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `relay_token` granting access to the report you would like to get. */
      relay_token: string;
      report_type: components["schemas"]["ReportType"];
    };
    /**
     * CreditRelayPDFGetResponse
     * Format: binary
     * @description CreditRelayPDFGetResponse defines the response schema for `/credit/relay/pdf/get`
     */
    CreditRelayPDFGetResponse: string;
    /** @description CreditRelayRefreshRequest defines the request schema for `/credit/relay/refresh` */
    CreditRelayRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `relay_token` granting access to the report you would like to refresh. */
      relay_token: string;
      report_type: components["schemas"]["ReportType"];
      /** @description The URL registered to receive webhooks when the report of a relay token has been refreshed. */
      webhook?: string | null;
    };
    /** @description CreditRelayRefreshResponse defines the response schema for `/credit/relay/refresh` */
    CreditRelayRefreshResponse: {
      relay_token: string;
      asset_report_id?: components["schemas"]["AssetReportId"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description CreditRelayRemoveRequest defines the request schema for `/credit/relay/remove` */
    CreditRelayRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `relay_token` you would like to revoke. */
      relay_token: string;
    };
    /** @description CreditRelayRemoveResponse defines the response schema for `/credit/relay/remove` */
    CreditRelayRemoveResponse: {
      /** @description `true` if the relay token was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxBankTransferFireWebhookRequest
     * @description Defines the request schema for `/sandbox/bank_transfer/fire_webhook`
     */
    SandboxBankTransferFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The URL to which the webhook should be sent. */
      webhook: string;
    };
    /**
     * SandboxBankTransferFireWebhookResponse
     * @description Defines the response schema for `/sandbox/bank_transfer/fire_webhook`
     */
    SandboxBankTransferFireWebhookResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxTransferFireWebhookRequest
     * @description Defines the request schema for `/sandbox/transfer/fire_webhook`
     */
    SandboxTransferFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The URL to which the webhook should be sent. */
      webhook: string;
    };
    /**
     * SandboxTransferFireWebhookResponse
     * @description Defines the response schema for `/sandbox/transfer/fire_webhook`
     */
    SandboxTransferFireWebhookResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * ApplicationID
     * @description This field will map to the application ID that is returned from /item/application/list, or provided to the institution in an oauth redirect.
     */
    ApplicationID: string;
    /** @description Metadata about the application */
    Application: {
      application_id: components["schemas"]["ApplicationID"];
      /** @description The name of the application */
      name: string;
      /** @description A human-readable name of the application for display purposes */
      display_name: string | null;
      /**
       * Format: date
       * @description The date this application was granted production access at Plaid in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
       */
      join_date: string;
      /** @description A URL that links to the application logo image. */
      logo_url: string | null;
      /** @description The URL for the application's website */
      application_url: string | null;
      /** @description A string provided by the connected app stating why they use their respective enabled products. */
      reason_for_access: string | null;
      /** @description A string representing client’s broad use case as assessed by Plaid. */
      use_case: string | null;
      /** @description A string representing the name of client’s legal entity. */
      company_legal_name: string | null;
      /** @description A string representing the city of the client’s headquarters. */
      city: string | null;
      /** @description A string representing the region of the client’s headquarters. */
      region: string | null;
      /** @description A string representing the postal code of the client’s headquarters. */
      postal_code: string | null;
      /** @description A string representing the country code of the client’s headquarters. */
      country_code: string | null;
    };
    /** @description ApplicationGetRequest defines the schema for `/application/get` */
    ApplicationGetRequest: {
      client_id: components["schemas"]["APIClientID"];
      secret: components["schemas"]["APISecret"];
      application_id: components["schemas"]["ApplicationID"];
    };
    /** @description ApplicationGetResponse defines the response schema for `/application/get` */
    ApplicationGetResponse: {
      request_id: components["schemas"]["RequestID"];
      application: components["schemas"]["Application"];
      [key: string]: unknown;
    };
    /** @description The product access being requested. Used to or disallow product access across all accounts. If unset, defaults to all products allowed. */
    ProductAccess: {
      /**
       * @description Allow access to statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      statements?: boolean | null;
      /**
       * @description Allow access to the Identity product (name, email, phone, address). Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      identity?: boolean | null;
      /**
       * @description Allow access to account number details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      auth?: boolean | null;
      /**
       * @description Allow access to transaction details. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      transactions?: boolean | null;
      /**
       * @description Allow access to "accounts_details_transactions". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_details_transactions?: boolean | null;
      /**
       * @description Allow access to "accounts_routing_number". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_routing_number?: boolean | null;
      /**
       * @description Allow access to "accounts_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_statements?: boolean | null;
      /**
       * @description Allow access to "accounts_tax_statements". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      accounts_tax_statements?: boolean | null;
      /**
       * @description Allow access to "customers_profiles". Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      customers_profiles?: boolean | null;
      [key: string]: unknown;
    };
    /** @description Allow or disallow product access by account. Unlisted (e.g. missing) accounts will be considered `new_accounts`. */
    AccountAccess: {
      /** @description The unique account identifier for this account. This value must match that returned by the data access API for this account. */
      unique_id: string;
      /**
       * @description Allow the application to see this account (and associated details, including balance) in the list of accounts  If unset, defaults to `true`.
       * @default true
       */
      authorized?: boolean | null;
      account_product_access?: components["schemas"]["AccountProductAccessNullable"];
    };
    /** @description Allow the application to access specific products on this account */
    AccountProductAccessNullable: (components["schemas"]["AccountProductAccess"] & {
      [key: string]: unknown;
    }) | null;
    /** @description Allow the application to access specific products on this account */
    AccountProductAccess: {
      /**
       * @description Allow the application to access account data. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      account_data?: boolean | null;
      /**
       * @description Allow the application to access bank statements. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      statements?: boolean | null;
      /**
       * @description Allow the application to access tax documents. Only used by certain partners. If relevant to the partner and unset, defaults to `true`.
       * @default true
       */
      tax_documents?: boolean | null;
    };
    /** @description The scopes object */
    ScopesNullable: (components["schemas"]["Scopes"] & {
      [key: string]: unknown;
    }) | null;
    /** @description The scopes object */
    Scopes: {
      product_access?: components["schemas"]["ProductAccess"];
      accounts?: components["schemas"]["AccountAccess"][];
      /**
       * @description Allow access to newly opened accounts as they are opened. If unset, defaults to `true`.
       * @default true
       */
      new_accounts?: boolean | null;
    };
    /** @description When scopes are updated during enrollment, this field must be populated with the state sent to the partner in the OAuth Login URI. This field is required when the context is `ENROLLMENT`. */
    ScopesState: string;
    /**
     * @description An indicator for when scopes are being updated. When scopes are updated via enrollment (i.e. OAuth), the partner must send `ENROLLMENT`. When scopes are updated in a post-enrollment view, the partner must send `PORTAL`.
     * @enum {string}
     */
    ScopesContext: "ENROLLMENT" | "PORTAL";
    /** @description ItemApplicationUnlinkRequest defines the request schema for `/item/application/unlink/` */
    ItemApplicationUnlinkRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      application_id: components["schemas"]["ApplicationID"];
    };
    /** @description ItemApplicationUnlinkResponse defines the response schema for `/item/application/unlink` */
    ItemApplicationUnlinkResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ItemApplicationScopesUpdateRequest defines the request schema for `/item/application/scopes/update` */
    ItemApplicationScopesUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      application_id: components["schemas"]["ApplicationID"];
      scopes: components["schemas"]["Scopes"];
      state?: components["schemas"]["ScopesState"];
      context: components["schemas"]["ScopesContext"];
    };
    /** @description ItemApplicationScopesUpdateResponse defines the response schema for `/item/application/scopes/update` */
    ItemApplicationScopesUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request to list connected applications for a user. */
    ItemApplicationListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token?: components["schemas"]["AccessTokenNullable"];
    };
    /** @description Describes the connected application for a particular end user. */
    ItemApplicationListResponse: {
      request_id?: components["schemas"]["RequestID"];
      /** @description A list of connected applications. */
      applications: components["schemas"]["ConnectedApplication"][];
      [key: string]: unknown;
    };
    /** @description Describes the connected application for a particular end user. */
    ConnectedApplication: {
      application_id: components["schemas"]["ApplicationID"];
      /** @description The name of the application */
      name: string;
      /** @description A human-readable name of the application for display purposes */
      display_name?: string | null;
      /** @description A URL that links to the application logo image. */
      logo_url?: string | null;
      /** @description The URL for the application's website */
      application_url?: string | null;
      /** @description A string provided by the connected app stating why they use their respective enabled products. */
      reason_for_access?: string | null;
      /**
       * Format: date-time
       * @description The date this application was linked in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
       * @example 2020-01-01
       */
      created_at: string;
      scopes?: components["schemas"]["ScopesNullable"];
    };
    /**
     * @description The application requires that accounts be limited to a specific cardinality.
     * `MULTI_SELECT`: indicates that the user should be allowed to pick multiple accounts.
     * `SINGLE_SELECT`: indicates that the user should be allowed to pick only a single account.
     * `ALL`: indicates that the user must share all of their accounts and should not be given the opportunity to de-select
     * @enum {string}
     */
    AccountSelectionCardinality: "SINGLE_SELECT" | "MULTI_SELECT" | "ALL";
    /** @description Enumerates the account subtypes that the application wishes for the user to be able to select from. For more details refer to Plaid documentation on account filters. */
    AccountFilter: {
      depository?: components["schemas"]["AccountFilterSubtypes"];
      credit?: components["schemas"]["AccountFilterSubtypes"];
      loan?: components["schemas"]["AccountFilterSubtypes"];
      investment?: components["schemas"]["AccountFilterSubtypes"];
    };
    /** @description A list of account subtypes to be filtered. */
    AccountFilterSubtypes: string[];
    /** @description Request to list a historical log of user consent events. */
    ItemActivityListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token?: components["schemas"]["AccessToken"];
      /** @description Cursor used for pagination. */
      cursor?: string;
      /** @default 50 */
      count?: number;
    };
    /** @description Describes a historical log of user consent events. */
    ItemActivityListResponse: {
      request_id: components["schemas"]["RequestID"];
      /** @description A list of activities. */
      activities: components["schemas"]["Activity"][];
      /** @description An array of objects containing timestamps for the last time each data type was accessed per application. */
      last_data_access_times: components["schemas"]["LastDataAccessTimes"][];
      /** @description Cursor used for pagination. */
      cursor?: string;
      [key: string]: unknown;
    };
    /** @description Describes the last time each datatype was accessed by an application. */
    LastDataAccessTimes: {
      /** @description ID of the application accessing data. */
      application_id: string;
      /**
       * Format: date-time
       * @description The last time account_balance_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      account_balance_info: string | null;
      /**
       * Format: date-time
       * @description The last time account_routing_number was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      account_routing_number: string | null;
      /**
       * Format: date-time
       * @description The last time contact_details was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      contact_details: string | null;
      /**
       * Format: date-time
       * @description The last time transactions was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      transactions: string | null;
      /**
       * Format: date-time
       * @description The last time credit_and_loans was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      credit_and_loans: string | null;
      /**
       * Format: date-time
       * @description The last time investments was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      investments: string | null;
      /**
       * Format: date-time
       * @description The last time payroll_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      payroll_info: string | null;
      /**
       * Format: date-time
       * @description The last time transaction_risk_info was accessed by this application in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format in UTC. null if never accessed.
       * @example 2023-02-08T10:00:00Z
       */
      transaction_risk_info: string | null;
      [key: string]: unknown;
    };
    /** @description Describes a consent activity. */
    Activity: {
      activity: components["schemas"]["ActivityType"];
      /**
       * Format: date
       * @description The date this activity was initiated [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format in UTC.
       * @example 2020-01-01
       */
      initiated_date: string;
      /** @description A unique identifier for the activity */
      id: string;
      /** @description Application ID of the client who initiated the activity. */
      initiator: string;
      state: components["schemas"]["ActionState"];
      target_application_id?: components["schemas"]["ApplicationID"];
      scopes?: components["schemas"]["ScopesNullable"];
    };
    /**
     * @description Types of consent activities
     * @enum {string}
     */
    ActivityType: "UNKNOWN" | "ITEM_CREATE" | "ITEM_IMPORT" | "ITEM_UPDATE" | "ITEM_UNLINK" | "PORTAL_UNLINK" | "PORTAL_ITEMS_DELETE" | "ITEM_REMOVE" | "INVARIANT_CHECKER_DELETION" | "SCOPES_UPDATE";
    /**
     * @description Enum representing the state of the action/activity.
     * @enum {string}
     */
    ActionState: "UNKNOWN" | "ATTEMPT" | "SUCCESS" | "FAILURE" | "SKIPPED";
    /**
     * SandboxIncomeFireWebhookRequest
     * @description SandboxIncomeFireWebhookRequest defines the request schema for `/sandbox/income/fire_webhook`
     */
    SandboxIncomeFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The Item ID associated with the verification. */
      item_id: string;
      user_id?: components["schemas"]["UserId"];
      /** @description The URL to which the webhook should be sent. */
      webhook: string;
      /**
       * @description `VERIFICATION_STATUS_PROCESSING_COMPLETE`: The income verification status processing has completed. If the user uploaded multiple documents, this webhook will fire when all documents have finished processing. Call the `/income/verification/paystubs/get` endpoint and check the document metadata to see which documents were successfully parsed.
       *
       * `VERIFICATION_STATUS_PROCESSING_FAILED`: A failure occurred when attempting to process the verification documentation.
       *
       * `VERIFICATION_STATUS_PENDING_APPROVAL`: (deprecated) The income verification has been sent to the user for review.
       * @enum {string}
       */
      verification_status?: "VERIFICATION_STATUS_PROCESSING_COMPLETE" | "VERIFICATION_STATUS_PROCESSING_FAILED" | "VERIFICATION_STATUS_PENDING_APPROVAL";
      webhook_code: components["schemas"]["SandboxIncomeWebhookFireRequestWebhookCode"];
    };
    /**
     * @description The webhook codes that can be fired by this test endpoint.
     * @enum {string}
     */
    SandboxIncomeWebhookFireRequestWebhookCode: "INCOME_VERIFICATION" | "INCOME_VERIFICATION_RISK_SIGNALS";
    /**
     * SandboxIncomeFireWebhookResponse
     * @description SandboxIncomeFireWebhookResponse defines the response schema for `/sandbox/income/fire_webhook`
     */
    SandboxIncomeFireWebhookResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxBankIncomeFireWebhookRequest
     * @description SandboxBankIncomeFireWebhookRequest defines the request schema for `/sandbox/bank_income/fire_webhook`
     */
    SandboxBankIncomeFireWebhookRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The URL to which the webhook should be sent. If provided, this will override the URL set in the dashboard. */
      webhook_override?: string;
      webhook_code: components["schemas"]["SandboxBankIncomeWebhookFireRequestWebhookCode"];
      webhook_fields: components["schemas"]["SandboxBankIncomeWebhookFireRequestWebhookFields"];
    };
    /**
     * @description The webhook codes this endpoint can be used to test
     * @enum {string}
     */
    SandboxBankIncomeWebhookFireRequestWebhookCode: "BANK_INCOME_REFRESH_UPDATE" | "BANK_INCOME_REFRESH_COMPLETE";
    /** @description Optional fields which will be populated in the simulated webhook */
    SandboxBankIncomeWebhookFireRequestWebhookFields: {
      /** @description The user id to be returned in INCOME webhooks */
      user_id: string;
      bank_income_refresh_complete_result?: components["schemas"]["BankIncomeRefreshCompleteResult"];
    };
    /**
     * SandboxBankIncomeFireWebhookResponse
     * @description SandboxBankIncomeFireWebhookResponse defines the response schema for `/sandbox/bank_income/fire_webhook`
     */
    SandboxBankIncomeFireWebhookResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description User authentication parameters, for clients making a request without an `access_token`. This is only allowed for select clients and will not be supported in the future. Most clients should call /item/import to obtain an access token before making a request. */
    ItemApplicationListUserAuth: ({
      /** @description Account username. */
      user_id?: string | null;
      /** @description Account username hashed by FI. */
      fi_username_hash?: string | null;
    }) | null;
    /**
     * SignalEvaluateRequest
     * @description SignalEvaluateRequest defines the request schema for `/signal/evaluate`
     */
    SignalEvaluateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /**
       * @description The Plaid `account_id` of the account that is the funding source for the proposed transaction. The `account_id` is returned in the `/accounts/get` endpoint as well as the [`onSuccess`](/docs/link/ios/#link-ios-onsuccess-linkSuccess-metadata-accounts-id) callback metadata.
       *
       * This will return an [`INVALID_ACCOUNT_ID`](/docs/errors/invalid-input/#invalid_account_id) error if the account has been removed at the bank or if the `account_id` is no longer valid.
       */
      account_id: string;
      /** @description The unique ID that you would like to use to refer to this transaction. For your convenience mapping your internal data, you could use your internal ID/identifier for this transaction. The max length for this field is 36 characters. */
      client_transaction_id: string;
      /**
       * Format: double
       * @description The transaction amount, in USD (e.g. `102.05`)
       */
      amount: number;
      /** @description `true` if the end user is present while initiating the ACH transfer and the endpoint is being called; `false` otherwise (for example, when the ACH transfer is scheduled and the end user is not present, or you call this endpoint after the ACH transfer but before submitting the Nacha file for ACH processing). */
      user_present?: boolean | null;
      /** @description A unique ID that identifies the end user in your system. This ID is used to correlate requests by a user with multiple Items. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`. */
      client_user_id?: string;
      /** @description `true` if the ACH transaction is a recurring transaction; `false` otherwise */
      is_recurring?: boolean | null;
      /**
       * @description The default ACH or non-ACH payment method to complete the transaction.
       * `SAME_DAY_ACH`: Same Day ACH by NACHA. The debit transaction is processed and settled on the same day
       * `NEXT_DAY_ACH`: Next Day ACH settlement for debit transactions, offered by some payment processors
       * `STANDARD_ACH`: standard ACH by NACHA
       * `REAL_TIME_PAYMENTS`: real-time payments such as RTP and FedNow
       * `DEBIT_CARD`: if the default payment is over debit card networks
       * `MULTIPLE_PAYMENT_METHODS`: if there is no default debit rail or there are multiple payment methods
       * Possible values:  `SAME_DAY_ACH`, `NEXT_DAY_ACH`, `STANDARD_ACH`, `REAL_TIME_PAYMENTS`, `DEBIT_CARD`, `MULTIPLE_PAYMENT_METHODS`
       */
      default_payment_method?: string | null;
      user?: components["schemas"]["SignalUser"];
      device?: components["schemas"]["SignalDevice"];
    };
    /**
     * SignalUser
     * @description Details about the end user initiating the transaction (i.e., the account holder).
     */
    SignalUser: {
      name?: components["schemas"]["SignalPersonName"];
      /** @description The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567" */
      phone_number?: string | null;
      /** @description The user's email address. */
      email_address?: string | null;
      address?: components["schemas"]["SignalAddressData"];
    };
    /**
     * SignalPersonName
     * @description The user's legal name
     */
    SignalPersonName: ({
      /** @description The user's name prefix (e.g. "Mr.") */
      prefix?: string | null;
      /** @description The user's given name. If the user has a one-word name, it should be provided in this field. */
      given_name?: string | null;
      /** @description The user's middle name */
      middle_name?: string | null;
      /** @description The user's family name / surname */
      family_name?: string | null;
      /** @description The user's name suffix (e.g. "II") */
      suffix?: string | null;
    }) | null;
    /**
     * AddressData
     * @description Data about the components comprising an address.
     */
    SignalAddressData: ({
      /** @description The full city name */
      city?: string;
      /**
       * @description The region or state
       * Example: `"NC"`
       */
      region?: string | null;
      /**
       * @description The full street address
       * Example: `"564 Main Street, APT 15"`
       */
      street?: string;
      /** @description The postal code */
      postal_code?: string | null;
      /** @description The ISO 3166-1 alpha-2 country code */
      country?: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * SignalEvaluateDevice
     * @description Details about the end user's device
     */
    SignalDevice: {
      /** @description The IP address of the device that initiated the transaction */
      ip_address?: string | null;
      /** @description The user agent of the device that initiated the transaction (e.g. "Mozilla/5.0") */
      user_agent?: string | null;
    };
    /**
     * SignalEvaluateResponse
     * @description SignalEvaluateResponse defines the response schema for `/signal/income/evaluate`
     */
    SignalEvaluateResponse: {
      request_id: components["schemas"]["RequestID"];
      scores: components["schemas"]["SignalScores"];
      core_attributes?: components["schemas"]["SignalEvaluateCoreAttributes"];
      /** @description If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager. */
      warnings: components["schemas"]["SignalWarning"][];
      [key: string]: unknown;
    };
    /**
     * TransferAuthorizationPaymentRisk
     * @description This object includes the scores and risk level. This response is offered as an add-on to /transfer/authorization/create. To request access to these fields please contact your Plaid account manager.
     */
    TransferAuthorizationPaymentRisk: ({
      /**
       * @description A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
       *
       * The score evaluates the transaction return risk because an account is overdrawn or because an ineligible account is used and covers return codes: "R01", "R02", "R03", "R04", "R06", "R08",  "R09", "R13",
       * "R16", "R17", "R20", "R23". These returns have a turnaround time of 2 banking days.
       */
      bank_initiated_return_score: number | null;
      /**
       * @description A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood.
       *
       * The score evaluates the transaction return risk of an unauthorized debit and covers return codes: "R05", "R07", "R10", "R11", "R29".
       * These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.
       */
      customer_initiated_return_score: number | null;
      risk_level: components["schemas"]["TransferAuthorizationRiskLevel"];
      /** @description If bank information was not available to be used in the Signal model, this array contains warnings describing why bank data is missing. If you want to receive an API error instead of Signal scores in the case of missing bank data, file a support ticket or contact your Plaid account manager. */
      warnings: components["schemas"]["SignalWarning"][];
      [key: string]: unknown;
    }) | null;
    /**
     * @description Comprises five risk categories (high risk, medium-high risk, medium risk, medium-low risk, low risk) based on the probability of return
     * @enum {string|null}
     */
    TransferAuthorizationRiskLevel: "HIGH_RISK" | "MEDIUM_HIGH_RISK" | "MEDIUM_RISK" | "MEDIUM_LOW_RISK" | "LOW_RISK" | null;
    /**
     * SignalEvaluateScores
     * @description Risk scoring details broken down by risk category.
     */
    SignalScores: {
      customer_initiated_return_risk?: components["schemas"]["CustomerInitiatedReturnRisk"];
      bank_initiated_return_risk?: components["schemas"]["BankInitiatedReturnRisk"];
      [key: string]: unknown;
    };
    /** @description A score from 1-99 that indicates the transaction return risk: a higher risk score suggests a higher return likelihood. */
    SignalScore: number;
    /**
     * @description A tier corresponding to the projected likelihood that the transaction, if initiated, will be subject to a return.
     *
     * In the `customer_initiated_return_risk` object, there are five risk tiers corresponding to the scores:
     *   1: Predicted customer-initiated return incidence rate between 0.00% - 0.02%
     *   2: Predicted customer-initiated return incidence rate between 0.02% - 0.05%
     *   3: Predicted customer-initiated return incidence rate between 0.05% - 0.1%
     *   4: Predicted customer-initiated return incidence rate between 0.1% - 0.5%
     *   5: Predicted customer-initiated return incidence rate greater than 0.5%
     */
    CustomerInitiatedRiskTier: number;
    /**
     * CustomerInitiatedReturnRisk
     * @description The object contains a risk score and a risk tier that evaluate the transaction return risk of an unauthorized debit. Common return codes in this category include: "R05", "R07", "R10", "R11", "R29". These returns typically have a return time frame of up to 60 calendar days. During this period, the customer of financial institutions can dispute a transaction as unauthorized.
     */
    CustomerInitiatedReturnRisk: {
      score: components["schemas"]["SignalScore"];
      risk_tier: components["schemas"]["CustomerInitiatedRiskTier"];
    };
    /**
     * @description In the `bank_initiated_return_risk` object, there are eight risk tiers corresponding to the scores:
     *   1: Predicted bank-initiated return incidence rate between 0.0% - 0.5%
     *   2: Predicted bank-initiated return incidence rate between 0.5% - 1.5%
     *   3: Predicted bank-initiated return incidence rate between 1.5% - 3%
     *   4: Predicted bank-initiated return incidence rate between 3% - 5%
     *   5: Predicted bank-initiated return incidence rate between 5% - 10%
     *   6: Predicted bank-initiated return incidence rate between 10% - 15%
     *   7: Predicted bank-initiated return incidence rate between 15% and 50%
     *   8: Predicted bank-initiated return incidence rate greater than 50%
     */
    BankInitiatedRiskTier: number;
    /**
     * BankInitiatedReturnRisk
     * @description The object contains a risk score and a risk tier that evaluate the transaction return risk because an account is overdrawn or because an ineligible account is used. Common return codes in this category include: "R01", "R02", "R03", "R04", "R06", "R08",  "R09", "R13", "R16", "R17", "R20", "R23". These returns have a turnaround time of 2 banking days.
     */
    BankInitiatedReturnRisk: {
      score: components["schemas"]["SignalScore"];
      risk_tier: components["schemas"]["BankInitiatedRiskTier"];
    };
    /**
     * SignalEvaluateCoreAttributes
     * @description The core attributes object contains additional data that can be used to assess the ACH return risk. Examples of data include:
     *
     * `days_since_first_plaid_connection`: The number of days since the first time the Item was connected to an application via Plaid
     * `plaid_connections_count_7d`: The number of times the Item has been connected to applications via Plaid over the past 7 days
     * `plaid_connections_count_30d`: The number of times the Item has been connected to applications via Plaid over the past 30 days
     * `total_plaid_connections_count`: The number of times the Item has been connected to applications via Plaid
     * `is_savings_or_money_market_account`: Indicates whether the ACH transaction funding account is a savings/money market account
     *
     * For the full list and detailed documentation of core attributes available, or to request that core attributes not be returned, contact Sales or your Plaid account manager
     */
    SignalEvaluateCoreAttributes: {
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 7 days from the account that will be debited. */
      unauthorized_transactions_count_7d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 30 days from the account that will be debited. */
      unauthorized_transactions_count_30d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 60 days from the account that will be debited. */
      unauthorized_transactions_count_60d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to unauthorized transactions over the past 90 days from the account that will be debited. */
      unauthorized_transactions_count_90d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 7 days from the account that will be debited. */
      nsf_overdraft_transactions_count_7d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 30 days from the account that will be debited. */
      nsf_overdraft_transactions_count_30d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 60 days from the account that will be debited. */
      nsf_overdraft_transactions_count_60d?: number | null;
      /** @description We parse and analyze historical transaction metadata to identify the number of possible past returns due to non-sufficient funds/overdrafts over the past 90 days from the account that will be debited. */
      nsf_overdraft_transactions_count_90d?: number | null;
      /** @description The number of days since the first time the Item was connected to an application via Plaid */
      days_since_first_plaid_connection?: number | null;
      /** @description The number of times the Item has been connected to applications via Plaid over the past 7 days */
      plaid_connections_count_7d?: number | null;
      /** @description The number of times the Item has been connected to applications via Plaid over the past 30 days */
      plaid_connections_count_30d?: number | null;
      /** @description The total number of times the Item has been connected to applications via Plaid */
      total_plaid_connections_count?: number | null;
      /** @description Indicates if the ACH transaction funding account is a savings/money market account */
      is_savings_or_money_market_account?: boolean | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 10 days from the account that will be debited
       */
      total_credit_transactions_amount_10d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 10 days from the account that will be debited
       */
      total_debit_transactions_amount_10d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p50_credit_transactions_amount_28d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p50_debit_transactions_amount_28d?: number | null;
      /**
       * Format: double
       * @description The 95th percentile of all credit (inflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p95_credit_transactions_amount_28d?: number | null;
      /**
       * Format: double
       * @description The 95th percentile of all debit (outflow) transaction amounts over the past 28 days from the account that will be debited
       */
      p95_debit_transactions_amount_28d?: number | null;
      /** @description The number of days within the past 90 days when the account that will be debited had a negative end-of-day available balance */
      days_with_negative_balance_count_90d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
       */
      p90_eod_balance_30d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
       */
      p90_eod_balance_60d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
       */
      p90_eod_balance_90d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
       */
      p10_eod_balance_30d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
       */
      p10_eod_balance_60d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
       */
      p10_eod_balance_90d?: number | null;
      /**
       * Format: double
       * @description Available balance, as of the `balance_last_updated` time. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
       */
      available_balance?: number | null;
      /**
       * Format: double
       * @description Current balance, as of the `balance_last_updated` time. The current balance is the total amount of funds in the account.
       */
      current_balance?: number | null;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the balance for the given account has been updated.
       */
      balance_last_updated?: string | null;
      /** @description The number of times the account's phone numbers on file have changed over the past 28 days */
      phone_change_count_28d?: number | null;
      /** @description The number of times the account's phone numbers on file have changed over the past 90 days */
      phone_change_count_90d?: number | null;
      /** @description The number of times the account's email addresses on file have changed over the past 28 days */
      email_change_count_28d?: number | null;
      /** @description The number of times the account's email addresses on file have changed over the past 90 days */
      email_change_count_90d?: number | null;
      /** @description The number of times the account's addresses on file have changed over the past 28 days */
      address_change_count_28d?: number | null;
      /** @description The number of times the account's addresses on file have changed over the past 90 days */
      address_change_count_90d?: number | null;
      /** @description The number of non-OAuth authentication attempts via Plaid for this bank account over the past 3 days */
      plaid_non_oauth_authentication_attempts_count_3d?: number | null;
      /** @description The number of non-OAuth authentication attempts via Plaid for this bank account over the past 7 days */
      plaid_non_oauth_authentication_attempts_count_7d?: number | null;
      /** @description The number of non-OAuth authentication attempts via Plaid for this bank account over the past 30 days */
      plaid_non_oauth_authentication_attempts_count_30d?: number | null;
      /** @description The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 3 days */
      failed_plaid_non_oauth_authentication_attempts_count_3d?: number | null;
      /** @description The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 7 days */
      failed_plaid_non_oauth_authentication_attempts_count_7d?: number | null;
      /** @description The number of failed non-OAuth authentication attempts via Plaid for this bank account over the past 30 days */
      failed_plaid_non_oauth_authentication_attempts_count_30d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 10 days from the account that will be debited */
      debit_transactions_count_10d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 10 days from the account that will be debited */
      credit_transactions_count_10d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 30 days from the account that will be debited */
      debit_transactions_count_30d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 30 days from the account that will be debited */
      credit_transactions_count_30d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 60 days from the account that will be debited */
      debit_transactions_count_60d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 60 days from the account that will be debited */
      credit_transactions_count_60d?: number | null;
      /** @description The total number of debit (outflow) transactions over the past 90 days from the account that will be debited */
      debit_transactions_count_90d?: number | null;
      /** @description The total number of credit (inflow) transactions over the past 90 days from the account that will be debited */
      credit_transactions_count_90d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 30 days from the account that will be debited
       */
      total_debit_transactions_amount_30d?: number | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 30 days from the account that will be debited
       */
      total_credit_transactions_amount_30d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 60 days from the account that will be debited
       */
      total_debit_transactions_amount_60d?: number | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 60 days from the account that will be debited
       */
      total_credit_transactions_amount_60d?: number | null;
      /**
       * Format: double
       * @description The total debit (outflow) transaction amount over the past 90 days from the account that will be debited
       */
      total_debit_transactions_amount_90d?: number | null;
      /**
       * Format: double
       * @description The total credit (inflow) transaction amount over the past 90 days from the account that will be debited
       */
      total_credit_transactions_amount_90d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance over the past 30 days of the account that will be debited
       */
      p50_eod_balance_30d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance over the past 60 days of the account that will be debited
       */
      p50_eod_balance_60d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance over the past 90 days of the account that will be debited
       */
      p50_eod_balance_90d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
       */
      p50_eod_balance_31d_to_60d?: number | null;
      /**
       * Format: double
       * @description The 50th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
       */
      p50_eod_balance_61d_to_90d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
       */
      p90_eod_balance_31d_to_60d?: number | null;
      /**
       * Format: double
       * @description The 90th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
       */
      p90_eod_balance_61d_to_90d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance between day 31 and day 60 over the past 60 days of the account that will be debited
       */
      p10_eod_balance_31d_to_60d?: number | null;
      /**
       * Format: double
       * @description The 10th percentile of the end-of-day available balance between day 61 and day 90 over the past 60 days of the account that will be debited
       */
      p10_eod_balance_61d_to_90d?: number | null;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDTHH:mm:ssZ) indicating the last time that the transactions for the given account have been updated.
       */
      transactions_last_updated?: string | null;
    };
    /**
     * SignalWarning
     * @description Conveys information about the errors causing missing or stale bank data used to construct the /signal/evaluate scores and response
     */
    SignalWarning: {
      /** @description A broad categorization of the warning. Safe for programmatic use. */
      warning_type?: string;
      /** @description The warning code identifies a specific kind of warning that pertains to the error causing bank data to be missing. Safe for programmatic use. For more details on warning codes, please refer to Plaid standard error codes documentation. If you receive the `ITEM_LOGIN_REQUIRED` warning, we recommend re-authenticating your user by implementing Link's update mode. This will guide your user to fix their credentials, allowing Plaid to start fetching data again for future Signal requests. */
      warning_code?: string;
      /** @description A developer-friendly representation of the warning type. This may change over time and is not safe for programmatic use. */
      warning_message?: string;
    };
    /**
     * SignalDecisionReportRequest
     * @description SignalDecisionReportRequest defines the request schema for `/signal/decision/report`
     */
    SignalDecisionReportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate` */
      client_transaction_id: string;
      /**
       * @description `true` if the ACH transaction was initiated, `false` otherwise.
       *
       * This field must be returned as a boolean. If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
       */
      initiated: boolean;
      /**
       * @description The actual number of days (hold time) since the ACH debit transaction that you wait before making funds available to your customers. The holding time could affect the ACH return rate.
       *
       * For example, use 0 if you make funds available to your customers instantly or the same day following the debit transaction, or 1 if you make funds available the next day following the debit initialization.
       */
      days_funds_on_hold?: number | null;
      decision_outcome?: components["schemas"]["SignalDecisionOutcome"];
      payment_method?: components["schemas"]["SignalPaymentMethod"];
      /**
       * Format: double
       * @description The amount (in USD) made available to your customers instantly following the debit transaction. It could be a partial amount of the requested transaction (example: 102.05).
       */
      amount_instantly_available?: number | null;
    };
    /**
     * SignalDecisionReportResponse
     * @description SignalDecisionReportResponse defines the response schema for `/signal/decision/report`
     */
    SignalDecisionReportResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SignalReturnReportRequest
     * @description SignalReturnReportRequest defines the request schema for `/signal/return/report`
     */
    SignalReturnReportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Must be the same as the `client_transaction_id` supplied when calling `/signal/evaluate` */
      client_transaction_id: string;
      /**
       * @description Must be a valid ACH return code (e.g. "R01")
       *
       * If formatted incorrectly, this will result in an [`INVALID_FIELD`](/docs/errors/invalid-request/#invalid_field) error.
       */
      return_code: string;
      /**
       * Format: date-time
       * @description Date and time when you receive the returns from your payment processors, in ISO 8601 format (`YYYY-MM-DDTHH:mm:ssZ`).
       */
      returned_at?: string | null;
    };
    /**
     * SignalReturnReportResponse
     * @description SignalReturnReportResponse defines the response schema for `/signal/return/report`
     */
    SignalReturnReportResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SignalPrepareRequest
     * @description SignalPrepareRequest defines the request schema for `/signal/prepare`
     */
    SignalPrepareRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /**
     * SignalPrepareResponse
     * @description SignalPrepareResponse defines the response schema for `/signal/prepare`
     */
    SignalPrepareResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * SandboxOauthSelectAccountsRequest
     * @description Defines the request schema for `sandbox/oauth/select_accounts`
     */
    SandboxOauthSelectAccountsRequest: {
      oauth_state_id: string;
      accounts: string[];
    };
    /**
     * SandboxOauthSelectAccountsResponse
     * @description Defines the response schema for `/sandbox/oauth/select_accounts`
     */
    SandboxOauthSelectAccountsResponse: {
      [key: string]: unknown;
    };
    /**
     * NewAccountsAvailableWebhook
     * @description Fired when Plaid detects a new account for Items created or updated with [Account Select v2](https://plaid.com/docs/link/customization/#account-select). Upon receiving this webhook, you can prompt your users to share new accounts with you through [Account Select v2 update mode](https://plaid.com/docs/link/update-mode/#using-update-mode-to-request-new-accounts).
     */
    NewAccountsAvailableWebhook: {
      /** @description `ITEM` */
      webhook_type?: string;
      /** @description `NEW_ACCOUNTS_AVAILABLE` */
      webhook_code?: string;
      item_id?: components["schemas"]["ItemId"];
      error?: components["schemas"]["PlaidError"];
      environment?: components["schemas"]["WebhookEnvironmentValues"];
    };
    /** @description WalletCreateRequest defines the request schema for `/wallet/create` */
    WalletCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      iso_currency_code: components["schemas"]["WalletISOCurrencyCode"];
    };
    /** @description WalletCreateResponse defines the response schema for `/wallet/create` */
    WalletCreateResponse: WithRequired<{
      [key: string]: unknown;
    } & components["schemas"]["Wallet"] & {
      request_id?: components["schemas"]["RequestID"];
    }, "wallet_id" | "balance" | "request_id">;
    /** @description WalletGetRequest defines the request schema for `/wallet/get` */
    WalletGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the e-wallet */
      wallet_id: string;
    };
    /** @description WalletGetResponse defines the response schema for `/wallet/get` */
    WalletGetResponse: WithRequired<{
      [key: string]: unknown;
    } & components["schemas"]["Wallet"] & {
      request_id?: components["schemas"]["RequestID"];
    }, "wallet_id" | "balance" | "request_id">;
    /** @description WalletListRequest defines the request schema for `/wallet/list` */
    WalletListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      iso_currency_code?: components["schemas"]["WalletISOCurrencyCode"];
      /** @description A base64 value representing the latest e-wallet that has already been requested. Set this to `next_cursor` received from the previous `/wallet/list` request. If provided, the response will only contain e-wallets created before that e-wallet. If omitted, the response will contain e-wallets starting from the most recent, and in descending order. */
      cursor?: string;
      /**
       * @description The number of e-wallets to fetch
       * @default 10
       */
      count?: number;
    };
    /** @description WalletListResponse defines the response schema for `/wallet/list` */
    WalletListResponse: {
      /** @description An array of e-wallets */
      wallets: components["schemas"]["Wallet"][];
      /** @description Cursor used for fetching e-wallets created before the latest e-wallet provided in this response */
      next_cursor?: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * Wallet
     * @description An object representing the e-wallet
     */
    Wallet: {
      /** @description A unique ID identifying the e-wallet */
      wallet_id: string;
      balance: components["schemas"]["WalletBalance"];
      numbers: components["schemas"]["WalletNumbers"];
      /** @description The ID of the recipient that corresponds to the e-wallet account numbers */
      recipient_id?: string;
      status: components["schemas"]["WalletStatus"];
      [key: string]: unknown;
    };
    /**
     * WalletNumbers
     * @description An object representing the e-wallet account numbers
     */
    WalletNumbers: {
      bacs?: components["schemas"]["RecipientBACS"];
      international?: components["schemas"]["NumbersInternationalIBAN"];
      [key: string]: unknown;
    };
    /**
     * WalletBalance
     * @description An object representing the e-wallet balance
     */
    WalletBalance: {
      /** @description The ISO-4217 currency code of the balance */
      iso_currency_code: string;
      /**
       * Format: double
       * @description The total amount of funds in the account
       */
      current: number;
      [key: string]: unknown;
    };
    /**
     * ISO Currency Code
     * @description An ISO-4217 currency code, used with e-wallets and transactions.
     * @enum {string}
     */
    WalletISOCurrencyCode: "GBP" | "EUR";
    /**
     * @description The status of the wallet.
     *
     * `UNKNOWN`: The wallet status is unknown.
     *
     * `ACTIVE`: The wallet is active and ready to send money to and receive money from.
     *
     * `CLOSED`: The wallet is closed. Any transactions made to or from this wallet will error.
     * @enum {string}
     */
    WalletStatus: "UNKNOWN" | "ACTIVE" | "CLOSED";
    /** @description WalletTransactionExecuteRequest defines the request schema for `/wallet/transaction/execute` */
    WalletTransactionExecuteRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      idempotency_key: components["schemas"]["WalletTransactionIdempotencyKey"];
      /** @description The ID of the e-wallet to debit from */
      wallet_id: string;
      counterparty: components["schemas"]["WalletTransactionCounterparty"];
      amount: components["schemas"]["WalletTransactionAmount"];
      /**
       * @description A reference for the transaction. This must be an alphanumeric string with 6 to 18 characters and must not contain any special characters or spaces.
       * Ensure that the `reference` field is unique for each transaction.
       */
      reference: string;
    };
    /**
     * WalletTransactionIdempotencyKey
     * @description A random key provided by the client, per unique wallet transaction. Maximum of 128 characters.
     *
     * The API supports idempotency for safely retrying requests without accidentally performing the same operation twice. If a request to execute a wallet transaction fails due to a network connection error, then after a minimum delay of one minute, you can retry the request with the same idempotency key to guarantee that only a single wallet transaction is created. If the request was successfully processed, it will prevent any transaction that uses the same idempotency key, and was received within 24 hours of the first request, from being processed.
     */
    WalletTransactionIdempotencyKey: string;
    /**
     * WalletTransactionCounterparty
     * @description An object representing the e-wallet transaction's counterparty
     */
    WalletTransactionCounterparty: {
      /** @description The name of the counterparty */
      name: string;
      numbers: components["schemas"]["WalletTransactionCounterpartyNumbers"];
      address?: components["schemas"]["PaymentInitiationAddress"];
      /**
       * Format: date
       * @description The counterparty's birthdate, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.
       */
      date_of_birth?: string | null;
      [key: string]: unknown;
    };
    /**
     * WalletTransactionCounterpartyNumbers
     * @description The counterparty's bank account numbers. Exactly one of IBAN or BACS data is required.
     */
    WalletTransactionCounterpartyNumbers: {
      bacs?: components["schemas"]["WalletTransactionCounterpartyBACS"];
      international?: components["schemas"]["WalletTransactionCounterpartyInternational"];
      [key: string]: unknown;
    };
    /** @description The account number and sort code of the counterparty's account */
    WalletTransactionCounterpartyBACS: components["schemas"]["RecipientBACS"] & {
      [key: string]: unknown;
    };
    /** @description International Bank Account Number for a Wallet Transaction */
    WalletTransactionCounterpartyInternational: {
      iban?: components["schemas"]["NumbersIBAN"];
      [key: string]: unknown;
    } | null;
    /**
     * WalletTransactionAmount
     * @description The amount and currency of a transaction
     */
    WalletTransactionAmount: {
      iso_currency_code: components["schemas"]["WalletISOCurrencyCode"];
      /**
       * Format: double
       * @description The amount of the transaction. Must contain at most two digits of precision e.g. `1.23`.
       */
      value: number;
      [key: string]: unknown;
    };
    /** @description WalletTransactionExecuteResponse defines the response schema for `/wallet/transaction/execute` */
    WalletTransactionExecuteResponse: {
      /** @description A unique ID identifying the transaction */
      transaction_id: string;
      status: components["schemas"]["WalletTransactionStatus"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * @description The status of the transaction.
     *
     * `AUTHORISING`: The transaction is being processed for validation and compliance.
     *
     * `INITIATED`: The transaction has been initiated and is currently being processed.
     *
     * `EXECUTED`: The transaction has been successfully executed and is considered complete. This is only applicable for debit transactions.
     *
     * `SETTLED`: The transaction has settled and funds are available for use. This is only applicable for credit transactions. A transaction will typically settle within seconds to several days, depending on which payment rail is used.
     *
     * `FAILED`: The transaction failed to process successfully. This is a terminal status.
     *
     * `BLOCKED`: The transaction has been blocked for violating compliance rules. This is a terminal status.
     * @enum {string}
     */
    WalletTransactionStatus: "AUTHORISING" | "INITIATED" | "EXECUTED" | "SETTLED" | "BLOCKED" | "FAILED";
    /**
     * @description The error code of a failed transaction. Error codes include:
     * `EXTERNAL_SYSTEM`: The transaction was declined by an external system.
     * `EXPIRED`: The transaction request has expired.
     * `CANCELLED`: The transaction request was rescinded.
     * `INVALID`: The transaction did not meet certain criteria, such as an inactive account or no valid counterparty, etc.
     * `UNKNOWN`: The transaction was unsuccessful, but the exact cause is unknown.
     * @enum {string|null}
     */
    WalletTransactionFailureReason: "EXTERNAL_SYSTEM" | "EXPIRED" | "CANCELLED" | "INVALID" | "UNKNOWN" | null;
    /** @description WalletTransactionGetRequest defines the request schema for `/wallet/transaction/get` */
    WalletTransactionGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the transaction to fetch */
      transaction_id: string;
    };
    /**
     * WalletTransactionGetResponse
     * @description WalletTransactionGetResponse defines the response schema for `/wallet/transaction/get`
     */
    WalletTransactionGetResponse: WithRequired<{
      [key: string]: unknown;
    } & components["schemas"]["WalletTransaction"] & {
      request_id?: components["schemas"]["RequestID"];
    }, "transaction_id" | "reference" | "type" | "amount" | "counterparty" | "status" | "created_at" | "request_id">;
    /** @description WalletTransactionListRequest defines the request schema for `/wallet/transaction/list` */
    WalletTransactionListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the e-wallet to fetch transactions from */
      wallet_id: string;
      /** @description A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time. */
      cursor?: string;
      /**
       * @description The number of transactions to fetch
       * @default 10
       */
      count?: number;
      options?: components["schemas"]["WalletTransactionListRequestOptions"];
    };
    /** @description WalletTransactionListRequest defines the request schema for `/wallet/transaction/list` */
    WalletTransactionsListRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID of the e-wallet to fetch transactions from */
      wallet_id: string;
      /** @description A base64 value representing the latest transaction that has already been requested. Set this to `next_cursor` received from the previous `/wallet/transaction/list` request. If provided, the response will only contain transactions created before that transaction. If omitted, the response will contain transactions starting from the most recent, and in descending order by the `created_at` time. */
      cursor?: string;
      /**
       * @description The number of transactions to fetch
       * @default 10
       */
      count?: number;
      options?: components["schemas"]["WalletTransactionListRequestOptions"];
    };
    /** @description Additional wallet transaction options */
    WalletTransactionListRequestOptions: {
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date.
       */
      start_time?: string;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DDThh:mm:ssZ) for filtering transactions, inclusive of the provided date.
       */
      end_time?: string;
    } | null;
    /** @description WalletTransactionListResponse defines the response schema for `/wallet/transaction/list` */
    WalletTransactionListResponse: {
      /** @description An array of transactions of an e-wallet, associated with the given `wallet_id` */
      transactions: components["schemas"]["WalletTransaction"][];
      /** @description Cursor used for fetching transactions created before the latest transaction provided in this response */
      next_cursor?: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * WalletTransaction
     * @description The transaction details
     */
    WalletTransaction: {
      /** @description A unique ID identifying the transaction */
      transaction_id: string;
      /** @description The EMI (E-Money Institution) wallet that this payment is associated with, if any. This wallet is used as an intermediary account to enable Plaid to reconcile the settlement of funds for Payment Initiation requests. */
      wallet_id: string;
      /** @description A reference for the transaction */
      reference: string;
      /**
       * @description The type of the transaction. The supported transaction types that are returned are:
       * `BANK_TRANSFER:` a transaction which credits an e-wallet through an external bank transfer.
       *
       * `PAYOUT:` a transaction which debits an e-wallet by disbursing funds to a counterparty.
       *
       * `PIS_PAY_IN:` a payment which credits an e-wallet through Plaid's Payment Initiation Services (PIS) APIs. For more information see the [Payment Initiation endpoints](https://plaid.com/docs/api/products/payment-initiation/).
       *
       * `REFUND:` a transaction which debits an e-wallet by refunding a previously initiated payment made through Plaid's [PIS APIs](https://plaid.com/docs/api/products/payment-initiation/).
       *
       * `FUNDS_SWEEP`: an automated transaction which debits funds from an e-wallet to a designated client-owned account.
       *
       * `RETURN`: an automated transaction where a debit transaction was reversed and money moved back to originating account.
       * @enum {string}
       */
      type: "BANK_TRANSFER" | "PAYOUT" | "PIS_PAY_IN" | "REFUND" | "FUNDS_SWEEP" | "RETURN";
      scheme?: components["schemas"]["WalletPaymentScheme"];
      amount: components["schemas"]["WalletTransactionAmount"];
      counterparty: components["schemas"]["WalletTransactionCounterparty"];
      status: components["schemas"]["WalletTransactionStatus"];
      /**
       * Format: date-time
       * @description Timestamp when the transaction was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description The date and time of the last time the `status` was updated, in IS0 8601 format
       */
      last_status_update: string;
      /** @description The payment id that this transaction is associated with, if any. This is present only for transaction types `PIS_PAY_IN` and `REFUND`. */
      payment_id?: string | null;
      failure_reason?: components["schemas"]["WalletTransactionFailureReason"];
      [key: string]: unknown;
    };
    /** @description TransactionsEnhanceGetRequest defines the request schema for `/transactions/enhance`. */
    TransactionsEnhanceGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The type of account for the requested transactions (`depository` or `credit`). */
      account_type: string;
      /** @description An array of raw transactions to be enhanced. */
      transactions: components["schemas"]["ClientProvidedRawTransaction"][];
    };
    /** @description TransactionsEnrichRequest defines the request schema for `/transactions/enrich`. */
    TransactionsEnrichRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The account type for the requested transactions (either `depository` or `credit`). */
      account_type: string;
      /** @description An array of transaction objects to be enriched by Plaid. Maximum of 100 transactions per request. */
      transactions: components["schemas"]["ClientProvidedTransaction"][];
      options?: components["schemas"]["TransactionsEnrichRequestOptions"];
    };
    /** @description An optional object to be used with the request. */
    TransactionsEnrichRequestOptions: {
      /**
       * @description Include `legacy_category` and `legacy_category_id` in the response (in addition to the default `personal_finance_category`).
       *
       * Categories are based on Plaid's legacy taxonomy. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       * @default false
       */
      include_legacy_category?: boolean;
    };
    /**
     * ClientProvidedTransaction
     * @description A client-provided transaction for Plaid to enrich.
     */
    ClientProvidedTransaction: {
      /** @description A unique ID for the transaction used to help you tie data back to your systems. */
      id: string;
      /** @description A unique user id used to group transactions for a given user, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id. */
      client_user_id?: string;
      /** @description A unique account id used to group transactions for a given account, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_account_id. */
      client_account_id?: string;
      /** @description The account type associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
      account_type?: string;
      /** @description The account subtype associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
      account_subtype?: string;
      /** @description The raw description of the transaction. If you have location data in available an unstructured format, it may be appended to the `description` field. */
      description: string;
      /**
       * Format: double
       * @description The absolute value of the transaction (>= 0). When testing Enrich, note that `amount` data should be realistic. Unrealistic or inaccurate `amount` data may result in reduced quality output.
       */
      amount: number;
      direction: components["schemas"]["EnrichTransactionDirection"];
      /** @description The ISO-4217 currency code of the transaction e.g. USD. */
      iso_currency_code: string;
      location?: components["schemas"]["ClientProvidedTransactionLocation"];
      /** @description Merchant category codes (MCCs) are four-digit numbers that describe a merchant's primary business activities. */
      mcc?: string;
      /**
       * Format: date
       * @description The date the transaction posted, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) (YYYY-MM-DD) format.
       */
      date_posted?: string;
      [key: string]: unknown;
    };
    /**
     * EnrichTransactionDirection
     * @description The direction of the transaction from the perspective of the account holder:
     *
     * `OUTFLOW` - Includes outgoing transfers, purchases, and fees. (Typically represented as a negative value on checking accounts and debit cards and a positive value on credit cards.)
     *
     * `INFLOW` - Includes incoming transfers, refunds, and income. (Typically represented as a positive value on checking accounts and debit cards and a negative value on credit cards.)
     * @enum {string}
     */
    EnrichTransactionDirection: "INFLOW" | "OUTFLOW";
    /**
     * ClientProvidedTransactionLocation
     * @description A representation of where a transaction took place.
     *
     * Use this field to pass in structured location information you may have about your transactions. Providing location data is optional but can increase result quality. If you have unstructured location information, it may be appended to the `description` field.
     */
    ClientProvidedTransactionLocation: {
      /** @description The country where the transaction occurred. */
      country?: string;
      /** @description The region or state where the transaction occurred. */
      region?: string;
      /** @description The city where the transaction occurred. */
      city?: string;
      /** @description The street address where the transaction occurred. */
      address?: string;
      /** @description The postal code where the transaction occurred. */
      postal_code?: string;
      [key: string]: unknown;
    };
    /**
     * ClientProvidedRawTransaction
     * @description A client-provided transaction for Plaid to enhance.
     */
    ClientProvidedRawTransaction: {
      /** @description A unique ID for the transaction used to help you tie data back to your systems. */
      id: string;
      /** @description The raw description of the transaction. */
      description: string;
      /**
       * Format: double
       * @description The value of the transaction with direction. (NOTE: this will affect enrichment results, so directions are important):.
       *   Negative (-) for credits (e.g., incoming transfers, refunds)
       *   Positive (+) for debits (e.g., purchases, fees, outgoing transfers)
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction e.g. USD. */
      iso_currency_code: string;
      [key: string]: unknown;
    };
    /** @description TransactionsEnhanceGetResponse defines the response schema for `/beta/transactions/v1/enhance`. */
    TransactionsEnhanceGetResponse: {
      /** @description An array of enhanced transactions. */
      enhanced_transactions: components["schemas"]["ClientProvidedEnhancedTransaction"][];
      [key: string]: unknown;
    };
    /** @description TransactionsEnrichResponse defines the response schema for `/transactions/enrich`. */
    TransactionsEnrichResponse: {
      /** @description A list of enriched transactions. */
      enriched_transactions: components["schemas"]["ClientProvidedEnrichedTransaction"][];
      request_id?: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * ClientProvidedEnhancedTransaction
     * @description A client-provided transaction that Plaid has enhanced.
     */
    ClientProvidedEnhancedTransaction: {
      /** @description Unique transaction identifier to tie transactions back to clients' systems. */
      id: string;
      /** @description The raw description of the transaction. */
      description: string;
      /**
       * Format: double
       * @description The value of the transaction, denominated in the account's currency, as stated in `iso_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction. */
      iso_currency_code: string;
      enhancements: components["schemas"]["Enhancements"];
      [key: string]: unknown;
    };
    /**
     * ClientProvidedEnrichedTransaction
     * @description A client-provided transaction that Plaid has enriched.
     */
    ClientProvidedEnrichedTransaction: {
      /** @description The unique ID for the transaction as provided by you in the request. */
      id: string;
      /** @description A unique user id used to group transactions for a given user, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_user_id. */
      client_user_id?: string;
      /** @description A unique account id used to group transactions for a given account, as a unique identifier from your application. Personally identifiable information, such as an email address or phone number, should not be used in the client_account_id. */
      client_account_id?: string;
      /** @description The account type associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
      account_type?: string;
      /** @description The account subtype associated with the transaction. For a full list of valid types and subtypes, see the [Account schema](https://plaid.com/docs/api/accounts#account-type-schema). */
      account_subtype?: string;
      /** @description The raw description of the transaction. */
      description: string;
      /**
       * Format: double
       * @description The absolute value of the transaction (>= 0)
       */
      amount: number;
      direction?: components["schemas"]["EnrichTransactionDirection"];
      /** @description The ISO-4217 currency code of the transaction e.g. USD. */
      iso_currency_code: string;
      enrichments: components["schemas"]["Enrichments"];
      [key: string]: unknown;
    };
    /**
     * Transaction Payment Channel
     * @description The channel used to make a payment.
     * `online:` transactions that took place online.
     *
     * `in store:` transactions that were made at a physical location.
     *
     * `other:` transactions that relate to banks, e.g. fees or deposits.
     * @enum {string}
     */
    PaymentChannel: "online" | "in store" | "other";
    /**
     * Enhancements
     * @description A grouping of the Plaid produced transaction enhancement fields.
     */
    Enhancements: {
      /** @description The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description. */
      merchant_name?: string | null;
      /** @description The website associated with this transaction, if available. */
      website?: string | null;
      /** @description The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file. */
      logo_url?: string | null;
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      payment_channel: components["schemas"]["PaymentChannel"];
      /** @description The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget). */
      category_id: string | null;
      /** @description A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget). */
      category: string[];
      location: components["schemas"]["Location"];
      personal_finance_category?: components["schemas"]["PersonalFinanceCategory"];
      /** @description The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file. */
      personal_finance_category_icon_url?: string;
      /** @description The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description. */
      counterparties?: components["schemas"]["Counterparty"][];
      [key: string]: unknown;
    };
    /**
     * Enrichments
     * @description A grouping of the Plaid produced transaction enrichment fields.
     */
    Enrichments: {
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      /** @description The counterparties present in the transaction. Counterparties, such as the merchant or the financial institution, are extracted by Plaid from the raw description. */
      counterparties: components["schemas"]["Counterparty"][];
      /** @description A unique, stable, Plaid-generated ID that maps to the primary counterparty. */
      entity_id?: string | null;
      /**
       * @deprecated
       * @description The ID of the legacy category to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
       */
      legacy_category_id?: string | null;
      /**
       * @deprecated
       * @description A hierarchical array of the legacy categories to which this transaction belongs. For a full list of legacy categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * We recommend using the `personal_finance_category` for transaction categorization to obtain the best results.
       */
      legacy_category?: string[];
      location: components["schemas"]["Location"];
      /** @description The URL of a logo associated with this transaction, if available. The logo will always be 100×100 pixel PNG file. */
      logo_url: string | null;
      /** @description The name of the primary counterparty, such as the merchant or the financial institution, as extracted by Plaid from the raw description. */
      merchant_name: string | null;
      payment_channel: components["schemas"]["PaymentChannel"];
      personal_finance_category: components["schemas"]["PersonalFinanceCategory"];
      /** @description The URL of an icon associated with the primary personal finance category. The icon will always be 100×100 pixel PNG file. */
      personal_finance_category_icon_url: string;
      recurrence?: components["schemas"]["Recurrence"];
      /** @description The website associated with this transaction. */
      website: string | null;
      [key: string]: unknown;
    };
    /**
     * Recurrence
     * @description Insights relating to expenses and deposits that are predicted to occur on a scheduled basis, such as biweekly, monthly, or annually.
     *
     * Common examples include loan payments, bill payments, subscriptions, and payroll income.
     *
     * This is a beta field, available to all users.
     */
    Recurrence: ({
      /** @description Whether or not the transaction is periodically recurring. */
      is_recurring?: boolean | null;
      frequency?: components["schemas"]["RecurringFrequency"];
      [key: string]: unknown;
    }) | null;
    /**
     * RecurringFrequency
     * @description Describes the frequency of the transaction stream.
     *
     * `WEEKLY`: Assigned to a transaction stream that occurs approximately every week.
     *
     * `BIWEEKLY`: Assigned to a transaction stream that occurs approximately every 2 weeks.
     *
     * `SEMI_MONTHLY`: Assigned to a transaction stream that occurs approximately twice per month. This frequency is typically seen for inflow transaction streams.
     *
     * `MONTHLY`: Assigned to a transaction stream that occurs approximately every month.
     *
     * `ANNUALLY`: Assigned to a transaction stream that occurs approximately every year.
     *
     * `DAILY`: Assigned to a transaction stream that occurs approximately every day.
     *
     * `DYNAMIC`: Assigned to a transaction stream that varies in recurrence frequency. This frequency is typically seen for inflow streams in the gig economy.
     *
     * `UNKNOWN`: Assigned to a transaction stream that isn't recurring in nature.
     * @enum {string|null}
     */
    RecurringFrequency: "UNKNOWN" | "WEEKLY" | "BIWEEKLY" | "SEMI_MONTHLY" | "MONTHLY" | "ANNUALLY" | "DAILY" | "DYNAMIC" | null;
    /** @description TransactionsUserInsightsGetRequest defines the request schema for `/beta/transactions/user_insights/v1/get`. */
    TransactionsUserInsightsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A unique client-provided user_id to retrieve insights for. */
      client_user_id: string;
    };
    /** @description TransactionsUserInsightsGetResponse defines the response schema for `/beta/transactions/user_insights/v1/get`. */
    TransactionsUserInsightsGetResponse: {
      user_data_overview: components["schemas"]["UserDataOverview"];
      counterparty_insights?: components["schemas"]["CounterpartyInsights"];
      category_insights?: components["schemas"]["CategoryInsights"];
      recurring_transactions?: components["schemas"]["RecurringTransactions"];
      [key: string]: unknown;
    };
    /** @description metadata for the set of insights provided in `TransactionsUserInsightsGetResponse` */
    UserDataOverview: {
      /** @description The total number of transactions. */
      transaction_count: number;
      /**
       * Format: date
       * @description The date of the oldest transaction processed to generate insights.
       */
      oldest_transaction_date?: string;
      /**
       * Format: date
       * @description The date of the newest transaction processed to generate insights.
       */
      newest_transaction_date?: string;
      /** @description The range of days of transactions available. */
      days_available: number;
      /**
       * Format: double
       * @description Sum of outflow amounts.
       */
      total_outflows: number;
      /**
       * Format: double
       * @description Sum of inflow amounts.
       */
      total_inflows: number;
      [key: string]: unknown;
    };
    /** @description Insights around a user's counterparties */
    CounterpartyInsights: {
      /** @description Insights related to a user’s transactions with other financial institutions, including detected account types. */
      financial_institution_insights?: components["schemas"]["FinancialInstitutionInsights"][];
      /** @description Insights about a user’s top merchants, ranked by spend. */
      merchant_insights?: components["schemas"]["MerchantInsights"][];
      [key: string]: unknown;
    };
    /** @description Insights surrounding external financial institution counterparties associated with a user. */
    FinancialInstitutionInsights: {
      /** @description Name of the financial institution counterparty. */
      name: string;
      /** @description A unique, stable, Plaid-generated id that maps to the counterparty. */
      entity_id?: string | null;
      /** @description The website associated with the counterparty. */
      website: string | null;
      /** @description Associated accounts, detected based on the nature of transfers to/from this institution. */
      detected_accounts: components["schemas"]["DetectedAccount"][];
    };
    /** @description A possible account detected to be associated with a transaction user. */
    DetectedAccount: {
      /** @description The detected account type (depository, credit, loan, investment etc.). */
      account_type: string | null;
      /** @description The detected subtype of the account, based on the transactions to/from the institution. */
      account_subtype: string | null;
      /** @description The number of transactions associated with this detected account type at this financial institution. */
      transaction_count: number;
      /**
       * Format: date
       * @description The date of the oldest transaction associated with this detected account type at this financial institution.
       */
      oldest_transaction_date?: string;
      /**
       * Format: date
       * @description The date of the newest transaction associated with this detected account type at this financial institution.
       */
      newest_transaction_date?: string;
      /**
       * Format: double
       * @description Amount of the most recent transaction associated with this detected account type at this financial institution.
       */
      newest_transaction_amount?: number;
      /**
       * Format: double
       * @description Sum of outflow amounts associated with this detected account type at this financial institution.
       */
      total_outflows: number;
      /**
       * Format: double
       * @description Sum of inflow amounts associated with this detected account type at this financial institution.
       */
      total_inflows: number;
      [key: string]: unknown;
    };
    /** @description Insights into a user’s top merchants. */
    MerchantInsights: {
      /** @description The counterparty name. */
      name: string;
      /** @description A unique, stable, Plaid-generated id that maps to the merchant. */
      entity_id?: string | null;
      /** @description The website associated with the merchant. */
      website: string | null;
      /** @description The number of transactions associated with merchant of this type. */
      transaction_count: number;
      /** @description The primary personal finance category associated with this merchant. */
      personal_finance_category_primary: string | null;
      /** @description The detailed personal finance category associated with this merchant. */
      personal_finance_category_detailed: string | null;
      /**
       * Format: double
       * @description Sum of outflow amounts.
       */
      total_outflows: number;
      /**
       * Format: double
       * @description Sum of inflow amounts.
       */
      total_inflows: number;
    };
    /** @description Insights on a user's top personal finance categories. */
    CategoryInsights: {
      /** @description List of insights of top primary personal finance categories ranked by outflow. */
      primary_category_insights?: components["schemas"]["CategoryInsightDetails"][];
      /** @description List of insights of top detailed personal finance categories ranked by outflow. */
      detailed_category_insights?: components["schemas"]["CategoryInsightDetails"][];
      [key: string]: unknown;
    };
    /** @description Insights object for categories. */
    CategoryInsightDetails: {
      /** @description Category name. */
      name: string;
      /** @description The number of transactions associated with this category. */
      transaction_count: number;
      /**
       * Format: double
       * @description Sum of outflow amounts.
       */
      total_outflows: number;
      /**
       * Format: double
       * @description Sum of inflow amounts.
       */
      total_inflows: number;
      /** @description The most common counterparties associated with this category sorted by outflow. */
      top_counterparties?: string[];
      [key: string]: unknown;
    };
    /** @description Insights object for recurring transactions for `/beta/transactions/user_insights/v1/get` endpoint */
    RecurringTransactions: {
      /** @description An array of inflow transaction streams (e.g., income). */
      inflow_streams: components["schemas"]["RecurringInsightsStream"][];
      /** @description An array of outflow transaction streams (e.g., subscriptions, bills, loan payments). */
      outflow_streams: components["schemas"]["RecurringInsightsStream"][];
      [key: string]: unknown;
    };
    /** @description Insights object for recurring transactions streams. */
    RecurringInsightsStream: {
      /** @description A unique id for the stream. */
      stream_id: string;
      /** @description The client-provided raw description of the most recent transaction in the stream. */
      description?: string;
      /** @description The merchant or primary counterparty associated with the transaction stream. */
      merchant_name: string;
      /**
       * Format: date
       * @description The posted date of the earliest transaction in the stream.
       */
      oldest_transaction_date?: string;
      /**
       * Format: date
       * @description The posted date of the latest transaction in the stream.
       */
      newest_transaction_date?: string;
      /**
       * Format: double
       * @description The average number of days between each of the recurring transactions.
       */
      average_days_apart: number;
      frequency?: components["schemas"]["RecurringTransactionFrequency"];
      /** @description The number of transactions in this stream. */
      transaction_count?: number;
      /** @description An array of Plaid transaction IDs belonging to the stream, sorted by posted date. */
      transaction_ids?: string[];
      average_amount?: components["schemas"]["TransactionStreamAmount"];
      newest_transaction_amount?: components["schemas"]["TransactionStreamAmount"];
      /** @description Indicates whether the transaction stream is still live. */
      is_active: boolean;
      status?: components["schemas"]["TransactionStreamStatus"];
      /** @description The primary category associated with the transaction stream. */
      personal_finance_category_primary?: string;
      /** @description The detailed category associated with the transaction stream. */
      personal_finance_category_detailed?: string;
      [key: string]: unknown;
    };
    /** @description PaymentProfileCreateRequest defines the request schema for `/payment_profile/create` */
    PaymentProfileCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description PaymentProfileCreateResponse defines the response schema for `/payment_profile/create` */
    PaymentProfileCreateResponse: {
      payment_profile_token: components["schemas"]["PaymentProfileToken"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * PaymentProfileToken
     * @description A payment profile token associated with the Payment Profile data that is being requested.
     */
    PaymentProfileToken: string;
    /** @description PaymentProfileGetRequest defines the request schema for `/payment_profile/get` */
    PaymentProfileGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      payment_profile_token: components["schemas"]["PaymentProfileToken"];
    };
    /** @description PaymentProfileGetResponse defines the response schema for `/payment_profile/get` */
    PaymentProfileGetResponse: {
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the last time the given Payment Profile was updated at
       */
      updated_at: string;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was created at
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Payment Profile was deleted at. Always `null` if the Payment Profile has not been deleted
       */
      deleted_at: string | null;
      status: components["schemas"]["PaymentProfileStatus"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * @description The status of the given Payment Profile.
     *
     * `READY`: This Payment Profile is ready to be used to create transfers using `/transfer/authorization/create` and `/transfer/create`.
     *
     * `PENDING`: This Payment Profile is not ready to be used. You’ll need to call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field to initiate the account linking experience.
     *
     * `REMOVED`: This Payment Profile has been removed.
     * @enum {string}
     */
    PaymentProfileStatus: "PENDING" | "READY" | "REMOVED";
    /** @description PaymentProfileRemoveRequest defines the request schema for `/payment_profile/remove` */
    PaymentProfileRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      payment_profile_token: components["schemas"]["PaymentProfileToken"];
    };
    /** @description PaymentProfileRemoveResponse defines the response schema for `/payment_profile/remove` */
    PaymentProfileRemoveResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request schema for `/partner/customer/create`. */
    PartnerCustomerCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The company name of the end customer being created. This will be used to display the end customer in the Plaid Dashboard. It will not be shown to end users. */
      company_name: string;
      /** @description Denotes whether or not the partner has completed attestation of diligence for the end customer to be created. */
      is_diligence_attested: boolean;
      /** @description The products to be enabled for the end customer. If empty or `null`, this field will default to the products enabled for the reseller at the time this endpoint is called. */
      products?: components["schemas"]["Products"][];
      /** @description If `true`, the end customer's default Link customization will be set to match the partner's. You can always change the end customer's Link customization in the Plaid Dashboard. See the [Link Customization docs](https://plaid.com/docs/link/customization/) for more information. */
      create_link_customization?: boolean;
      /** @description Base64-encoded representation of the end customer's logo. Must be a PNG of size 1024x1024 under 4MB. The logo will be shared with financial institutions and shown to the end user during Link flows. A logo is required if `create_link_customization` is `true`. If `create_link_customization` is `false` and the logo is omitted, the partner's logo will be used if one exists, otherwise a stock logo will be used. */
      logo?: string;
      /** @description The end customer's legal name. This will be shared with financial institutions as part of the OAuth registration process. It will not be shown to end users. */
      legal_entity_name: string;
      /** @description The end customer's website. */
      website: string;
      /** @description The name of the end customer's application. This will be shown to end users when they go through the Plaid Link flow. */
      application_name: string;
      technical_contact?: components["schemas"]["PartnerEndCustomerTechnicalContact"];
      billing_contact?: components["schemas"]["PartnerEndCustomerBillingContact"];
      customer_support_info?: components["schemas"]["PartnerEndCustomerCustomerSupportInfo"];
      address: components["schemas"]["PartnerEndCustomerAddress"];
      /** @description Denotes whether the partner has forwarded the Plaid bank addendum to the end customer. */
      is_bank_addendum_completed: boolean;
      assets_under_management?: components["schemas"]["PartnerEndCustomerAssetsUnderManagement"];
      /** @description A list of URIs indicating the destination(s) where a user can be forwarded after completing the Link flow; used to support OAuth authentication flows when launching Link in the browser or via a webview. URIs should not contain any query parameters. When used in Production or Development, URIs must use https. To specify any subdomain, use `*` as a wildcard character, e.g. `https://*.example.com/oauth.html`. To modify redirect URIs for an end customer after creating them, go to the end customer's [API page](https://dashboard.plaid.com/team/api) in the Dashboard. */
      redirect_uris?: string[];
    };
    /** @description Response schema for `/partner/customer/create`. */
    PartnerCustomerCreateResponse: {
      end_customer?: components["schemas"]["PartnerEndCustomerWithSecrets"];
      request_id?: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request schema for `/partner/customer/get`. */
    PartnerCustomerGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      end_customer_client_id: string;
    };
    /** @description Response schema for `/partner/customer/get`. */
    PartnerCustomerGetResponse: {
      end_customer?: components["schemas"]["PartnerEndCustomer"];
      request_id?: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request schema for `/partner/customer/enable`. */
    PartnerCustomerEnableRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      end_customer_client_id: string;
    };
    /** @description Response schema for `/partner/customer/enable`. */
    PartnerCustomerEnableResponse: {
      /** @description The end customer's secret key for the Production environment. */
      production_secret?: string;
      request_id?: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request schema for `/partner/customer/remove`. */
    PartnerCustomerRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `client_id` of the end customer to be removed. */
      end_customer_client_id: string;
    };
    /** @description Response schema for `/partner/customer/remove`. */
    PartnerCustomerRemoveResponse: {
      request_id?: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request schema for `/partner/customer/oauth_institutions/get`. */
    PartnerCustomerOAuthInstitutionsGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      end_customer_client_id: string;
    };
    /** @description Response schema for `/partner/customer/oauth_institutions/get`. */
    PartnerCustomerOAuthInstitutionsGetResponse: {
      flowdown_status?: components["schemas"]["PartnerEndCustomerFlowdownStatus"];
      questionnaire_status?: components["schemas"]["PartnerEndCustomerQuestionnaireStatus"];
      /** @description The OAuth institutions with which the end customer's application is being registered. */
      institutions?: components["schemas"]["PartnerEndCustomerOAuthInstitution"][];
      request_id?: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * @description The status of the addendum to the Plaid MSA ("flowdown") for the end customer.
     * @enum {string}
     */
    PartnerEndCustomerFlowdownStatus: "NOT_STARTED" | "IN_REVIEW" | "NEGOTIATION" | "COMPLETE";
    /**
     * @description The status of the end customer's security questionnaire.
     * @enum {string}
     */
    PartnerEndCustomerQuestionnaireStatus: "NOT_STARTED" | "RECEIVED" | "COMPLETE";
    /** @description The OAuth registration information for an institution. */
    PartnerEndCustomerOAuthInstitution: {
      name?: string;
      institution_id?: string;
      environments?: components["schemas"]["PartnerEndCustomerOAuthInstitutionEnvironments"];
      /** @description The date on which the end customer's application was approved by the institution, or an empty string if their application has not yet been approved. */
      production_enablement_date?: string | null;
      /** @description The date on which non-OAuth Item adds will no longer be supported for this institution, or an empty string if no such date has been set by the institution. */
      classic_disablement_date?: string | null;
      [key: string]: unknown;
    };
    /** @description Registration statuses by environment. */
    PartnerEndCustomerOAuthInstitutionEnvironments: {
      development?: components["schemas"]["PartnerEndCustomerOAuthInstitutionApplicationStatus"];
      production?: components["schemas"]["PartnerEndCustomerOAuthInstitutionApplicationStatus"];
      [key: string]: unknown;
    };
    /**
     * @description The registration status for the end customer's application.
     * @enum {string}
     */
    PartnerEndCustomerOAuthInstitutionApplicationStatus: "NOT_STARTED" | "PROCESSING" | "APPROVED" | "ENABLED" | "ATTENTION_REQUIRED";
    /** @description The details for an end customer. */
    PartnerEndCustomer: {
      /** @description The `client_id` of the end customer. */
      client_id?: string;
      /** @description The company name associated with the end customer. */
      company_name?: string;
      status?: components["schemas"]["PartnerEndCustomerStatus"];
      [key: string]: unknown;
    };
    /** @description The details for the newly created end customer, including secrets for non-Production environments. */
    PartnerEndCustomerWithSecrets: {
      [key: string]: unknown;
    } & components["schemas"]["PartnerEndCustomer"] & {
      secrets?: components["schemas"]["PartnerEndCustomerSecrets"];
    };
    /**
     * @description The status of the given end customer.
     *
     * `UNDER_REVIEW`: The end customer has been created and enabled in the non-Production environments. The end customer must be manually reviewed by the Plaid team before it can be enabled in production, at which point its status will automatically transition to `PENDING_ENABLEMENT` or `DENIED`.
     *
     * `PENDING_ENABLEMENT`: The end customer is ready to be enabled in the Production environment. Call the `/partner/customer/enable` endpoint to enable the end customer in Production.
     *
     * `ACTIVE`: The end customer has been enabled in all environments.
     *
     * `DENIED`: The end customer has been created and enabled in the non-Production environments, but it did not pass review by the Plaid team and therefore cannot be enabled in the Production environment. Talk to your Account Manager for more information.
     * @enum {string}
     */
    PartnerEndCustomerStatus: "UNDER_REVIEW" | "PENDING_ENABLEMENT" | "ACTIVE" | "DENIED";
    /** @description The secrets for the newly created end customer in non-Production environments. */
    PartnerEndCustomerSecrets: {
      /** @description The end customer's secret key for the Sandbox environment. */
      sandbox?: string;
      /** @description The end customer's secret key for the Development environment. */
      development?: string;
      [key: string]: unknown;
    };
    /** @description The technical contact for the end customer. Defaults to partner's technical contact if omitted. */
    PartnerEndCustomerTechnicalContact: {
      given_name?: string;
      family_name?: string;
      email?: string;
      [key: string]: unknown;
    };
    /** @description This information is public. Users of your app will see this information when managing connections between your app and their bank accounts in Plaid Portal. Defaults to partner's customer support info if omitted. */
    PartnerEndCustomerCustomerSupportInfo: {
      email?: string;
      phone_number?: string;
      contact_url?: string;
      link_update_url?: string;
      [key: string]: unknown;
    };
    /** @description Assets under management for the given end customer. Required for end customers with monthly service commitments. */
    PartnerEndCustomerAssetsUnderManagement: {
      /** Format: double */
      amount: number;
      iso_currency_code: string;
      [key: string]: unknown;
    };
    /** @description The billing contact for the end customer. Defaults to partner's billing contact if omitted. */
    PartnerEndCustomerBillingContact: {
      given_name?: string;
      family_name?: string;
      email?: string;
      [key: string]: unknown;
    };
    /** @description The end customer's address. */
    PartnerEndCustomerAddress: {
      city?: string;
      street?: string;
      region?: string;
      postal_code?: string;
      /** @description ISO-3166-1 alpha-2 country code standard. */
      country_code?: string;
      [key: string]: unknown;
    };
    /**
     * @description The status of the given Hosted Link session.
     *
     * `CREATED`: The session is created but not yet accessed by the user
     *
     * `OPENED`: The session is opened by the user but not yet completed
     *
     * `EXITED`: The session has been exited by the user
     *
     * `COMPLETED`: The session has been completed by the user
     *
     * `EXPIRED`: The session has expired
     * @enum {string}
     */
    LinkDeliverySessionStatus: "CREATED" | "OPENED" | "EXITED" | "COMPLETED" | "EXPIRED";
    /**
     * @description The delivery method to be used to deliver the Hosted Link session URL.
     *
     * `SMS`: The URL will be delivered through SMS
     *
     * `EMAIL`: The URL will be delivered through email
     * @enum {string}
     */
    LinkDeliveryDeliveryMethod: "SMS" | "EMAIL";
    /** @description The communication method containing both the type and address to send the URL. */
    LinkDeliveryCommunicationMethod: {
      method?: components["schemas"]["LinkDeliveryDeliveryMethod"];
      /** @description The phone number / email address that Hosted Link sessions are delivered to. Phone numbers must be in E.164 format. */
      address?: string;
    };
    /** @description Metadata related to the recipient. If the information required to populate this field is not available, leave it blank. */
    LinkDeliveryRecipient: {
      /** @description The list of communication methods to send the Hosted Link session URL to. If delivery is not required, leave this field blank. */
      communication_methods?: components["schemas"]["LinkDeliveryCommunicationMethod"][];
      /** @description First name of the recipient. Will be used in the body of the email / text (if configured). If this information is not available, leave this field blank. */
      first_name?: string;
    };
    /** @description Optional metadata related to the Hosted Link session */
    LinkDeliveryOptions: {
      recipient?: components["schemas"]["LinkDeliveryRecipient"];
    };
    /** @description LinkDeliveryCreateRequest defines the request schema for `/link_delivery/create` */
    LinkDeliveryCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description A `link_token` from a previous invocation of `/link/token/create`. */
      link_token: string;
      options?: components["schemas"]["LinkDeliveryOptions"];
    };
    /** @description LinkDeliveryCreateResponse defines the response schema for `/link_delivery/create` */
    LinkDeliveryCreateResponse: {
      /** @description The URL to the Hosted Link session, which will be delivered by the specified delivery method. */
      link_delivery_url: string;
      /** @description The ID for the Hosted Link session. Same as the `link_token` string excluding the "link-{env}-" prefix. */
      link_delivery_session_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description LinkDeliveryGetRequest defines the request schema for `/link_delivery/get` */
    LinkDeliveryGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The ID for the Hosted Link session from a previous invocation of `/link_delivery/create`. */
      link_delivery_session_id: string;
    };
    /** @description LinkDeliveryGetRequest defines the response schema for `/link_delivery/get` */
    LinkDeliveryGetResponse: {
      status: components["schemas"]["LinkDeliverySessionStatus"];
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Hosted Link session was created at.
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (`YYYY-MM-DDTHH:mm:ssZ`) indicating the time the given Hosted Link session was completed at.
       */
      completed_at?: string | null;
      request_id: components["schemas"]["RequestID"];
      /** @description An array of access tokens associated with the Hosted Link session. */
      access_tokens?: components["schemas"]["AccessToken"][] | null;
      /** @description An array of `item_id`s associated with the Hosted Link session. */
      item_ids?: components["schemas"]["ItemId"][] | null;
      [key: string]: unknown;
    };
    /**
     * LinkUserDeliveryStatusWebhook
     * @description Webhook indicating that the status of the delivery of the hosted link session to a user
     */
    LinkUserDeliveryStatusWebhook: {
      /** @description `LINK_DELIVERY` */
      webhook_type: string;
      /** @description `DELIVERY_STATUS` */
      webhook_code: string;
      /** @description The ID of the Hosted Link session. */
      link_delivery_session_id: string;
      /** @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
      timestamp: string;
      link_delivery_metadata: components["schemas"]["LinkDeliveryMetadata"];
      [key: string]: unknown;
    };
    /**
     * LinkDeliveryCallbackWebhook
     * @description Webhook containing metadata proxied over from Link callback e.g `onEvent`, `onExit`, `onSuccess`.
     */
    LinkDeliveryCallbackWebhook: {
      /** @description `LINK_DELIVERY` */
      webhook_type: string;
      /** @description `LINK_CALLBACK` */
      webhook_code: string;
      /** @description The ID of the Hosted Link session. */
      link_delivery_session_id: string;
      /** @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
      timestamp: string;
      error?: components["schemas"]["PlaidError"];
      link_callback_metadata: components["schemas"]["LinkCallbackMetadata"];
      [key: string]: unknown;
    };
    /**
     * CreditCategory
     * @description Information describing the intent of the transaction. Most relevant for credit use cases, but not limited to such use cases.
     *
     * See the [`taxonomy csv file`](https://plaid.com/documents/credit-category-taxonomy.csv) for a full list of credit categories.
     */
    CreditCategory: {
      /** @description A high level category that communicates the broad category of the transaction. */
      primary: string;
      /** @description A granular category conveying the transaction's intent. This field can also be used as a unique identifier for the category. */
      detailed: string;
      [key: string]: unknown;
    } | null;
    /**
     * BaseReportsProductReadyWebhook
     * @description Fired when the Base Report has been generated and `/cra/base_report/get` is ready to be called.  If you attempt to retrieve a Base Report before this webhook has fired, you’ll receive a response with the HTTP status code 400 and a Plaid error code of `PRODUCT_NOT_READY`.
     */
    BaseReportsProductReadyWebhook: {
      /** @description `BASE_REPORT` */
      webhook_type: string;
      /** @description `PRODUCT_READY` */
      webhook_code: string;
      /** @description The `user_id` corresponding to the User ID the webhook has fired for. */
      user_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BaseReportsErrorWebhook
     * @description Fired when Base Report generation has failed. The resulting `error` will have an `error_type` of `BASE_REPORT_ERROR`.
     */
    BaseReportsErrorWebhook: {
      /** @description `BASE_REPORT` */
      webhook_type: string;
      /** @description `ERROR` */
      webhook_code: string;
      error: components["schemas"]["PlaidError"];
      /** @description The `user_id` corresponding to the User ID the webhook has fired for. */
      user_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * CraBankIncomeCompleteWebhook
     * @description Fired when a bank income report has finished generating or failed to generate, triggered by calling `/cra/bank_income/get`.
     */
    CraBankIncomeCompleteWebhook: {
      /** @description `CRA_INCOME` */
      webhook_type: string;
      /** @description `BANK_INCOME_COMPLETE` */
      webhook_code: string;
      /** @description The `user_id` corresponding to the user the webhook has fired for. */
      user_id: string;
      result: components["schemas"]["CraBankIncomeCompleteResult"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * @description The result of the bank income report generation
     *
     * `SUCCESS`: The bank income report was successfully generated and can be retrieved via `/cra/bank_income/get`.
     *
     * `FAILURE`: The bank income report failed to be generated
     * @enum {string}
     */
    CraBankIncomeCompleteResult: "SUCCESS" | "FAILURE";
    /**
     * BankIncomeCompleteWebhook
     * @description Fired when a bank income report has finished generating or failed to generate, triggered by calling `/credit/bank_income/get` in CRA enabled client.
     */
    BankIncomeCompleteWebhook: {
      /** @description `INCOME` */
      webhook_type: string;
      /** @description `BANK_INCOME_COMPLETE` */
      webhook_code: string;
      /** @description The `user_id` corresponding to the user the webhook has fired for. */
      user_id: string;
      result: components["schemas"]["BankIncomeCompleteResult"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * @description The result of the bank income report generation
     *
     * `SUCCESS`: The bank income report was successfully generated and can be retrieved via `/credit/bank_income/get`.
     *
     * `FAILURE`: The bank income report failed to be generated
     * @enum {string}
     */
    BankIncomeCompleteResult: "SUCCESS" | "FAILURE";
    /**
     * IncomeVerificationRefreshReconnectNeededWebhook
     * @description Fired when the attempt to refresh Payroll Income data for a user via `/credit/payroll_income/refresh` failed because the user must re-connect their payroll account.
     */
    IncomeVerificationRefreshReconnectNeededWebhook: {
      /** @description `INCOME` */
      webhook_type: string;
      /** @description `INCOME_VERIFICATION_REFRESH_RECONNECT_NEEDED` */
      webhook_code: string;
      /** @description The `user_id` corresponding to the user the webhook has fired for. */
      user_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BankIncomeRefreshUpdateWebhook
     * @description Fired when a change to the user's income is detected. You should call `/credit/bank_income/refresh` to get updated income data for the user. To receive this webhook, subscribe in the [Dashboard](https://dashboard.plaid.com/developers/webhooks).
     */
    BankIncomeRefreshUpdateWebhook: {
      /** @description `INCOME` */
      webhook_type: string;
      /** @description `BANK_INCOME_REFRESH_UPDATE` */
      webhook_code: string;
      /** @description The `user_id` corresponding to the user the webhook has fired for. */
      user_id: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * BankIncomeRefreshCompleteWebhook
     * @description Fired when a refreshed bank income report has finished generating or failed to generate, triggered by calling `/credit/bank_income/refresh`. To get this webhook, subscribe via the [Dashboard](https://dashboard.plaid.com/developers/webhooks).
     */
    BankIncomeRefreshCompleteWebhook: {
      /** @description `INCOME` */
      webhook_type: string;
      /** @description `BANK_INCOME_REFRESH_COMPLETE` */
      webhook_code: string;
      /** @description The `user_id` corresponding to the user the webhook has fired for. */
      user_id: string;
      result: components["schemas"]["BankIncomeRefreshCompleteResult"];
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * @description The result of the bank income refresh report generation
     *
     * `SUCCESS`: The refreshed report was successfully generated and can be retrieved via `/credit/bank_income/get`.
     *
     * `FAILURE`: The refreshed report failed to be generated
     * @enum {string}
     */
    BankIncomeRefreshCompleteResult: "SUCCESS" | "FAILURE";
    /**
     * LinkEventMetadata
     * @description Metadata about an event that occured while the user was going through Link
     */
    LinkEventMetadata: {
      /** @description The error code that the user encountered. Emitted by `ERROR`, `EXIT`. */
      error_code?: string;
      /** @description The error message that the user encountered. Emitted by: `ERROR`, `EXIT`. */
      error_message?: string;
      /** @description The error type that the user encountered. Emitted by: `ERROR`, `EXIT`. */
      error_type?: string;
      /** @description The status key indicates the point at which the user exited the Link flow. Emitted by: `EXIT`. */
      exit_status?: string;
      /** @description The ID of the selected institution. Emitted by: all events. */
      institution_id?: string;
      /** @description The name of the selected institution. Emitted by: all events. */
      institution_name?: string;
      /** @description The query used to search for institutions. Emitted by: `SEARCH_INSTITUTION`. */
      institution_search_query?: string;
      /** @description The request ID for the last request made by Link. This can be shared with Plaid Support to expedite investigation. Emitted by: all events. */
      request_id: string;
      /** @description If set, the user has encountered one of the following MFA types: code, device, questions, selections. Emitted by: `SUBMIT_MFA` and `TRANSITION_VIEW` when view_name is `MFA`. */
      mfa_type?: string;
      /** @description The name of the view that is being transitioned to. Emitted by: `TRANSITION_VIEW`. */
      view_name?: string;
      /** @description Either the verification method for a matched institution selected by the user or the Auth Type Select flow type selected by the user. If selection is used to describe selected verification method, then possible values are `phoneotp` or `password`;  if selection is used to describe the selected Auth Type Select flow, then possible values are `flow_type_manual` or `flow_type_instant`. Emitted by: `MATCHED_SELECT_VERIFY_METHOD` and `SELECT_AUTH_TYPE`. */
      selection?: string;
      /** @description The name of the selected brand. */
      brand_name?: string;
      /** @description The reason this institution was matched, which will be either `returning_user` or `routing_number`. Emitted by: `MATCHED_SELECT_INSTITUTION`. */
      match_reason?: string;
      /** @description The routing number submitted by user at the micro-deposits routing number pane. Emitted by `SUBMIT_ROUTING_NUMBER`. */
      routing_number?: string;
      /** @description The account number mask extracted from the user-provided account number. If the user-inputted account number is four digits long, `account_number_mask` is empty. Emitted by `SUBMIT_ACCOUNT_NUMBER`. */
      account_number_mask?: string;
      [key: string]: unknown;
    };
    /**
     * LinkEvent
     * @description An event that occurred while the user was going through Link
     */
    LinkEvent: {
      /** @description Event name */
      event_name: string;
      /** @description Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. */
      timestamp: string;
      /** @description UUID that can be used to deduplicate events */
      event_id: string;
      [key: string]: unknown;
    };
    /**
     * LinkEventsWebhook
     * @description Contains a summary of the events from a link session
     */
    LinkEventsWebhook: {
      /** @description `LINK` */
      webhook_type: string;
      /** @description `EVENTS` */
      webhook_code: string;
      /** @description The link events emitted during the link session */
      events: components["schemas"]["LinkEvent"][];
      /** @description An identifier for the link session these events occurred in */
      link_session_id: string;
      /** @description The link token used to create the link session these events are from */
      link_token: string;
      [key: string]: unknown;
    };
    /**
     * LinkSessionFinishedWebhook
     * @description Contains the state of a completed link session, along with the public token if available.
     */
    LinkSessionFinishedWebhook: {
      /** @description `LINK` */
      webhook_type: string;
      /** @description `SESSION_FINISHED` */
      webhook_code: string;
      /** @description The final status of the link session. Will always be "SUCCESS" or "EXITED". */
      status: string;
      /** @description The identifier for the link session. */
      link_session_id: string;
      /** @description The link token used to create the link session. */
      link_token: string;
      /** @description The public token generated by the link session. */
      public_token?: string;
      [key: string]: unknown;
    };
    /**
     * HostedMMDVerificationWebhook
     * @description Contains the state of a hosted same-day microdeposits verification session.
     */
    HostedMMDVerificationWebhook: {
      /** @description `AUTH` */
      webhook_type: string;
      /** @description `HOSTED_VERIFICATION` */
      webhook_code: string;
      /** @description The final status of the same-day microdeposits verification. Will always be "MANUALLY_VERIFIED" or "VERIFICATION_FAILED". */
      status: string;
      item_id: components["schemas"]["ItemId"];
      /** @description The external account ID of the affected account */
      account_id: string;
      environment?: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * InstitutionStatusAlertWebhook
     * @description Fired when institution status meets the conditions configured in the developer dashboard.
     */
    InstitutionStatusAlertWebhook: {
      /** @description `DASHBOARD_CONFIGURED_ALERT` */
      webhook_type: string;
      /** @description `INSTITUTION_STATUS_ALERT_TRIGGERED` */
      webhook_code: string;
      /** @description The ID of the associated institution. */
      institution_id: string;
      /**
       * Format: double
       * @description The global success rate of the institution, calculated based on item add health.
       */
      institution_overall_success_rate: number;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /** @description AssetReportCreateRequest defines the request schema for `/asset_report/create` */
    AssetReportCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description An array of access tokens corresponding to the Items that will be included in the report. The `assets` product must have been initialized for the Items during link; the Assets product cannot be added after initialization. */
      access_tokens?: components["schemas"]["AccessToken"][];
      /**
       * @description The maximum integer number of days of history to include in the Asset Report. If using Fannie Mae Day 1 Certainty, `days_requested` must be at least 61 for new originations or at least 31 for refinancings.
       *
       * An Asset Report requested with "Additional History" (that is, with more than 61 days of transaction history) will incur an Additional History fee.
       */
      days_requested: number;
      options?: components["schemas"]["AssetReportCreateRequestOptions"];
    };
    /** @description An optional object to filter `/asset_report/create` results. If provided, must be non-`null`. The optional `user` object is required for the report to be eligible for Fannie Mae's Day 1 Certainty program. */
    AssetReportCreateRequestOptions: {
      /** @description Client-generated identifier, which can be used by lenders to track loan applications. */
      client_report_id?: string | null;
      /** @description URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
      webhook?: string | null;
      /**
       * @deprecated
       * @description true to return balance and identity earlier as a fast report. Defaults to false if omitted.
       */
      include_fast_report?: boolean | null;
      /**
       * @deprecated
       * @description Additional information that can be included in the asset report. Possible values: `"investments"`
       */
      products?: string[];
      /** @description Use this field to request a `fast_asset` report. When Fast Assets is requested, Plaid will create two versions of the Asset Report: first, the Fast Asset Report, which will contain only current identity and balance information, and later, the Full Asset Report, which will also contain historical balance information and transaction data. A `PRODUCT_READY` webhook will be fired for each Asset Report when it is ready, and the `report_type` field will indicate whether the webhook is firing for the `full` or `fast` Asset Report. To retrieve the Fast Asset Report, call `/asset_report/get` with `fast_report` set to `true`. There is no additional charge for using Fast Assets. */
      add_ons?: components["schemas"]["AssetReportAddOns"][];
      user?: components["schemas"]["AssetReportUser"];
    };
    /** @description AssetReportCreateResponse defines the response schema for `/asset_report/create` */
    AssetReportCreateResponse: {
      asset_report_token: components["schemas"]["AssetReportToken"];
      asset_report_id: components["schemas"]["AssetReportId"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description AssetReportRefreshRequest defines the request schema for `/asset_report/refresh` */
    AssetReportRefreshRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportRefreshAssetReportToken"];
      /** @description The maximum number of days of history to include in the Asset Report. Must be an integer. If not specified, the value from the original call to `/asset_report/create` will be used. */
      days_requested?: number | null;
      options?: components["schemas"]["AssetReportRefreshRequestOptions"];
    };
    /** @description An optional object to filter `/asset_report/refresh` results. If provided, cannot be `null`. If not specified, the `options` from the original call to `/asset_report/create` will be used. */
    AssetReportRefreshRequestOptions: {
      /** @description Client-generated identifier, which can be used by lenders to track loan applications. */
      client_report_id?: string | null;
      /** @description URL to which Plaid will send Assets webhooks, for example when the requested Asset Report is ready. */
      webhook?: string | null;
      user?: components["schemas"]["AssetReportUser"];
    };
    /** @description AssetReportRefreshResponse defines the response schema for `/asset_report/refresh` */
    AssetReportRefreshResponse: {
      asset_report_id: components["schemas"]["AssetReportId"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description AssetReportRemoveRequest defines the request schema for `/asset_report/remove` */
    AssetReportRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
    };
    /** @description AssetReportRemoveResponse defines the response schema for `/asset_report/remove` */
    AssetReportRemoveResponse: {
      /** @description `true` if the Asset Report was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description AssetReportFilterRequest defines the request schema for `/asset_report/filter` */
    AssetReportFilterRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      /** @description The accounts to exclude from the Asset Report, identified by `account_id`. */
      account_ids_to_exclude: string[];
    };
    /** @description AssetReportFilterResponse defines the response schema for `/asset_report/filter` */
    AssetReportFilterResponse: {
      asset_report_token: components["schemas"]["AssetReportToken"];
      asset_report_id: components["schemas"]["AssetReportId"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description AssetReportGetRequest defines the request schema for `/asset_report/get` */
    AssetReportGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token?: components["schemas"]["AssetReportTokenNullable"];
      /** @description The user token associated with the User for which to create an asset report for. The latest asset report associated with the User will be returned */
      user_token?: string;
      /**
       * @description `true` if you would like to retrieve the Asset Report with Insights, `false` otherwise. This field defaults to `false` if omitted.
       * @default false
       */
      include_insights?: boolean;
      /**
       * @description `true` to fetch "fast" version of asset report. Defaults to false if omitted. Can only be used if `/asset_report/create` was called with `options.add_ons` set to `["fast_assets"]`.
       * @default false
       */
      fast_report?: boolean;
      options?: components["schemas"]["AssetReportGetRequestOptions"];
    };
    /** @description An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
    AssetReportGetRequestOptions: {
      /** @description The maximum number of days of history to include in the Asset Report. */
      days_to_include?: number | null;
    };
    /** @description AssetReportGetResponse defines the response schema for `/asset_report/get` */
    AssetReportGetResponse: {
      report: components["schemas"]["AssetReport"];
      /** @description If the Asset Report generation was successful but identity information cannot be returned, this array will contain information about the errors causing identity information to be missing */
      warnings: components["schemas"]["Warning"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description AssetReportPDFGetRequest defines the request schema for `/asset_report/pdf/get` */
    AssetReportPDFGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      options?: components["schemas"]["AssetReportPDFGetRequestOptions"];
    };
    /** @description An optional object to filter or add data to `/asset_report/get` results. If provided, must be non-`null`. */
    AssetReportPDFGetRequestOptions: {
      /** @description The maximum integer number of days of history to include in the Asset Report. */
      days_to_include?: number | null;
    };
    /**
     * Format: binary
     * @description AssetReportPDFGetResponse defines the response schema for `/asset_report/pdf/get`
     */
    AssetReportPDFGetResponse: string;
    /** @description AssetReportAuditCopyCreateRequest defines the request schema for `/asset_report/audit_copy/get` */
    AssetReportAuditCopyCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      asset_report_token: components["schemas"]["AssetReportToken"];
      /** @description The `auditor_id` of the third party with whom you would like to share the Asset Report. */
      auditor_id?: string;
    };
    /** @description AssetReportAuditCopyCreateResponse defines the response schema for `/asset_report/audit_copy/get` */
    AssetReportAuditCopyCreateResponse: {
      /** @description A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely. */
      audit_copy_token: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * AssetReportAuditCopyGetRequest
     * @description AssetReportAuditCopyGetRequest defines the request schema for `/asset_report/audit_copy/get`
     */
    AssetReportAuditCopyGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `audit_copy_token` granting access to the Audit Copy you would like to get. */
      audit_copy_token: string;
    };
    /** @description AssetReportAuditCopyRemoveRequest defines the request schema for `/asset_report/audit_copy/remove` */
    AssetReportAuditCopyRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `audit_copy_token` granting access to the Audit Copy you would like to revoke. */
      audit_copy_token: string;
    };
    /** @description AssetReportAuditCopyRemoveResponse defines the response schema for `/asset_report/audit_copy/remove` */
    AssetReportAuditCopyRemoveResponse: {
      /** @description `true` if the Audit Copy was successfully removed. */
      removed: boolean;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description BaseReportGetRequest defines the request schema for `/cra/base_report/get` */
    BaseReportGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token: components["schemas"]["UserToken"];
    };
    /** @description BaseReportGetResponse defines the response schema for `/cra/base_report/get` */
    BaseReportGetResponse: {
      report: components["schemas"]["BaseReport"];
      /** @description If the Base Report generation was successful but identity information cannot be returned, this array will contain information about the errors causing identity information to be missing */
      warnings?: components["schemas"]["BaseReportWarning"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BaseReportWarning
     * @description It is possible for an Base Report to be returned with missing account owner information. In such cases, the Base Report will contain warning data in the response, indicating why obtaining the owner information failed.
     */
    BaseReportWarning: {
      /** @description The warning type, which will always be `BASE_REPORT_WARNING` */
      warning_type: string;
      warning_code: components["schemas"]["BaseReportWarningCode"];
      cause: components["schemas"]["Cause"];
      [key: string]: unknown;
    };
    /**
     * @description The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
     * @enum {string}
     */
    BaseReportWarningCode: "OWNERS_UNAVAILABLE" | "TRANSACTIONS_UNAVAILABLE";
    /**
     * HistoricalBalance
     * @description An object representing a balance held by an account in the past
     */
    HistoricalBalance: {
      /**
       * Format: date
       * @description The date of the calculated historical balance, in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (YYYY-MM-DD)
       */
      date: string;
      /**
       * Format: double
       * @description The total amount of funds in the account, calculated from the `current` balance in the `balance` object by subtracting inflows and adding back outflows according to the posted date of each transaction.
       *
       * If the account has any pending transactions, historical balance amounts on or after the date of the earliest pending transaction may differ if retrieved in subsequent Asset Reports as a result of those pending transactions posting.
       */
      current: number;
      /** @description The ISO-4217 currency code of the balance. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the balance. Always `null` if `iso_currency_code` is non-`null`.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * AssetsProductReadyWebhook
     * @description Fired when the Asset Report has been generated and `/asset_report/get` is ready to be called.  If you attempt to retrieve an Asset Report before this webhook has fired, you’ll receive a response with the HTTP status code 400 and a Plaid error code of `PRODUCT_NOT_READY`.
     */
    AssetsProductReadyWebhook: {
      /** @description `ASSETS` */
      webhook_type: string;
      /** @description `PRODUCT_READY` */
      webhook_code: string;
      /** @description The `asset_report_id` corresponding to the Asset Report the webhook has fired for. */
      asset_report_id: string;
      /** @description The `user_id` corresponding to the User ID the webhook has fired for. */
      user_id?: string;
      /** @description The report type, indicating whether the Asset Report is a `full` or `fast` report. */
      report_type?: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * AssetsErrorWebhook
     * @description Fired when Asset Report generation has failed. The resulting `error` will have an `error_type` of `ASSET_REPORT_ERROR`.
     */
    AssetsErrorWebhook: {
      /** @description `ASSETS` */
      webhook_type: string;
      /** @description `ERROR` */
      webhook_code: string;
      error: components["schemas"]["PlaidError"];
      /** @description The ID associated with the Asset Report. */
      asset_report_id: string;
      /** @description The `user_id` corresponding to the User ID the webhook has fired for. */
      user_id?: string;
      environment: components["schemas"]["WebhookEnvironmentValues"];
      [key: string]: unknown;
    };
    /**
     * Warning
     * @description It is possible for an Asset Report to be returned with missing account owner information. In such cases, the Asset Report will contain warning data in the response, indicating why obtaining the owner information failed.
     */
    Warning: {
      /** @description The warning type, which will always be `ASSET_REPORT_WARNING` */
      warning_type: string;
      /**
       * @description The warning code identifies a specific kind of warning. `OWNERS_UNAVAILABLE` indicates that account-owner information is not available.`INVESTMENTS_UNAVAILABLE` indicates that Investments specific information is not available. `TRANSACTIONS_UNAVAILABLE` indicates that transactions information associated with Credit and Depository accounts are unavailable.
       * @enum {string}
       */
      warning_code: "OWNERS_UNAVAILABLE" | "INVESTMENTS_UNAVAILABLE" | "TRANSACTIONS_UNAVAILABLE";
      cause: components["schemas"]["Cause"];
      [key: string]: unknown;
    };
    /**
     * AssetReportUser
     * @description The user object allows you to provide additional information about the user to be appended to the Asset Report. All fields are optional. The `first_name`, `last_name`, and `ssn` fields are required if you would like the Report to be eligible for Fannie Mae’s Day 1 Certainty™ program.
     */
    AssetReportUser: {
      /** @description An identifier you determine and submit for the user. */
      client_user_id?: string | null;
      /** @description The user's first name. Required for the Fannie Mae Day 1 Certainty™ program. */
      first_name?: string | null;
      /** @description The user's middle name */
      middle_name?: string | null;
      /** @description The user's last name.  Required for the Fannie Mae Day 1 Certainty™ program. */
      last_name?: string | null;
      /**
       * @description The user's Social Security Number. Required for the Fannie Mae Day 1 Certainty™ program.
       *
       * Format: "ddd-dd-dddd"
       */
      ssn?: string | null;
      /** @description The user's phone number, in E.164 format: +{countrycode}{number}. For example: "+14151234567". Phone numbers provided in other formats will be parsed on a best-effort basis. */
      phone_number?: string | null;
      /** @description The user's email address. */
      email?: string | null;
      [key: string]: unknown;
    };
    /**
     * AssetReportAddOns
     * @description A list of add-ons that should be included in the Asset Report.
     *
     * `fast_assets`: When Fast Assets is requested, Plaid will create two versions of the Asset Report: the Fast Asset Report, which will contain only Identity and Balance information, and the Full Asset Report, which will also contain Transactions information. A `PRODUCT_READY` webhook will be fired for each Asset Report when it is ready, and the `report_type` field will indicate whether the webhook is firing for the `full` or `fast` Asset Report. To retrieve the Fast Asset Report, call `/asset_report/get` with `fast_report` set to `true`. There is no additional charge for using Fast Assets.
     *
     * `investments`: Request an Asset Report with Investments. This add-on is in closed beta and not generally available.
     * @enum {string}
     */
    AssetReportAddOns: "investments" | "fast_assets";
    /**
     * AssetReportId
     * @description A unique ID identifying an Asset Report. Like all Plaid identifiers, this ID is case sensitive.
     */
    AssetReportId: string;
    /**
     * AssetReportToken
     * @description A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     */
    AssetReportToken: string;
    /**
     * AssetReportTokenNullable
     * @description A token that can be provided to endpoints such as `/asset_report/get` or `/asset_report/pdf/get` to fetch or update an Asset Report.
     */
    AssetReportTokenNullable: string;
    /**
     * AssetReportRefreshAssetReportToken
     * @description The `asset_report_token` returned by the original call to `/asset_report/create`
     */
    AssetReportRefreshAssetReportToken: string;
    /**
     * AssetReport
     * @description An object representing an Asset Report
     */
    AssetReport: {
      asset_report_id: components["schemas"]["AssetReportId"];
      /** @description An identifier you determine and submit for the Asset Report. */
      client_report_id: string | null;
      /**
       * Format: date-time
       * @description The date and time when the Asset Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
       */
      date_generated: string;
      /** @description The duration of transaction history you requested */
      days_requested: number;
      user: components["schemas"]["AssetReportUser"];
      /** @description Data returned by Plaid about each of the Items included in the Asset Report. */
      items: components["schemas"]["AssetReportItem"][];
      [key: string]: unknown;
    };
    /**
     * AssetReportItem
     * @description A representation of an Item within an Asset Report.
     */
    AssetReportItem: {
      item_id: components["schemas"]["ItemId"];
      /** @description The full financial institution name associated with the Item. */
      institution_name: string;
      /** @description The id of the financial institution associated with the Item. */
      institution_id: string;
      /**
       * Format: date-time
       * @description The date and time when this Item’s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      date_last_updated: string;
      /** @description Data about each of the accounts open on the Item. */
      accounts: components["schemas"]["AccountAssets"][];
      [key: string]: unknown;
    };
    /**
     * AccountAssets
     * @description Asset information about an account
     */
    AccountAssets: WithRequired<components["schemas"]["AccountBase"] & {
      /** @description The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. */
      days_available?: number;
      /** @description Transaction history associated with the account. */
      transactions?: components["schemas"]["AssetReportTransaction"][];
      investments?: components["schemas"]["AssetReportInvestments"];
      /** @description Data returned by the financial institution about the account owner or owners.For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29) */
      owners?: components["schemas"]["Owner"][];
      ownership_type?: components["schemas"]["OwnershipType"];
      /** @description Calculated data about the historical balances on the account. */
      historical_balances?: components["schemas"]["HistoricalBalance"][];
      [key: string]: unknown;
    }, "days_available" | "transactions" | "owners" | "historical_balances">;
    /**
     * AssetReportInvestments
     * @description A transaction within an investment account.
     */
    AssetReportInvestments: {
      /** @description The ID of the Investment transaction, unique across all Plaid transactions. Like all Plaid identifiers, the `investment_transaction_id` is case sensitive. */
      investment_transaction_id: string;
      /** @description The `account_id` of the account against which this transaction posted. */
      account_id: string;
      /** @description The `security_id` to which this transaction is related. */
      security_id: string | null;
      /**
       * Format: date
       * @description The [ISO 8601](https://wikipedia.org/wiki/ISO_8601) posting date for the transaction.
       */
      date: string;
      /** @description The institution’s description of the transaction. */
      name: string;
      /**
       * Format: double
       * @description The number of units of the security involved in this transaction. Positive for buy transactions; negative for sell transactions.
       */
      quantity: number;
      /**
       * Format: double
       * @description The complete value of the transaction. Positive values when cash is debited, e.g. purchases of stock; negative values when cash is credited, e.g. sales of stock. Treatment remains the same for cash-only movements unassociated with securities.
       */
      amount: number;
      /**
       * Format: double
       * @description The price of the security at which this transaction occurred.
       */
      price: number;
      /**
       * Format: double
       * @description The combined value of all fees applied to this transaction
       */
      fees: number | null;
      type: components["schemas"]["InvestmentTransactionType"];
      subtype: components["schemas"]["InvestmentTransactionSubtype"];
      /** @description The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * AssetReportInvestmentHolding
     * @description A securities holding at an institution.
     */
    AssetReportInvestmentHolding: {
      /** @description The Plaid `account_id` associated with the holding. */
      account_id: string;
      /** @description The Plaid `security_id` associated with the holding. Security data is not specific to a user's account; any user who held the same security at the same financial institution at the same time would have identical security data. The `security_id` for the same security will typically be the same across different institutions, but this is not guaranteed. The `security_id` does not typically change, but may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change. */
      security_id: string;
      /** @description The holding's trading symbol for publicly traded holdings, and otherwise a short identifier if available. */
      ticker_symbol: string | null;
      /**
       * Format: double
       * @description The last price given by the institution for this security.
       */
      institution_price: number;
      /**
       * Format: date
       * @description The date at which `institution_price` was current.
       */
      institution_price_as_of?: string | null;
      /**
       * Format: double
       * @description The value of the holding, as reported by the institution.
       */
      institution_value: number;
      /**
       * Format: double
       * @description The original total value of the holding. This field is calculated by Plaid as the sum of the purchase price of all of the shares in the holding.
       */
      cost_basis: number | null;
      /**
       * Format: double
       * @description The total quantity of the asset held, as reported by the financial institution. If the security is an option, `quantity` will reflect the total number of options (typically the number of contracts multiplied by 100), not the number of contracts.
       */
      quantity: number;
      /** @description The ISO-4217 currency code of the holding. Always `null` if `unofficial_currency_code` is non-`null`. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the holding. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `iso_currency_code`s.
       */
      unofficial_currency_code: string | null;
      [key: string]: unknown;
    };
    /**
     * AssetReportInvestmentSecurity
     * @description Investment security associated with the account.
     */
    AssetReportInvestmentSecurity: {
      /** @description A unique, Plaid-specific identifier for the security, used to associate securities with holdings. Like all Plaid identifiers, the `security_id` is case sensitive. The `security_id` may change if inherent details of the security change due to a corporate action, for example, in the event of a ticker symbol change or CUSIP change. */
      security_id: string;
      /** @description A descriptive name for the security, suitable for display. */
      name: string | null;
      /** @description The security’s trading symbol for publicly traded securities, and otherwise a short identifier if available. */
      ticker_symbol: string | null;
      /**
       * @description The security type of the holding. Valid security types are:
       *
       * `cash`: Cash, currency, and money market funds
       *
       * `cryptocurrency`: Digital or virtual currencies
       *
       * `derivative`: Options, warrants, and other derivative instruments
       *
       * `equity`: Domestic and foreign equities
       *
       * `etf`: Multi-asset exchange-traded investment funds
       *
       * `fixed income`: Bonds and certificates of deposit (CDs)
       *
       * `loan`: Loans and loan receivables
       *
       * `mutual fund`: Open- and closed-end vehicles pooling funds of multiple investors
       *
       * `other`: Unknown or other investment types
       */
      type: string | null;
      [key: string]: unknown;
    };
    /**
     * @description How an asset is owned.
     *
     * `association`: Ownership by a corporation, partnership, or unincorporated association, including for-profit and not-for-profit organizations.
     * `individual`: Ownership by an individual.
     * `joint`: Joint ownership by multiple parties.
     * `trust`: Ownership by a revocable or irrevocable trust.
     * @enum {string|null}
     */
    OwnershipType: null | "individual" | "joint" | "association" | "trust";
    /**
     * AssetReportTransaction
     * @description A transaction on the asset report
     */
    AssetReportTransaction: {
      /** @description The ID of the account in which this transaction occurred. */
      account_id: string;
      /**
       * Format: double
       * @description The settled value of the transaction, denominated in the transaction's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /** @description The string returned by the financial institution to describe the transaction. */
      original_description: string | null;
      /**
       * @description A hierarchical array of the categories to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * This field will only appear in an Asset Report with Insights.
       */
      category?: string[] | null;
      /**
       * @description The ID of the category to which this transaction belongs. For a full list of categories, see [`/categories/get`](https://plaid.com/docs/api/products/transactions/#categoriesget).
       *
       * This field will only appear in an Asset Report with Insights.
       */
      category_id?: string | null;
      credit_category?: components["schemas"]["CreditCategory"];
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      /**
       * Format: date
       * @description For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
       */
      date: string;
      /** @description The date on which the transaction took place, in IS0 8601 format. */
      date_transacted?: string | null;
      location?: components["schemas"]["Location"];
      /**
       * @description The merchant name or transaction description.
       *
       * This field will only appear in an Asset Report with Insights.
       */
      name?: string;
      /** @description The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`. */
      merchant_name?: string | null;
      payment_meta?: components["schemas"]["PaymentMeta"];
      /** @description When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled. */
      pending: boolean;
      /** @description The ID of a posted transaction's associated pending transaction, where applicable. */
      pending_transaction_id?: string | null;
      /** @description The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. */
      account_owner?: string | null;
      /** @description The unique ID of the transaction. Like all Plaid identifiers, the `transaction_id` is case sensitive. */
      transaction_id: string;
      transaction_type?: components["schemas"]["AssetReportTransactionType"];
      /** @description A unique identifier for an income source. */
      income_source_id?: string;
      [key: string]: unknown;
    };
    /**
     * AssetReportTransactionType
     * @description `digital:` transactions that took place online.
     *
     * `place:` transactions that were made at a physical location.
     *
     * `special:` transactions that relate to banks, e.g. fees or deposits.
     *
     * `unresolved:` transactions that do not fit into the other three types.
     *
     * @enum {string}
     */
    AssetReportTransactionType: "digital" | "place" | "special" | "unresolved";
    /**
     * BaseReport
     * @description An object representing a Base Report
     */
    BaseReport: {
      report_id: components["schemas"]["BaseReportId"];
      /**
       * Format: date-time
       * @description The date and time when the Base Report was created, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format (e.g. "2018-04-12T03:32:11Z").
       */
      date_generated: string;
      /** @description The number of days of transaction history requested. */
      days_requested: number;
      /** @description Data returned by Plaid about each of the Items included in the Base Report. */
      items: components["schemas"]["BaseReportItem"][];
      [key: string]: unknown;
    };
    /**
     * BaseReportItem
     * @description A representation of an Item within a Base Report.
     */
    BaseReportItem: {
      /** @description The full financial institution name associated with the Item. */
      institution_name: string;
      /** @description The id of the financial institution associated with the Item. */
      institution_id: string;
      /**
       * Format: date-time
       * @description The date and time when this Item’s data was last retrieved from the financial institution, in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
       */
      date_last_updated: string;
      /** @description Data about each of the accounts open on the Item. */
      accounts: components["schemas"]["BaseReportAccount"][];
      [key: string]: unknown;
    };
    /**
     * BaseReportAccount
     * @description Base Report information about an account
     */
    BaseReportAccount: {
      balances: components["schemas"]["BaseReportAccountBalances"];
      /** @description The last 2-4 alphanumeric characters of an account's official account number. Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user. */
      mask: string | null;
      /** @description The name of the account, either assigned by the user or by the financial institution itself */
      name: string;
      /** @description The official name of the account as given by the financial institution */
      official_name: string | null;
      type: components["schemas"]["AccountType"];
      subtype: components["schemas"]["AccountSubtype"];
      /** @description The duration of transaction history available for this Item, typically defined as the time since the date of the earliest transaction in that account. Only returned by Base Report endpoints. */
      days_available: number;
      /** @description Transaction history associated with the account. Only returned by Base Report endpoints. Transaction history returned by endpoints such as `/transactions/get` or `/investments/transactions/get` will be returned in the top-level `transactions` field instead. */
      transactions: components["schemas"]["BaseReportTransaction"][];
      /** @description Data returned by the financial institution about the account owner or owners. For business accounts, the name reported may be either the name of the individual or the name of the business, depending on the institution. Multiple owners on a single account will be represented in the same `owner` object, not in multiple owner objects within the array. */
      owners: components["schemas"]["Owner"][];
      ownership_type: components["schemas"]["OwnershipType"];
      /** @description Calculated data about the historical balances on the account. Only returned by Base Report endpoints and currently not supported by `brokerage` or `investment` accounts. */
      historical_balances: components["schemas"]["HistoricalBalance"][];
      account_insights?: components["schemas"]["BaseReportAccountInsights"];
      [key: string]: unknown;
    };
    /**
     * BaseReportAccountBalances
     * @description Base Report information about an account's balances
     */
    BaseReportAccountBalances: {
      [key: string]: unknown;
    } & components["schemas"]["AccountBalance"] & ({
      /**
       * Format: double
       * @description The average historical balance for the entire report
       */
      average_balance?: number | null;
      /** @description The average historical balance of each calendar month */
      average_monthly_balances?: components["schemas"]["BaseReportAverageMonthlyBalances"][];
      /**
       * Format: double
       * @description The average historical balance from the most recent 30 days
       */
      most_recent_thirty_day_average_balance?: number | null;
      [key: string]: unknown;
    });
    /**
     * BaseReportId
     * @description A unique ID identifying an Base Report. Like all Plaid identifiers, this ID is case sensitive.
     */
    BaseReportId: string;
    /**
     * BaseReportTransaction
     * @description A transaction on the Base Report
     */
    BaseReportTransaction: {
      /**
       * Format: double
       * @description The settled value of the transaction, denominated in the transaction's currency, as stated in `iso_currency_code` or `unofficial_currency_code`. Positive values when money moves out of the account; negative values when money moves in. For example, debit card purchases are positive; credit card payments, direct deposits, and refunds are negative.
       */
      amount: number;
      /** @description The ISO-4217 currency code of the transaction. Always `null` if `unofficial_currency_code` is non-null. */
      iso_currency_code: string | null;
      /**
       * @description The unofficial currency code associated with the transaction. Always `null` if `iso_currency_code` is non-`null`. Unofficial currency codes are used for currencies that do not have official ISO currency codes, such as cryptocurrencies and the currencies of certain countries.
       *
       * See the [currency code schema](https://plaid.com/docs/api/accounts#currency-code-schema) for a full listing of supported `unofficial_currency_code`s.
       */
      unofficial_currency_code: string | null;
      /** @description The string returned by the financial institution to describe the transaction. */
      original_description: string | null;
      credit_category?: components["schemas"]["CreditCategory"];
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      /**
       * Format: date
       * @description For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted. Both dates are returned in an [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format ( `YYYY-MM-DD` ).
       */
      date: string;
      /** @description The date on which the transaction took place, in IS0 8601 format. */
      date_transacted?: string | null;
      location?: components["schemas"]["Location"];
      /** @description The merchant name, as enriched by Plaid from the `name` field. This is typically a more human-readable version of the merchant counterparty in the transaction. For some bank transactions (such as checks or account transfers) where there is no meaningful merchant name, this value will be `null`. */
      merchant_name?: string | null;
      /** @description When `true`, identifies the transaction as pending or unsettled. Pending transaction details (name, type, amount, category ID) may change before they are settled. */
      pending: boolean;
      /** @description The name of the account owner. This field is not typically populated and only relevant when dealing with sub-accounts. */
      account_owner?: string | null;
      [key: string]: unknown;
    };
    /**
     * BaseReportAccountInsights
     * @description Calculated insights derived from transaction-level data.
     */
    BaseReportAccountInsights: {
      /**
       * Format: date
       * @description Date of the earliest transaction in the base report for the account.
       */
      oldest_transaction_date?: string;
      /**
       * Format: date
       * @description Date of the most recent transaction in the base report for the account.
       */
      most_recent_transaction_date?: string;
      /** @description Number of days days available in the base report for the account. */
      days_available?: number;
      /** @description Average number of days between sequential transactions */
      average_days_between_transactions?: number;
      /** @description Longest gap between sequential transactions */
      longest_gap_between_transactions?: components["schemas"]["BaseReportLongestGapInsights"][];
      /** @description The number of debits into the account. This field will be null for non-depository accounts. */
      number_of_inflows?: components["schemas"]["BaseReportNumberFlowInsights"][] | null;
      /** @description Average amount of debit transactions into account. This field will be null for non-depository accounts. This field only takes into account USD transactions from the account. */
      average_inflow_amount?: components["schemas"]["BaseReportAverageFlowInsights"][] | null;
      /** @description The number of credit into the account. This field will be null for non-depository accounts. */
      number_of_outflows?: components["schemas"]["BaseReportNumberFlowInsights"][] | null;
      /** @description Average amount of credit transactions into account. This field will be null for non-depository accounts. This field only takes into account USD transactions from the account. */
      average_outflow_amount?: components["schemas"]["BaseReportAverageFlowInsights"][] | null;
      /** @description Number of days with no transactions */
      number_of_days_no_transactions?: number;
      [key: string]: unknown;
    };
    /**
     * BaseReportLongestGapInsights
     * @description Largest number of days between sequential transactions per calendar month
     */
    BaseReportLongestGapInsights: {
      /**
       * Format: date
       * @description The start date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The end date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      /** @description Largest number of days between sequential transactions for this time period. */
      days?: number;
      [key: string]: unknown;
    };
    /**
     * BaseReportNumberFlowInsights
     * @description The number of credits or debits out of the account. This field will only added for depository accounts
     */
    BaseReportNumberFlowInsights: {
      /**
       * Format: date
       * @description The start date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The end date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      /** @description The number of credits or debits out of the account for this time period. */
      count?: number;
      [key: string]: unknown;
    };
    /**
     * BaseReportAverageFlowInsights
     * @description Average dollar amount of credit or debit transactions out of the account. This field will only added for depository accounts
     */
    BaseReportAverageFlowInsights: {
      /**
       * Format: date
       * @description The start date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The end date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      total_amount?: components["schemas"]["CreditAmountWithCurrency"];
      [key: string]: unknown;
    };
    /**
     * BaseReportAverageMonthlyBalances
     * @description Average balance in dollar amount per month
     */
    BaseReportAverageMonthlyBalances: {
      /**
       * @description The start date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * @description The end date of this time period.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      average_balance?: components["schemas"]["CreditAmountWithCurrency"];
      [key: string]: unknown;
    };
    /**
     * @description Field describing whether the associated address is being used for commercial or residential purposes.
     *
     * Note: This value will be `no_data` when Plaid does not have sufficient data to determine the address's use.
     * @example residential
     * @enum {string}
     */
    AddressPurposeLabel: "residential" | "commercial" | "no_data";
    /**
     * BeaconAuditTrail
     * @description Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
     */
    BeaconAuditTrail: {
      source: components["schemas"]["BeaconAuditTrailSource"];
      dashboard_user_id: components["schemas"]["DashboardUserIDNullable"];
      [key: string]: unknown;
    };
    /**
     * @description A type indicating what caused a resource to be changed or updated.
     *
     *
     * `dashboard` - The resource was created or updated by a member of your team via the Plaid dashboard.
     *
     * `api` - The resource was created or updated via the Plaid API.
     *
     * `system` - The resource was created or updated automatically by a part of the Plaid Beacon system. For example, if another business using Plaid Beacon created a fraud report that matched one of your users, your matching user's status would automatically be updated and the audit trail source would be `system`.
     *
     * `bulk_import` - The resource was created or updated as part of a bulk import process. For example, if your company provided a CSV of user data as part of your initial onboarding, the audit trail source would be `bulk_import`.
     * @enum {string}
     */
    BeaconAuditTrailSource: "dashboard" | "api" | "system" | "bulk_import";
    /**
     * BeaconMatchSummaryCode
     * @description An enum indicating the match type between two Beacon Users.
     *
     *
     * `match` indicates that the provided input data was a strong match against the other Beacon User.
     *
     * `partial_match` indicates the data approximately matched the other Beacon User. For example, "Knope" vs. "Knope-Wyatt" for last name.
     *
     * `no_match` indicates that Plaid was able to compare this field against the other Beacon User and it did not match the provided input data.
     *
     * `no_data` indicates that Plaid was unable to compare this field against the original Beacon User because the field was not present in one of the Beacon Users.
     * @example match
     * @enum {string}
     */
    BeaconMatchSummaryCode: "match" | "partial_match" | "no_match" | "no_data";
    /**
     * BeaconProgramID
     * @description ID of the associated Beacon Program.
     * @example becprg_11111111111111
     */
    BeaconProgramID: string;
    /**
     * BeaconReport
     * @description A Beacon Report describes the type of fraud committed by a user as well as the date the fraud was committed and the total amount of money lost due to the fraud incident.
     *
     * This information is used to block similar fraud attempts on your platform as well as alert other companies who screen a user with matching identity information.
     * Other companies will not receive any new identity information, just what matched, plus information such as industry, type of fraud, and date of fraud.
     *
     * You can manage your fraud reports by adding, deleting, or editing reports as you get additional information on fraudulent users.
     */
    BeaconReport: {
      id: components["schemas"]["BeaconReportID"];
      beacon_user_id: components["schemas"]["BeaconUserID"];
      created_at: components["schemas"]["Timestamp"];
      type: components["schemas"]["BeaconReportType"];
      fraud_date: components["schemas"]["ISO8601Date"];
      fraud_amount: components["schemas"]["FraudAmount"];
      audit_trail: components["schemas"]["BeaconAuditTrail"];
      [key: string]: unknown;
    };
    /** @description Request input for creating a Beacon Report */
    BeaconReportCreateRequest: {
      beacon_user_id: components["schemas"]["BeaconUserID"];
      type: components["schemas"]["BeaconReportType"];
      fraud_date: components["schemas"]["ISO8601Date"];
      fraud_amount?: components["schemas"]["FraudAmount"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * @description A Beacon Report describes the type of fraud committed by a user as well as the date the fraud was committed and the total amount of money lost due to the fraud incident.
     *
     * This information is used to block similar fraud attempts on your platform as well as alert other companies who screen a user with matching identity information.
     * Other companies will not receive any new identity information, just what matched, plus information such as industry, type of fraud, and date of fraud.
     *
     * You can manage your fraud reports by adding, deleting, or editing reports as you get additional information on fraudulent users.
     */
    BeaconReportCreateResponse: {
      id: components["schemas"]["BeaconReportID"];
      beacon_user_id: components["schemas"]["BeaconUserID"];
      created_at: components["schemas"]["Timestamp"];
      type: components["schemas"]["BeaconReportType"];
      fraud_date: components["schemas"]["ISO8601Date"];
      fraud_amount: components["schemas"]["FraudAmount"];
      audit_trail: components["schemas"]["BeaconAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for getting a Beacon Report */
    BeaconReportGetRequest: {
      beacon_report_id: components["schemas"]["BeaconReportID"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * @description A Beacon Report describes the type of fraud committed by a user as well as the date the fraud was committed and the total amount of money lost due to the fraud incident.
     *
     * This information is used to block similar fraud attempts on your platform as well as alert other companies who screen a user with matching identity information.
     * Other companies will not receive any new identity information, just what matched, plus information such as industry, type of fraud, and date of fraud.
     *
     * You can manage your fraud reports by adding, deleting, or editing reports as you get additional information on fraudulent users.
     */
    BeaconReportGetResponse: {
      id: components["schemas"]["BeaconReportID"];
      beacon_user_id: components["schemas"]["BeaconUserID"];
      created_at: components["schemas"]["Timestamp"];
      type: components["schemas"]["BeaconReportType"];
      fraud_date: components["schemas"]["ISO8601Date"];
      fraud_amount: components["schemas"]["FraudAmount"];
      audit_trail: components["schemas"]["BeaconAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportID
     * @description ID of the associated Beacon Report.
     * @example becrpt_11111111111111
     */
    BeaconReportID: string;
    /**
     * BeaconReportID
     * @description ID of the associated Beacon Report.
     * @example becrpt_11111111111111
     */
    BeaconReportIDNullable: string | null;
    /** @description Request input for listing Beacon Reports */
    BeaconReportListRequest: {
      beacon_user_id: components["schemas"]["BeaconUserID"];
      cursor?: components["schemas"]["Cursor"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description The response schema for `/beacon/report/list` */
    BeaconReportListResponse: {
      beacon_reports: components["schemas"]["BeaconReport"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportSyndication
     * @description A Beacon Report Syndication represents a Beacon Report created either by your organization or another Beacon customer that matches a specific Beacon User you've created.
     *
     * The `analysis` field in the response indicates which fields matched between the originally reported Beacon User and the Beacon User that the report was syndicated to.
     *
     * The `report` field in the response contains a subset of information from the original report.
     */
    BeaconReportSyndication: {
      id: components["schemas"]["BeaconReportSyndicationID"];
      report: components["schemas"]["BeaconReportSyndicationOriginalReport"];
      analysis: components["schemas"]["BeaconReportSyndicationAnalysis"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportSyndicationAnalysis
     * @description Analysis of which fields matched between the originally reported Beacon User and the Beacon User that the report was syndicated to.
     */
    BeaconReportSyndicationAnalysis: {
      address: components["schemas"]["BeaconMatchSummaryCode"];
      date_of_birth: components["schemas"]["BeaconMatchSummaryCode"];
      email_address: components["schemas"]["BeaconMatchSummaryCode"];
      name: components["schemas"]["BeaconMatchSummaryCode"];
      id_number: components["schemas"]["BeaconMatchSummaryCode"];
      ip_address: components["schemas"]["BeaconMatchSummaryCode"];
      phone_number: components["schemas"]["BeaconMatchSummaryCode"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportSyndicationID
     * @description ID of the associated Beacon Report Syndication.
     * @example becrsn_11111111111111
     */
    BeaconReportSyndicationID: string;
    /** @description Request input for listing Beacon Report Syndications */
    BeaconReportSyndicationListRequest: {
      beacon_user_id: components["schemas"]["BeaconUserID"];
      cursor?: components["schemas"]["Cursor"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description The response schema for `/beacon/report_syndication/list` */
    BeaconReportSyndicationListResponse: {
      beacon_report_syndications: components["schemas"]["BeaconReportSyndication"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportSyndicationOriginalReport
     * @description A subset of information from a Beacon Report that has been syndicated to a matching Beacon User in your program.
     *
     * The `id` field in the response is the ID of the original report that was syndicated. If the original report was created by your organization, the field will be filled with the ID of the report. Otherwise, the field will be `null` indicating that the original report was created by another Beacon customer.
     */
    BeaconReportSyndicationOriginalReport: {
      id: components["schemas"]["BeaconReportIDNullable"];
      created_at: components["schemas"]["Timestamp"];
      type: components["schemas"]["BeaconReportType"];
      fraud_date: components["schemas"]["ISO8601Date"];
      [key: string]: unknown;
    };
    /**
     * BeaconReportType
     * @description The type of Beacon Report.
     *
     * `first_party`: If this is the same individual as the one who submitted the KYC.
     *
     * `stolen`: If this is a different individual from the one who submitted the KYC.
     *
     * `synthetic`: If this is an individual using fabricated information.
     *
     * `account_takeover`: If this individual's account was compromised.
     *
     * `unknown`: If you aren't sure who committed the fraud.
     * @enum {string}
     */
    BeaconReportType: "first_party" | "stolen" | "synthetic" | "account_takeover" | "unknown";
    /**
     * BeaconUserAddress
     * @description Even if an address has been collected, some fields may be null depending on the region's addressing system. For example:
     *
     *
     * Addresses from the United Kingdom will not include a region
     *
     *
     * Addresses from Hong Kong will not include a postal code
     */
    BeaconUserAddress: {
      street: components["schemas"]["Street"];
      street2: components["schemas"]["Street2"];
      city: components["schemas"]["City"];
      region: components["schemas"]["Region"];
      postal_code: components["schemas"]["PostalCode"];
      country: components["schemas"]["GenericCountryCode"];
      [key: string]: unknown;
    };
    /**
     * @description Request input for creating a Beacon User.
     *
     * The primary use for this endpoint is to add a new end user to Beacon for fraud and duplicate scanning.
     * This endpoint can also be used to import historical fraud cases into the Beacon Network without being charged
     * for creating a Beacon User. To import historical fraud cases, embed the fraud report in the optional `report`
     * section of the request payload.
     */
    BeaconUserCreateRequest: {
      program_id: components["schemas"]["BeaconProgramID"];
      client_user_id: components["schemas"]["ClientUserID"];
      user: components["schemas"]["BeaconUserRequestData"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description A Beacon User represents an end user that has been scanned against the Beacon Network. */
    BeaconUserCreateResponse: {
      id: components["schemas"]["BeaconUserID"];
      created_at: components["schemas"]["Timestamp"];
      updated_at: components["schemas"]["UpdatedAtTimestamp"];
      status: components["schemas"]["BeaconUserStatus"];
      program_id: components["schemas"]["BeaconProgramID"];
      client_user_id: components["schemas"]["ClientUserID"];
      user: components["schemas"]["BeaconUserData"];
      audit_trail: components["schemas"]["BeaconAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BeaconUserData
     * @description A Beacon User's data and resulting analysis when checked against duplicate records and the Beacon Fraud Network.
     */
    BeaconUserData: {
      date_of_birth: components["schemas"]["ISO8601Date"];
      name: components["schemas"]["BeaconUserName"];
      address: components["schemas"]["BeaconUserAddress"];
      email_address: components["schemas"]["EmailAddressNullable"];
      phone_number: components["schemas"]["BeaconUserPhoneNumber"];
      id_number: components["schemas"]["BeaconUserIDNumber"];
      ip_address: components["schemas"]["IPAddress"];
      [key: string]: unknown;
    };
    /** @description Request input for fetching a Beacon User */
    BeaconUserGetRequest: {
      beacon_user_id: components["schemas"]["BeaconUserID"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description A Beacon User represents an end user that has been scanned against the Beacon Network. */
    BeaconUserGetResponse: {
      id: components["schemas"]["BeaconUserID"];
      created_at: components["schemas"]["Timestamp"];
      updated_at: components["schemas"]["UpdatedAtTimestamp"];
      status: components["schemas"]["BeaconUserStatus"];
      program_id: components["schemas"]["BeaconProgramID"];
      client_user_id: components["schemas"]["ClientUserID"];
      user: components["schemas"]["BeaconUserData"];
      audit_trail: components["schemas"]["BeaconAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * BeaconUserID
     * @description ID of the associated Beacon User.
     * @example becusr_11111111111111
     */
    BeaconUserID: string;
    /**
     * BeaconUserIDNumber
     * @description The ID number associated with a Beacon User.
     */
    BeaconUserIDNumber: {
      value: components["schemas"]["IDNumberValue"];
      type: components["schemas"]["IDNumberType"];
      [key: string]: unknown;
    };
    /**
     * BeaconUserName
     * @description The full name for a given Beacon User.
     */
    BeaconUserName: {
      given_name: components["schemas"]["GivenNameField"];
      family_name: components["schemas"]["FamilyNameField"];
      [key: string]: unknown;
    };
    /**
     * BeaconUserPhoneNumber
     * @description A phone number in E.164 format.
     * @example +19876543212
     */
    BeaconUserPhoneNumber: string | null;
    /**
     * BeaconUserRequestAddress
     * @description Home address for the associated user. For more context on this field, see [Input Validation by Country](https://plaid.com/docs/identity-verification/hybrid-input-validation/#input-validation-by-country).
     */
    BeaconUserRequestAddress: {
      street: components["schemas"]["Street"];
      street2?: components["schemas"]["Street2"];
      city: components["schemas"]["City"];
      region?: components["schemas"]["Region"];
      postal_code?: components["schemas"]["PostalCode"];
      country: components["schemas"]["GenericCountryCode"];
      [key: string]: unknown;
    };
    /**
     * BeaconUserRequestData
     * @description A Beacon User's data which is used to check against duplicate records and the Beacon Fraud Network.
     */
    BeaconUserRequestData: {
      date_of_birth: components["schemas"]["ISO8601Date"];
      name: components["schemas"]["BeaconUserName"];
      address: components["schemas"]["BeaconUserRequestAddress"];
      email_address?: components["schemas"]["EmailAddress"];
      phone_number?: components["schemas"]["BeaconUserPhoneNumber"];
      id_number?: components["schemas"]["BeaconUserIDNumber"];
      ip_address?: components["schemas"]["IPAddress"];
      [key: string]: unknown;
    };
    /** @description Request input for updating the status of a Beacon User */
    BeaconUserReviewRequest: {
      beacon_user_id: components["schemas"]["BeaconUserID"];
      status: components["schemas"]["BeaconUserStatus"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * BeaconUserStatus
     * @description A status of a Beacon User.
     *
     * `rejected`: The Beacon User has been rejected for fraud. Users can be automatically or manually rejected.
     *
     * `pending_review`: The Beacon User has been marked for review.
     *
     * `cleared`: The Beacon User has been cleared of fraud.
     * @example cleared
     * @enum {string}
     */
    BeaconUserStatus: "rejected" | "pending_review" | "cleared";
    /**
     * CityName
     * @description City from the end user's address
     * @example Pawnee
     */
    City: string;
    /**
     * CityName
     * @description City from the end user's address
     * @example Pawnee
     */
    CityNullable: string | null;
    /**
     * ClientUserID
     * @description A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @example your-db-id-3b24110
     */
    ClientUserID: string;
    /**
     * ClientUserID
     * @description A unique ID that identifies the end user in your system. This ID can also be used to associate user-specific data from other Plaid products. Financial Account Matching requires this field and the `/link/token/create` `client_user_id` to be consistent. Personally identifiable information, such as an email address or phone number, should not be used in the `client_user_id`.
     * @example your-db-id-3b24110
     */
    ClientUserIDNullable: string | null;
    /**
     * @description An identifier that determines which page of results you receive.
     * @example eyJkaXJlY3Rpb24iOiJuZXh0Iiwib2Zmc2V0IjoiMTU5NDM
     */
    Cursor: string | null;
    /**
     * DashboardUser
     * @description Account information associated with a team member with access to the Plaid dashboard.
     */
    DashboardUser: {
      id: components["schemas"]["DashboardUserID"];
      created_at: components["schemas"]["Timestamp"];
      email_address: components["schemas"]["EmailAddress"];
      status: components["schemas"]["DashboardUserStatus"];
      [key: string]: unknown;
    };
    /** @description Request input for fetching a dashboard user */
    DashboardUserGetRequest: {
      dashboard_user_id: components["schemas"]["DashboardUserID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description Account information associated with a team member with access to the Plaid dashboard. */
    DashboardUserGetResponse: {
      id: components["schemas"]["DashboardUserID"];
      created_at: components["schemas"]["Timestamp"];
      email_address: components["schemas"]["EmailAddress"];
      status: components["schemas"]["DashboardUserStatus"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * DashboardUserID
     * @description ID of the associated user.
     * @example 54350110fedcbaf01234ffee
     */
    DashboardUserID: string;
    /**
     * DashboardUserID
     * @description ID of the associated user.
     * @example 54350110fedcbaf01234ffee
     */
    DashboardUserIDNullable: string | null;
    /** @description Request input for listing dashboard users */
    DashboardUserListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of dashboard users */
    DashboardUserListResponse: {
      /** @description List of dashboard users */
      dashboard_users: components["schemas"]["DashboardUser"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * @description The current status of the user.
     * @example active
     * @enum {string}
     */
    DashboardUserStatus: "invited" | "active" | "deactivated";
    /**
     * DateRange
     * @description A date range with a start and end date
     * @example {
     *   "ending": "1966-06-30",
     *   "beginning": "1966-06-01"
     * }
     */
    DateRange: {
      beginning: components["schemas"]["ISO8601Date"];
      ending: components["schemas"]["ISO8601Date"];
      [key: string]: unknown;
    };
    /**
     * CustomerReference
     * @deprecated
     * @description Specifying `user.client_user_id` is deprecated. Please provide `client_user_id` at the root level instead.
     * @example your-db-id-3b24110
     */
    DeprecatedClientUserID: string | null;
    /** @description High level descriptions of how the associated document was processed. If a document fails verification, the details in the `analysis` object should help clarify why the document was rejected. */
    DocumentAnalysis: {
      authenticity: components["schemas"]["DocumentAuthenticityMatchCode"];
      image_quality: components["schemas"]["ImageQuality"];
      extracted_data: components["schemas"]["PhysicalDocumentExtractedDataAnalysis"];
      [key: string]: unknown;
    };
    /**
     * @description High level summary of whether the document in the provided image matches the formatting rules and security checks for the associated jurisdiction.
     *
     * For example, most identity documents have formatting rules like the following:
     *
     *
     * The image of the person's face must have a certain contrast in order to highlight skin tone
     *
     *
     * The subject in the document's image must remove eye glasses and pose in a certain way
     *
     *
     * The informational fields (name, date of birth, ID number, etc.) must be colored and aligned according to specific rules
     *
     *
     * Security features like watermarks and background patterns must be present
     *
     * So a `match` status for this field indicates that the document in the provided image seems to conform to the various formatting and security rules associated with the detected document.
     * @example match
     * @enum {string}
     */
    DocumentAuthenticityMatchCode: "match" | "partial_match" | "no_match" | "no_data";
    /**
     * @description A match summary describing the cross comparison between the subject's date of birth, extracted from the document image, and the date of birth they separately provided to the identity verification attempt.
     * @example match
     * @enum {string}
     */
    DocumentDateOfBirthMatchCode: "match" | "partial_match" | "no_match";
    /**
     * @description Temporary URL that expires after 60 seconds for downloading the original image of the back of the document. Might be null if the back of the document was not collected.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/original_back.jpeg
     */
    DocumentImage__Back: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading a cropped image containing just the back of the document. Might be null if the back of the document was not collected.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/cropped_back.jpeg
     */
    DocumentImage__CroppedBack: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading a cropped image containing just the front of the document.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/cropped_front.jpeg
     */
    DocumentImage__CroppedFront: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading a crop of just the user's face from the document image. Might be null if the document does not contain a face photo.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/face.jpeg
     */
    DocumentImage__Face: string | null;
    /**
     * @description Temporary URL that expires after 60 seconds for downloading the uncropped original image of the front of the document.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/documents/1/original_front.jpeg
     */
    DocumentImage__Front: string | null;
    /**
     * @description A match summary describing the cross comparison between the subject's name, extracted from the document image, and the name they separately provided to identity verification attempt.
     * @example match
     * @enum {string}
     */
    DocumentNameMatchCode: "match" | "partial_match" | "no_match";
    /**
     * DocumentStatus
     * @description An outcome status for this specific document submission. Distinct from the overall `documentary_verification.status` that summarizes the verification outcome from one or more documents.
     * @example success
     * @enum {string}
     */
    DocumentStatus: "success" | "failed" | "manually_approved";
    /**
     * DocumentaryVerification
     * @description Data, images, analysis, and results from the `documentary_verification` step. This field will be `null` unless `steps.documentary_verification` has reached a terminal state of either `success` or `failed`.
     */
    DocumentaryVerification: {
      /**
       * @description The outcome status for the associated Identity Verification attempt's `documentary_verification` step. This field will always have the same value as `steps.documentary_verification`.
       * @example success
       */
      status: string;
      /**
       * @description An array of documents submitted to the `documentary_verification` step. Each entry represents one user submission, where each submission will contain both a front and back image, or just a front image, depending on the document type.
       *
       * Note: Plaid will automatically let a user submit a new set of document images up to three times if we detect that a previous attempt might have failed due to user error. For example, if the first set of document images are blurry or obscured by glare, the user will be asked to capture their documents again, resulting in at least two separate entries within `documents`. If the overall `documentary_verification` is `failed`, the user has exhausted their retry attempts.
       */
      documents: components["schemas"]["DocumentaryVerificationDocument"][];
      [key: string]: unknown;
    } | null;
    /** @description Images, extracted data, and analysis from a user's identity document */
    DocumentaryVerificationDocument: {
      status: components["schemas"]["DocumentStatus"];
      /**
       * @description The `attempt` field begins with 1 and increments with each subsequent document upload.
       * @example 1
       */
      attempt: number;
      images: components["schemas"]["PhysicalDocumentImages"];
      extracted_data: components["schemas"]["PhysicalDocumentExtractedData"];
      analysis: components["schemas"]["DocumentAnalysis"];
      redacted_at: components["schemas"]["TimestampNullable"];
      [key: string]: unknown;
    };
    /**
     * EmailAddress
     * Format: email
     * @description A valid email address.
     * @example user@example.com
     */
    EmailAddress: string;
    /**
     * EmailAddress
     * Format: email
     * @description A valid email address.
     * @example user@example.com
     */
    EmailAddressNullable: string | null;
    /**
     * EntityDocument
     * @description An official document, usually issued by a governing body or institution, with an associated identifier.
     */
    EntityDocument: {
      type: components["schemas"]["EntityDocumentType"];
      number: components["schemas"]["WatchlistScreeningDocumentValue"];
      [key: string]: unknown;
    };
    /**
     * EntityDocumentType
     * @description The kind of official document represented by this object.
     *
     * `bik` - Russian bank code
     *
     * `business_number` - A number that uniquely identifies the business within a category of businesses
     *
     * `imo` - Number assigned to the entity by the International Maritime Organization
     *
     * `other` - Any document not covered by other categories
     *
     * `swift` - Number identifying a bank and branch.
     *
     * `tax_id` - Identification issued for the purpose of collecting taxes
     * @example swift
     * @enum {string}
     */
    EntityDocumentType: "bik" | "business_number" | "imo" | "other" | "swift" | "tax_id";
    /** @description Analysis information describing why a screening hit matched the provided entity information */
    EntityScreeningHitAnalysis: {
      documents?: components["schemas"]["MatchSummaryCode"];
      email_addresses?: components["schemas"]["MatchSummaryCode"];
      locations?: components["schemas"]["MatchSummaryCode"];
      names?: components["schemas"]["MatchSummaryCode"];
      phone_numbers?: components["schemas"]["MatchSummaryCode"];
      urls?: components["schemas"]["MatchSummaryCode"];
      /**
       * @description The version of the entity screening's `search_terms` that were compared when the entity screening hit was added. entity screening hits are immutable once they have been reviewed. If changes are detected due to updates to the entity screening's `search_terms`, the associated entity program, or the list's source data prior to review, the entity screening hit will be updated to reflect those changes.
       * @example 1
       */
      search_terms_version: number;
      [key: string]: unknown;
    };
    /** @description Information associated with the entity watchlist hit */
    EntityScreeningHitData: {
      /** @description Documents associated with the watchlist hit */
      documents?: components["schemas"]["EntityScreeningHitDocumentsItems"][];
      /** @description Email addresses associated with the watchlist hit */
      email_addresses?: components["schemas"]["EntityScreeningHitEmailsItems"][];
      /** @description Locations associated with the watchlist hit */
      locations?: components["schemas"]["GenericScreeningHitLocationItems"][];
      /** @description Names associated with the watchlist hit */
      names?: components["schemas"]["EntityScreeningHitNamesItems"][];
      /** @description Phone numbers associated with the watchlist hit */
      phone_numbers?: components["schemas"]["EntityScreeningHitsPhoneNumberItems"][];
      /** @description URLs associated with the watchlist hit */
      urls?: components["schemas"]["EntityScreeningHitUrlsItems"][];
      [key: string]: unknown;
    };
    /** @description Analyzed documents for the associated hit */
    EntityScreeningHitDocumentsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityDocument"];
      [key: string]: unknown;
    };
    /** @description Email address information for the associated entity watchlist hit */
    EntityScreeningHitEmails: {
      email_address: components["schemas"]["EmailAddress"];
      [key: string]: unknown;
    };
    /** @description Analyzed emails for the associated hit */
    EntityScreeningHitEmailsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitEmails"];
      [key: string]: unknown;
    };
    /** @description Name information for the associated entity watchlist hit */
    EntityScreeningHitNames: {
      /**
       * @description The full name of the entity.
       * @example Al Qaida
       */
      full: string;
      /**
       * @description Primary names are those most commonly used to refer to this entity. Only one name will ever be marked as primary.
       * @example false
       */
      is_primary: boolean;
      weak_alias_determination: components["schemas"]["WeakAliasDetermination"];
      [key: string]: unknown;
    };
    /** @description Analyzed names for the associated hit */
    EntityScreeningHitNamesItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitNames"];
      [key: string]: unknown;
    };
    /** @description Phone number information associated with the entity screening hit */
    EntityScreeningHitPhoneNumbers: {
      type: components["schemas"]["PhoneType"];
      phone_number: components["schemas"]["WatchlistScreeningPhoneNumber"];
      [key: string]: unknown;
    };
    /** @description URLs associated with the entity screening hit */
    EntityScreeningHitUrls: {
      url: components["schemas"]["URL"];
      [key: string]: unknown;
    };
    /** @description Analyzed URLs for the associated hit */
    EntityScreeningHitUrlsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitUrls"];
      [key: string]: unknown;
    };
    /** @description Analyzed phone numbers for the associated hit */
    EntityScreeningHitsPhoneNumberItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["EntityScreeningHitPhoneNumbers"];
      [key: string]: unknown;
    };
    /**
     * EntityWatchlistCode
     * @description Shorthand identifier for a specific screening list for entities.
     *  `AU_CON`: Australia Department of Foreign Affairs and Trade Consolidated List
     *  `CA_CON`: Government of Canada Consolidated List of Sanctions
     *  `EU_CON`: European External Action Service Consolidated List
     *  `IZ_SOE`: State Owned Enterprise List
     *  `IZ_UNC`: United Nations Consolidated Sanctions
     *  `IZ_WBK`: World Bank Listing of Ineligible Firms and Individuals
     *  `US_CAP`: US OFAC Correspondent Account or Payable-Through Account Sanctions
     *  `US_FSE`: US OFAC Foreign Sanctions Evaders
     *  `US_MBS`: US Non-SDN Menu-Based Sanctions
     *  `US_SDN`: US Specially Designated Nationals List
     *  `US_SSI`: US OFAC Sectoral Sanctions Identifications
     *  `US_CMC`: US OFAC Non-SDN Chinese Military-Industrial Complex List
     *  `US_UVL`: Bureau of Industry and Security Unverified List
     *  `UK_HMC`: UK HM Treasury Consolidated List
     * @example EU_CON
     * @enum {string}
     */
    EntityWatchlistCode: "CA_CON" | "EU_CON" | "IZ_SOE" | "IZ_UNC" | "IZ_WBK" | "US_CAP" | "US_FSE" | "US_MBS" | "US_SDN" | "US_SSI" | "US_CMC" | "US_UVL" | "AU_CON" | "UK_HMC";
    /**
     * EntityWatchlistProgram
     * @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities.
     */
    EntityWatchlistProgram: {
      id: components["schemas"]["EntityWatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "EU_CON"
       * ]
       */
      lists_enabled: components["schemas"]["EntityWatchlistCode"][];
      name: components["schemas"]["EntityWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
      [key: string]: unknown;
    };
    /**
     * EntityWatchlistProgramID
     * @description ID of the associated entity program.
     * @example entprg_2eRPsDnL66rZ7H
     */
    EntityWatchlistProgramID: string;
    /**
     * EntityWatchlistScreening
     * @description The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration.
     */
    EntityWatchlistScreening: {
      id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms: components["schemas"]["EntityWatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      [key: string]: unknown;
    };
    /**
     * EntityWatchlistScreeningHit
     * @description Data from a government watchlist that has been attached to the screening.
     */
    EntityWatchlistScreeningHit: {
      id: components["schemas"]["EntityWatchlistScreeningHitID"];
      review_status: components["schemas"]["WatchlistScreeningHitStatus"];
      first_active: components["schemas"]["Timestamp"];
      inactive_since: components["schemas"]["TimestampNullable"];
      historical_since: components["schemas"]["TimestampNullable"];
      list_code: components["schemas"]["EntityWatchlistCode"];
      plaid_uid: components["schemas"]["InternalUID"];
      source_uid: components["schemas"]["SourceUID"];
      analysis?: components["schemas"]["EntityScreeningHitAnalysis"];
      data?: components["schemas"]["EntityScreeningHitData"];
      [key: string]: unknown;
    };
    /**
     * EntityWatchlistScreeningHitID
     * @description ID of the associated entity screening hit.
     * @example enthit_52xR9LKo77r1Np
     */
    EntityWatchlistScreeningHitID: string;
    /**
     * EntityWatchlistScreeningID
     * @description ID of the associated entity screening.
     * @example entscr_52xR9LKo77r1Np
     */
    EntityWatchlistScreeningID: string;
    /**
     * EntityWatchlistScreeningName
     * @description The name of the organization being screened.
     * @example Al-Qaida
     */
    EntityWatchlistScreeningName: string;
    /**
     * EntityWatchlistScreeningProgramName
     * @description A name for the entity program to define its purpose. For example, "High Risk Organizations" or "Applicants".
     * @example Sample Program
     */
    EntityWatchlistScreeningProgramName: string;
    /**
     * EntityWatchlistScreeningReview
     * @description A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    EntityWatchlistScreeningReview: {
      id: components["schemas"]["EntityWatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      [key: string]: unknown;
    };
    /**
     * EntityWatchlistScreeningReviewID
     * @description ID of the associated entity review.
     * @example entrev_aCLNRxK3UVzn2r
     */
    EntityWatchlistScreeningReviewID: string;
    /** @description Search terms associated with an entity used for searching against watchlists */
    EntityWatchlistScreeningSearchTerms: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      legal_name: components["schemas"]["EntityWatchlistScreeningName"];
      document_number: components["schemas"]["WatchlistScreeningDocumentValueNullable"];
      email_address: components["schemas"]["EmailAddressNullable"];
      country: components["schemas"]["GenericCountryCodeNullable"];
      phone_number: components["schemas"]["WatchlistScreeningPhoneNumberNullable"];
      url: components["schemas"]["URLNullable"];
      /**
       * @description The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
       * @example 1
       */
      version: number;
      [key: string]: unknown;
    };
    /** @description Search inputs for creating an entity watchlist screening */
    EntityWatchlistSearchTerms: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      legal_name: components["schemas"]["EntityWatchlistScreeningName"];
      document_number?: components["schemas"]["WatchlistScreeningDocumentValueNullable"];
      email_address?: components["schemas"]["EmailAddressNullable"];
      country?: components["schemas"]["GenericCountryCodeNullable"];
      phone_number?: components["schemas"]["WatchlistScreeningPhoneNumberNullable"];
      url?: components["schemas"]["URLNullable"];
    };
    /**
     * @description A description of whether the associated document was expired when the verification was performed.
     *
     * Note: In the case where an expiration date is not present on the document or failed to be extracted, this value will be `no_data`.
     * @example not_expired
     * @enum {string}
     */
    ExpirationDate: "not_expired" | "expired" | "no_data";
    /**
     * FamilyName
     * @description A string with at least one non-whitespace character, with a max length of 100 characters.
     * @example Knope
     */
    FamilyNameField: string;
    /**
     * FraudAmount
     * @description The amount and currency of the fraud or attempted fraud.
     * `fraud_amount` should be omitted to indicate an unknown fraud amount.
     */
    FraudAmount: {
      iso_currency_code: components["schemas"]["ISOCurrencyCode"];
      /**
       * Format: double
       * @description The amount value.
       * This value can be 0 to indicate no money was lost.
       * Must not contain more than two digits of precision (e.g., `1.23`).
       * @example 100
       */
      value: number;
      [key: string]: unknown;
    } | null;
    /**
     * GenericCountryCode
     * @description Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @example US
     */
    GenericCountryCode: string;
    /**
     * GenericCountryCode
     * @description Valid, capitalized, two-letter ISO code representing the country of this object. Must be in ISO 3166-1 alpha-2 form.
     * @example US
     */
    GenericCountryCodeNullable: string | null;
    /** @description Analyzed location information for the associated hit */
    GenericScreeningHitLocationItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["WatchlistScreeningHitLocations"];
      [key: string]: unknown;
    };
    /**
     * GivenName
     * @description A string with at least one non-whitespace character, with a max length of 100 characters.
     * @example Leslie
     */
    GivenNameField: string;
    /**
     * IDNumberType
     * @description A globally unique and human readable ID type, specific to the country and document category. For more context on this field, see [Hybrid Input Validation](https://plaid.com/docs/identity-verification/hybrid-input-validation).
     * @example us_ssn
     * @enum {string}
     */
    IDNumberType: "ar_dni" | "au_drivers_license" | "au_passport" | "br_cpf" | "ca_sin" | "cl_run" | "cn_resident_card" | "co_nit" | "dk_cpr" | "eg_national_id" | "es_dni" | "es_nie" | "hk_hkid" | "in_pan" | "it_cf" | "jo_civil_id" | "jp_my_number" | "ke_huduma_namba" | "kw_civil_id" | "mx_curp" | "mx_rfc" | "my_nric" | "ng_nin" | "nz_drivers_license" | "om_civil_id" | "ph_psn" | "pl_pesel" | "ro_cnp" | "sa_national_id" | "se_pin" | "sg_nric" | "tr_tc_kimlik" | "us_ssn" | "us_ssn_last_4" | "za_smart_id";
    /**
     * IDNumberValue
     * @description Value of identity document value typed in by user. Alpha-numeric, with all formatting characters stripped.
     * @example 123456789
     */
    IDNumberValue: string;
    /**
     * IPAddress
     * @description An IPv4 or IPV6 address.
     * @example 192.0.2.42
     */
    IPAddress: string | null;
    /**
     * ISO8601Date
     * Format: date
     * @description A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @example 1990-05-29
     */
    ISO8601Date: string;
    /**
     * ISO8601Date
     * Format: date
     * @description A date in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @example 1990-05-29
     */
    ISO8601DateNullable: string | null;
    /**
     * ISOCurrencyCode
     * @description An ISO-4217 currency code.
     * @enum {string}
     */
    ISOCurrencyCode: "USD";
    /**
     * IdempotencyFlag
     * @description An optional flag specifying how you would like Plaid to handle attempts to create an Identity Verification when an Identity Verification already exists for the provided `client_user_id` and `template_id`.
     * If idempotency is enabled, Plaid will return the existing Identity Verification. If idempotency is disabled, Plaid will reject the request with a `400 Bad Request` status code if an Identity Verification already exists for the supplied `client_user_id` and `template_id`.
     * @example true
     */
    IdempotencyFlag: boolean | null;
    /** @description A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
    IdentityVerification: {
      id: components["schemas"]["IdentityVerificationID"];
      client_user_id: components["schemas"]["ClientUserID"];
      created_at: components["schemas"]["Timestamp"];
      completed_at: components["schemas"]["TimestampNullable"];
      previous_attempt_id: components["schemas"]["PreviousIdentityVerificationAttemptID"];
      shareable_url: components["schemas"]["ShareableURL"];
      template: components["schemas"]["IdentityVerificationTemplateReference"];
      user: components["schemas"]["IdentityVerificationUserData"];
      status: components["schemas"]["IdentityVerificationStatus"];
      steps: components["schemas"]["IdentityVerificationStepSummary"];
      documentary_verification: components["schemas"]["DocumentaryVerification"];
      selfie_check: components["schemas"]["SelfieCheck"];
      kyc_check: components["schemas"]["KYCCheckDetails"];
      risk_check: components["schemas"]["RiskCheckDetails"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualIDNullable"];
      redacted_at: components["schemas"]["TimestampNullable"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationConsent
     * @description A flag specifying whether the end user has already agreed to a privacy policy specifying that their data will be shared with Plaid for verification purposes.
     *
     * If `gave_consent` is set to `true`, the `accept_tos` step will be marked as `skipped` and the end user's session will start at the next step requirement.
     * @default false
     * @example true
     */
    IdentityVerificationConsent: boolean;
    /** @description Request schema for '/identity_verification/create' */
    IdentityVerificationCreateRequest: {
      client_user_id?: components["schemas"]["ClientUserID"];
      /**
       * EnableSharableLink
       * @description A flag specifying whether you would like Plaid to expose a shareable URL for the verification being created.
       * @example true
       */
      is_shareable: boolean;
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      gave_consent: components["schemas"]["IdentityVerificationConsent"];
      user?: components["schemas"]["IdentityVerificationCreateRequestUser"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      is_idempotent?: components["schemas"]["IdempotencyFlag"];
    };
    /**
     * @description User information collected outside of Link, most likely via your own onboarding process.
     *
     * Each of the following identity fields are optional:
     *
     * `email_address`
     *
     * `phone_number`
     *
     * `date_of_birth`
     *
     * `name`
     *
     * `address`
     *
     * `id_number`
     *
     * Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value.
     * Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
     * If you are not using the shareable URL feature, you can optionally provide these fields via `/link/token/create` instead; both `/identity_verification/create` and `/link/token/create` are valid ways to provide this information. Note that if you provide a non-`null` user data object via `/identity_verification/create`, any user data fields entered via `/link/token/create` for the same `client_user_id` will be ignored when prefilling Link.
     */
    IdentityVerificationCreateRequestUser: {
      email_address?: components["schemas"]["EmailAddress"];
      phone_number?: components["schemas"]["IdentityVerificationUserPhoneNumber"];
      date_of_birth?: components["schemas"]["ISO8601Date"];
      name?: components["schemas"]["IdentityVerificationRequestUserName"];
      address?: components["schemas"]["UserAddress"];
      id_number?: components["schemas"]["UserIDNumber"];
      client_user_id?: components["schemas"]["DeprecatedClientUserID"];
    } | null;
    /** @description A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
    IdentityVerificationCreateResponse: {
      id: components["schemas"]["IdentityVerificationID"];
      client_user_id: components["schemas"]["ClientUserID"];
      created_at: components["schemas"]["Timestamp"];
      completed_at: components["schemas"]["TimestampNullable"];
      previous_attempt_id: components["schemas"]["PreviousIdentityVerificationAttemptID"];
      shareable_url: components["schemas"]["ShareableURL"];
      template: components["schemas"]["IdentityVerificationTemplateReference"];
      user: components["schemas"]["IdentityVerificationUserData"];
      status: components["schemas"]["IdentityVerificationStatus"];
      steps: components["schemas"]["IdentityVerificationStepSummary"];
      documentary_verification: components["schemas"]["DocumentaryVerification"];
      selfie_check: components["schemas"]["SelfieCheck"];
      kyc_check: components["schemas"]["KYCCheckDetails"];
      risk_check: components["schemas"]["RiskCheckDetails"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualIDNullable"];
      redacted_at: components["schemas"]["TimestampNullable"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * @description The address extracted from the document. The address must at least contain the following fields to be a valid address: `street`, `city`, `country`. If any are missing or unable to be extracted, the address will be null.
     *
     * `region`, and `postal_code` may be null based on the addressing system. For example:
     *
     * Addresses from the United Kingdom will not include a region
     *
     * Addresses from Hong Kong will not include postal code
     *
     * Note: Optical Character Recognition (OCR) technology may sometimes extract incorrect data from a document.
     */
    IdentityVerificationDocumentAddressResponse: {
      street: components["schemas"]["IdentityVerificationDocumentStreet"];
      city: components["schemas"]["IdentityVerificationDocumentCity"];
      region: components["schemas"]["IdentityVerificationDocumentRegion"];
      postal_code: components["schemas"]["IdentityVerificationDocumentPostalCode"];
      country: components["schemas"]["IdentityVerificationDocumentCountryCode"];
      [key: string]: unknown;
    } | null;
    /**
     * IdentityVerificationDocumentCity
     * @description City extracted from the document.
     * @example Pawnee
     */
    IdentityVerificationDocumentCity: string;
    /**
     * IdentityVerificationDocumentCountryCode
     * @description Valid, capitalized, two-letter ISO code representing the country extracted from the document. Must be in ISO 3166-1 alpha-2 form.
     * @example US
     */
    IdentityVerificationDocumentCountryCode: string;
    /**
     * IdentityVerificationDocumentISO8601DateOfBirth
     * Format: date
     * @description A date extracted from the document in the format YYYY-MM-DD (RFC 3339 Section 5.6).
     * @example 1990-05-29
     */
    IdentityVerificationDocumentISO8601DateOfBirth: string | null;
    /**
     * IdentityVerificationDocumentPostalCode
     * @description The postal code extracted from the document. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
     * @example 46001
     */
    IdentityVerificationDocumentPostalCode: string | null;
    /**
     * IdentityVerificationDocumentRegion
     * @description An ISO 3166-2 subdivision code extracted from the document. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
     * @example IN
     */
    IdentityVerificationDocumentRegion: string | null;
    /**
     * IdentityVerificationDocumentStreet
     * @description The full street address extracted from the document.
     * @example 123 Main St. Unit 42
     */
    IdentityVerificationDocumentStreet: string;
    /** @description Request input for fetching an identity verification */
    IdentityVerificationGetRequest: {
      identity_verification_id: components["schemas"]["IdentityVerificationID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
    IdentityVerificationGetResponse: {
      id: components["schemas"]["IdentityVerificationID"];
      client_user_id: components["schemas"]["ClientUserID"];
      created_at: components["schemas"]["Timestamp"];
      completed_at: components["schemas"]["TimestampNullable"];
      previous_attempt_id: components["schemas"]["PreviousIdentityVerificationAttemptID"];
      shareable_url: components["schemas"]["ShareableURL"];
      template: components["schemas"]["IdentityVerificationTemplateReference"];
      user: components["schemas"]["IdentityVerificationUserData"];
      status: components["schemas"]["IdentityVerificationStatus"];
      steps: components["schemas"]["IdentityVerificationStepSummary"];
      documentary_verification: components["schemas"]["DocumentaryVerification"];
      selfie_check: components["schemas"]["SelfieCheck"];
      kyc_check: components["schemas"]["KYCCheckDetails"];
      risk_check: components["schemas"]["RiskCheckDetails"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualIDNullable"];
      redacted_at: components["schemas"]["TimestampNullable"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationID
     * @description ID of the associated Identity Verification attempt.
     * @example idv_52xR9LKo77r1Np
     */
    IdentityVerificationID: string;
    /** @description Request input for listing identity verifications */
    IdentityVerificationListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      client_user_id: components["schemas"]["ClientUserID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of Plaid sessions. */
    IdentityVerificationListResponse: {
      /** @description List of Plaid sessions */
      identity_verifications: components["schemas"]["IdentityVerification"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * @description User information collected outside of Link, most likely via your own onboarding process.
     *
     * Each of the following identity fields are optional:
     *
     * `email_address`
     *
     * `phone_number`
     *
     * `date_of_birth`
     *
     * `name`
     *
     * `address`
     *
     * `id_number`
     *
     * Specifically, these fields are optional in that they can either be fully provided (satisfying every required field in their subschema) or omitted from the request entirely by not providing the key or value.
     * Providing these fields via the API will result in Link skipping the data collection process for the associated user. All verification steps enabled in the associated Identity Verification Template will still be run. Verification steps will either be run immediately, or once the user completes the `accept_tos` step, depending on the value provided to the `gave_consent` field.
     */
    IdentityVerificationRequestUser: {
      email_address?: components["schemas"]["EmailAddress"];
      phone_number?: components["schemas"]["IdentityVerificationUserPhoneNumber"];
      date_of_birth?: components["schemas"]["ISO8601Date"];
      name?: components["schemas"]["IdentityVerificationRequestUserName"];
      address?: components["schemas"]["UserAddress"];
      id_number?: components["schemas"]["UserIDNumber"];
      [key: string]: unknown;
    } | null;
    /** @description You can use this field to pre-populate the user's legal name; if it is provided here, they will not be prompted to enter their name in the identity verification attempt. */
    IdentityVerificationRequestUserName: {
      given_name: components["schemas"]["GivenNameField"];
      family_name: components["schemas"]["FamilyNameField"];
    } | null;
    /** @description The full name provided by the user. If the user has not submitted their name, this field will be null. Otherwise, both fields are guaranteed to be filled. */
    IdentityVerificationResponseUserName: {
      given_name: components["schemas"]["GivenNameField"];
      family_name: components["schemas"]["FamilyNameField"];
      [key: string]: unknown;
    } | null;
    /** @description Request input for retrying an identity verification attempt */
    IdentityVerificationRetryRequest: {
      client_user_id: components["schemas"]["ClientUserID"];
      template_id: components["schemas"]["IdentityVerificationTemplateID"];
      strategy: components["schemas"]["Strategy"];
      user?: components["schemas"]["IdentityVerificationRequestUser"];
      steps?: components["schemas"]["IdentityVerificationRetryRequestStepsObject"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * @description Instructions for the `custom` retry strategy specifying which steps should be required or skipped.
     *
     *
     * Note:
     *
     *
     * This field must be provided when the retry strategy is `custom` and must be omitted otherwise.
     *
     * Custom retries override settings in your Plaid Template. For example, if your Plaid Template has `verify_sms` disabled, a custom retry with `verify_sms` enabled will still require the step.
     *
     * The `selfie_check` step is currently not supported on the sandbox server. Sandbox requests will silently disable the `selfie_check` step when provided.
     */
    IdentityVerificationRetryRequestStepsObject: {
      /** @description A boolean field specifying whether the new session should require or skip the `verify_sms` step. */
      verify_sms: boolean;
      /** @description A boolean field specifying whether the new session should require or skip the `kyc_check` step. */
      kyc_check: boolean;
      /** @description A boolean field specifying whether the new session should require or skip the `documentary_verification` step. */
      documentary_verification: boolean;
      /** @description A boolean field specifying whether the new session should require or skip the `selfie_check` step. */
      selfie_check: boolean;
    } | null;
    /** @description A identity verification attempt represents a customer's attempt to verify their identity, reflecting the required steps for completing the session, the results for each step, and information collected in the process. */
    IdentityVerificationRetryResponse: {
      id: components["schemas"]["IdentityVerificationID"];
      client_user_id: components["schemas"]["ClientUserID"];
      created_at: components["schemas"]["Timestamp"];
      completed_at: components["schemas"]["TimestampNullable"];
      previous_attempt_id: components["schemas"]["PreviousIdentityVerificationAttemptID"];
      shareable_url: components["schemas"]["ShareableURL"];
      template: components["schemas"]["IdentityVerificationTemplateReference"];
      user: components["schemas"]["IdentityVerificationUserData"];
      status: components["schemas"]["IdentityVerificationStatus"];
      steps: components["schemas"]["IdentityVerificationStepSummary"];
      documentary_verification: components["schemas"]["DocumentaryVerification"];
      selfie_check: components["schemas"]["SelfieCheck"];
      kyc_check: components["schemas"]["KYCCheckDetails"];
      risk_check: components["schemas"]["RiskCheckDetails"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualIDNullable"];
      redacted_at: components["schemas"]["TimestampNullable"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationStatus
     * @description The status of this Identity Verification attempt.
     *
     *
     * `active` - The Identity Verification attempt is incomplete. The user may have completed part of the session, but has neither failed or passed.
     *
     * `success` - The Identity Verification attempt has completed, passing all steps defined to the associated Identity Verification template
     *
     * `failed` - The user failed one or more steps in the session and was told to contact support.
     *
     * `expired` - The Identity Verification attempt was active for a long period of time without being completed and was automatically marked as expired. Note that sessions currently do not expire. Automatic expiration is expected to be enabled in the future.
     *
     * `canceled` - The Identity Verification attempt was canceled, either via the dashboard by a user, or via API. The user may have completed part of the session, but has neither failed or passed.
     *
     * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
     * @example success
     * @enum {string}
     */
    IdentityVerificationStatus: "active" | "success" | "failed" | "expired" | "canceled" | "pending_review";
    /**
     * IdentityVerificationStepStatus
     * @description The status of a step in the identity verification process.
     * @example success
     * @enum {string}
     */
    IdentityVerificationStepStatus: "success" | "active" | "failed" | "waiting_for_prerequisite" | "not_applicable" | "skipped" | "expired" | "canceled" | "pending_review" | "manually_approved" | "manually_rejected";
    /**
     * @description Each step will be one of the following values:
     *
     *
     * `active` - This step is the user's current step. They are either in the process of completing this step, or they recently closed their Identity Verification attempt while in the middle of this step. Only one step will be marked as `active` at any given point.
     *
     * `success` - The Identity Verification attempt has completed this step.
     *
     * `failed` - The user failed this step. This can either call the user to fail the session as a whole, or cause them to fallback to another step depending on how the Identity Verification template is configured. A failed step does not imply a failed session.
     *
     * `waiting_for_prerequisite` - The user needs to complete another step first, before they progress to this step. This step may never run, depending on if the user fails an earlier step or if the step is only run as a fallback.
     *
     * `not_applicable` - This step will not be run for this session.
     *
     * `skipped` - The retry instructions that created this Identity Verification attempt specified that this step should be skipped.
     *
     * `expired` - This step had not yet been completed when the Identity Verification attempt as a whole expired.
     *
     * `canceled` - The Identity Verification attempt was canceled before the user completed this step.
     *
     * `pending_review` - The Identity Verification attempt template was configured to perform a screening that had one or more hits needing review.
     *
     * `manually_approved` - The step was manually overridden to pass by a team member in the dashboard.
     *
     * `manually_rejected` - The step was manually overridden to fail by a team member in the dashboard.
     */
    IdentityVerificationStepSummary: {
      accept_tos: components["schemas"]["IdentityVerificationStepStatus"];
      verify_sms: components["schemas"]["IdentityVerificationStepStatus"];
      kyc_check: components["schemas"]["IdentityVerificationStepStatus"];
      documentary_verification: components["schemas"]["IdentityVerificationStepStatus"];
      selfie_check: components["schemas"]["IdentityVerificationStepStatus"];
      watchlist_screening: components["schemas"]["IdentityVerificationStepStatus"];
      risk_check: components["schemas"]["IdentityVerificationStepStatus"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationTemplateID
     * @description ID of the associated Identity Verification template.
     * @example idvtmp_4FrXJvfQU3zGUR
     */
    IdentityVerificationTemplateID: string;
    /** @description The resource ID and version number of the template configuring the behavior of a given identity verification. */
    IdentityVerificationTemplateReference: {
      id: components["schemas"]["IdentityVerificationTemplateID"];
      version: components["schemas"]["IdentityVerificationTemplateVersion"];
      [key: string]: unknown;
    };
    /**
     * IdentityVerificationTemplateVersion
     * @description Version of the associated Identity Verification template.
     * @example 2
     */
    IdentityVerificationTemplateVersion: number;
    /**
     * @description Even if an address has been collected, some fields may be null depending on the region's addressing system. For example:
     *
     * Addresses from the United Kingdom will not include a region
     *
     * Addresses from Hong Kong will not include postal code
     */
    IdentityVerificationUserAddress: {
      street: components["schemas"]["StreetNullable"];
      street2: components["schemas"]["Street2"];
      city: components["schemas"]["CityNullable"];
      region: components["schemas"]["Region"];
      postal_code: components["schemas"]["PostalCode"];
      country: components["schemas"]["GenericCountryCode"];
      [key: string]: unknown;
    } | null;
    /** @description The identity data that was either collected from the user or provided via API in order to perform an identity verification. */
    IdentityVerificationUserData: {
      phone_number?: components["schemas"]["IdentityVerificationUserPhoneNumber"];
      date_of_birth: components["schemas"]["ISO8601DateNullable"];
      ip_address: components["schemas"]["IPAddress"];
      email_address: components["schemas"]["EmailAddressNullable"];
      name: components["schemas"]["IdentityVerificationResponseUserName"];
      address: components["schemas"]["IdentityVerificationUserAddress"];
      id_number: components["schemas"]["UserIDNumber"];
      [key: string]: unknown;
    };
    /**
     * PhoneNumber
     * @description A phone number in E.164 format.
     * @example +19876543212
     */
    IdentityVerificationUserPhoneNumber: string | null;
    /**
     * @description A high level description of the quality of the image the user submitted.
     *
     * For example, an image that is blurry, distorted by glare from a nearby light source, or improperly framed might be marked as low or medium quality. Poor quality images are more likely to fail OCR and/or template conformity checks.
     *
     * Note: By default, Plaid will let a user recapture document images twice before failing the entire session if we attribute the failure to low image quality.
     * @example high
     * @enum {string}
     */
    ImageQuality: "high" | "medium" | "low";
    /** @description Name information for the associated individual watchlist hit */
    IndividualScreeningHitNames: {
      /**
       * @description The full name of the individual, including all parts.
       * @example Aleksey Potemkin
       */
      full: string;
      /**
       * @description Primary names are those most commonly used to refer to this person. Only one name will ever be marked as primary.
       * @example false
       */
      is_primary: boolean;
      weak_alias_determination: components["schemas"]["WeakAliasDetermination"];
      [key: string]: unknown;
    };
    /**
     * IndividualWatchlistCode
     * @description Shorthand identifier for a specific screening list for individuals.
     *  `AU_CON`: Australia Department of Foreign Affairs and Trade Consolidated List
     *  `CA_CON`: Government of Canada Consolidated List of Sanctions
     *  `EU_CON`: European External Action Service Consolidated List
     *  `IZ_CIA`: CIA List of Chiefs of State and Cabinet Members
     *  `IZ_IPL`: Interpol Red Notices for Wanted Persons List
     *  `IZ_PEP`: Politically Exposed Persons List
     *  `IZ_UNC`: United Nations Consolidated Sanctions
     *  `IZ_WBK`: World Bank Listing of Ineligible Firms and Individuals
     *  `UK_HMC`: UK HM Treasury Consolidated List
     *  `US_DPL`: Bureau of Industry and Security Denied Persons List
     *  `US_DTC`: US Department of State AECA Debarred
     *  `US_FBI`: US Department of Justice FBI Wanted List
     *  `US_FSE`: US OFAC Foreign Sanctions Evaders
     *  `US_ISN`: US Department of State Nonproliferation Sanctions
     *  `US_PLC`: US OFAC Palestinian Legislative Council
     *  `US_SDN`: US OFAC Specially Designated Nationals List
     *  `US_SSI`: US OFAC Sectoral Sanctions Identifications
     *  `SG_SOF`: Government of Singapore Terrorists and Terrorist Entities
     *  `TR_TWL`: Government of Turkey Terrorist Wanted List
     *  `TR_DFD`: Government of Turkey Domestic Freezing Decisions
     *  `TR_FOR`: Government of Turkey Foreign Freezing Requests
     *  `TR_WMD`: Government of Turkey Weapons of Mass Destruction
     *  `TR_CMB`: Government of Turkey Capital Markets Board
     * @example US_SDN
     * @enum {string}
     */
    IndividualWatchlistCode: "AU_CON" | "CA_CON" | "EU_CON" | "IZ_CIA" | "IZ_IPL" | "IZ_PEP" | "IZ_UNC" | "IZ_WBK" | "UK_HMC" | "US_DPL" | "US_DTC" | "US_FBI" | "US_FSE" | "US_ISN" | "US_MBS" | "US_PLC" | "US_SDN" | "US_SSI" | "SG_SOF" | "TR_TWL" | "TR_DFD" | "TR_FOR" | "TR_WMD" | "TR_CMB";
    /**
     * IndividualWatchlistProgram
     * @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals.
     */
    IndividualWatchlistProgram: {
      id: components["schemas"]["WatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "US_SDN"
       * ]
       */
      lists_enabled: components["schemas"]["IndividualWatchlistCode"][];
      name: components["schemas"]["IndividualWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
      [key: string]: unknown;
    };
    /**
     * IndividualWatchlistScreeningProgramName
     * @description A name for the program to define its purpose. For example, "High Risk Individuals", "US Cardholders", or "Applicants".
     * @example Sample Program
     */
    IndividualWatchlistScreeningProgramName: string;
    /**
     * InternalUID
     * @description A universal identifier for a watchlist individual that is stable across searches and updates.
     * @example uid_3NggckTimGSJHS
     */
    InternalUID: string;
    /**
     * @description A binary match indicator specifying whether the country that issued the provided document matches the country that the user separately provided to Plaid.
     *
     * Note: You can configure whether a `no_match` on `issuing_country` fails the `documentary_verification` by editing your Plaid Template.
     * @enum {string}
     */
    IssuingCountry: "match" | "no_match";
    /** @description Result summary object specifying how the `address` field matched. */
    KYCCheckAddressSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
      po_box: components["schemas"]["POBoxStatus"];
      type: components["schemas"]["AddressPurposeLabel"];
      [key: string]: unknown;
    };
    /** @description Result summary object specifying how the `date_of_birth` field matched. */
    KYCCheckDateOfBirthSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
      [key: string]: unknown;
    };
    /** @description Additional information for the `kyc_check` step. This field will be `null` unless `steps.kyc_check` has reached a terminal state of either `success` or `failed`. */
    KYCCheckDetails: {
      /**
       * @description The outcome status for the associated Identity Verification attempt's `kyc_check` step. This field will always have the same value as `steps.kyc_check`.
       * @example success
       */
      status: string;
      address: components["schemas"]["KYCCheckAddressSummary"];
      name: components["schemas"]["KYCCheckNameSummary"];
      date_of_birth: components["schemas"]["KYCCheckDateOfBirthSummary"];
      id_number: components["schemas"]["KYCCheckIDNumberSummary"];
      phone_number: components["schemas"]["KYCCheckPhoneSummary"];
      [key: string]: unknown;
    } | null;
    /** @description Result summary object specifying how the `id_number` field matched. */
    KYCCheckIDNumberSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
      [key: string]: unknown;
    };
    /** @description Result summary object specifying how the `name` field matched. */
    KYCCheckNameSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
      [key: string]: unknown;
    };
    /** @description Result summary object specifying how the `phone` field matched. */
    KYCCheckPhoneSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
      area_code: components["schemas"]["MatchSummaryCode"];
      [key: string]: unknown;
    };
    /** @description Summary object reflecting the match result of the associated data */
    MatchSummary: {
      summary: components["schemas"]["MatchSummaryCode"];
      [key: string]: unknown;
    };
    /**
     * MatchSummaryCode
     * @description An enum indicating the match type between data provided by user and data checked against an external data source.
     *
     *
     * `match` indicates that the provided input data was a strong match against external data.
     *
     * `partial_match` indicates the data approximately matched against external data. For example, "Knope" vs. "Knope-Wyatt" for last name.
     *
     * `no_match` indicates that Plaid was able to perform a check against an external data source and it did not match the provided input data.
     *
     * `no_data` indicates that Plaid was unable to find external data to compare against the provided input data.
     *
     * `no_input` indicates that Plaid was unable to perform a check because no information was provided for this field by the end user.
     * @example match
     * @enum {string}
     */
    MatchSummaryCode: "match" | "partial_match" | "no_match" | "no_data" | "no_input";
    /**
     * @description Field describing whether the associated address is a post office box. Will be `yes` when a P.O. box is detected, `no` when Plaid confirmed the address is not a P.O. box, and `no_data` when Plaid was not able to determine if the address is a P.O. box.
     * @example yes
     * @enum {string}
     */
    POBoxStatus: "yes" | "no" | "no_data";
    /**
     * @description An enum indicating whether a phone number is a phone line or a fax line.
     * @enum {string}
     */
    PhoneType: "phone" | "fax";
    /**
     * @description The type of identity document detected in the images provided. Will always be one of the following values:
     *
     *   `drivers_license` - A driver's license issued by the associated country, establishing identity without any guarantee as to citizenship, and granting driving privileges
     *
     *   `id_card` - A general national identification card, distinct from driver's licenses as it only establishes identity
     *
     *   `passport` - A travel passport issued by the associated country for one of its citizens
     *
     *   `residence_permit_card` - An identity document issued by the associated country permitting a foreign citizen to <em>temporarily</em> reside there
     *
     *   `resident_card` - An identity document issued by the associated country permitting a foreign citizen to <em>permanently</em> reside there
     *
     *   `visa` - An identity document issued by the associated country permitting a foreign citizen entry for a short duration and for a specific purpose, typically no longer than 6 months
     *
     * Note: This value may be different from the ID type that the user selects within Link. For example, if they select "Driver's License" but then submit a picture of a passport, this field will say `passport`
     * @example drivers_license
     * @enum {string}
     */
    PhysicalDocumentCategory: "drivers_license" | "id_card" | "passport" | "residence_permit_card" | "resident_card" | "visa";
    /** @description Data extracted from a user-submitted document. */
    PhysicalDocumentExtractedData: {
      id_number: components["schemas"]["PhysicalDocumentIDNumber"];
      category: components["schemas"]["PhysicalDocumentCategory"];
      expiration_date: components["schemas"]["ISO8601DateNullable"];
      issuing_country: components["schemas"]["GenericCountryCode"];
      issuing_region: components["schemas"]["Region"];
      date_of_birth: components["schemas"]["IdentityVerificationDocumentISO8601DateOfBirth"];
      address: components["schemas"]["IdentityVerificationDocumentAddressResponse"];
      [key: string]: unknown;
    } | null;
    /** @description Analysis of the data extracted from the submitted document. */
    PhysicalDocumentExtractedDataAnalysis: {
      name: components["schemas"]["DocumentNameMatchCode"];
      date_of_birth: components["schemas"]["DocumentDateOfBirthMatchCode"];
      expiration_date: components["schemas"]["ExpirationDate"];
      issuing_country: components["schemas"]["IssuingCountry"];
      [key: string]: unknown;
    } | null;
    /**
     * @description Alpha-numeric ID number extracted via OCR from the user's document image.
     * @example AB123456
     */
    PhysicalDocumentIDNumber: string | null;
    /** @description URLs for downloading original and cropped images for this document submission. The URLs are designed to only allow downloading, not hot linking, so the URL will only serve the document image for 60 seconds before expiring. The expiration time is 60 seconds after the `GET` request for the associated Identity Verification attempt. A new expiring URL is generated with each request, so you can always rerequest the Identity Verification attempt if one of your URLs expires. */
    PhysicalDocumentImages: {
      original_front: components["schemas"]["DocumentImage__Front"];
      original_back: components["schemas"]["DocumentImage__Back"];
      cropped_front: components["schemas"]["DocumentImage__CroppedFront"];
      cropped_back: components["schemas"]["DocumentImage__CroppedBack"];
      face: components["schemas"]["DocumentImage__Face"];
      [key: string]: unknown;
    };
    /**
     * PostalCode
     * @description The postal code for the associated address. Between 2 and 10 alphanumeric characters. For US-based addresses this must be 5 numeric digits.
     * @example 46001
     */
    PostalCode: string | null;
    /**
     * @description The ID for the Identity Verification preceding this session. This field will only be filled if the current Identity Verification is a retry of a previous attempt.
     * @example idv_42cF1MNo42r9Xj
     */
    PreviousIdentityVerificationAttemptID: string | null;
    /**
     * Archived
     * @description Archived programs are read-only and cannot screen new customers nor participate in ongoing monitoring.
     * @example false
     */
    ProgramArchived: boolean;
    /**
     * ProgramNameSensitivity
     * @description The valid name matching sensitivity configurations for a screening program. Note that while certain matching techniques may be more prevalent on less strict settings, all matching algorithms are enabled for every sensitivity.
     *
     * `coarse` - See more potential matches. This sensitivity will see more broad phonetic matches across alphabets that make missing a potential hit very unlikely. This setting is noisier and will require more manual review.
     *
     * `balanced` - A good default for most companies. This sensitivity is balanced to show high quality hits with reduced noise.
     *
     * `strict` - Aggressive false positive reduction. This sensitivity will require names to be more similar than `coarse` and `balanced` settings, relying less on phonetics, while still accounting for character transpositions, missing tokens, and other common permutations.
     *
     * `exact` - Matches must be nearly exact. This sensitivity will only show hits with exact or nearly exact name matches with only basic correction such as extraneous symbols and capitalization. This setting is generally not recommended unless you have a very specific use case.
     * @example balanced
     * @enum {string}
     */
    ProgramNameSensitivity: "coarse" | "balanced" | "strict" | "exact";
    /**
     * @description An enum indicating whether a network proxy is present and if so what type it is.
     *
     * `none_detected` indicates the user is not on a detectable proxy network.
     *
     * `tor` indicates the user was using a Tor browser, which sends encrypted traffic on a decentralized network and is somewhat similar to a VPN (Virtual Private Network).
     *
     * `vpn` indicates the user is on a VPN (Virtual Private Network)
     *
     * `web_proxy` indicates the user is on a web proxy server, which may allow them to conceal information such as their IP address or other identifying information.
     *
     * `public_proxy` indicates the user is on a public web proxy server, which is similar to a web proxy but can be shared by multiple users. This may allow multiple users to appear as if they have the same IP address for instance.
     * @enum {string|null}
     */
    ProxyType: "none_detected" | "tor" | "vpn" | "web_proxy" | "public_proxy" | null;
    /**
     * Region
     * @description An ISO 3166-2 subdivision code. Related terms would be "state", "province", "prefecture", "zone", "subdivision", etc.
     * @example IN
     */
    Region: string | null;
    /**
     * ReviewComment
     * @description A comment submitted by a team member as part of reviewing a watchlist screening.
     * @example These look like legitimate matches, rejecting the customer.
     */
    ReviewComment: string | null;
    /** @description Result summary object specifying values for `behavior` attributes of risk check, when available. */
    RiskCheckBehavior: {
      user_interactions: components["schemas"]["RiskCheckBehaviorUserInteractionsLabel"];
      fraud_ring_detected: components["schemas"]["RiskCheckBehaviorFraudRingDetectedLabel"];
      bot_detected: components["schemas"]["RiskCheckBehaviorBotDetectedLabel"];
      [key: string]: unknown;
    } | null;
    /**
     * @description Field describing the outcome of a bot detection behavior risk check.
     *
     * `yes` indicates that automated activity was detected.
     *
     * `no` indicates that automated activity was not detected.
     *
     * `no_data` indicates there was not enough information available to give an accurate signal.
     * @enum {string}
     */
    RiskCheckBehaviorBotDetectedLabel: "yes" | "no" | "no_data";
    /**
     * @description Field describing the outcome of a fraud ring behavior risk check.
     *
     * `yes` indicates that fraud ring activity was detected.
     *
     * `no` indicates that fraud ring activity was not detected.
     *
     * `no_data` indicates there was not enough information available to give an accurate signal.
     * @enum {string}
     */
    RiskCheckBehaviorFraudRingDetectedLabel: "yes" | "no" | "no_data";
    /**
     * @description Field describing the overall user interaction signals of a behavior risk check. This value represents how familiar the user is with the personal data they provide, based on a number of signals that are collected during their session.
     *
     * `genuine` indicates the user has high familiarity with the data they are providing, and that fraud is unlikely.
     *
     * `neutral` indicates some signals are present in between `risky` and `genuine`, but there are not enough clear signals to determine an outcome.
     *
     * `risky` indicates the user has low familiarity with the data they are providing, and that fraud is likely.
     *
     * `no_data` indicates there is not sufficient information to give an accurate signal.
     * @example risky
     * @enum {string}
     */
    RiskCheckBehaviorUserInteractionsLabel: "genuine" | "neutral" | "risky" | "no_data";
    /** @description Additional information for the `risk_check` step. */
    RiskCheckDetails: {
      status: components["schemas"]["IdentityVerificationStepStatus"];
      behavior: components["schemas"]["RiskCheckBehavior"];
      email: components["schemas"]["RiskCheckEmail"];
      phone: components["schemas"]["RiskCheckPhone"];
      /** @description Array of result summary objects specifying values for `device` attributes of risk check. */
      devices: components["schemas"]["RiskCheckDevice"][];
      identity_abuse_signals: components["schemas"]["RiskCheckIdentityAbuseSignals"];
      [key: string]: unknown;
    } | null;
    /** @description Result summary object specifying values for `device` attributes of risk check. */
    RiskCheckDevice: {
      ip_proxy_type: components["schemas"]["ProxyType"];
      /**
       * @description Count of spam lists the IP address is associated with if known.
       * @example 1
       */
      ip_spam_list_count: number | null;
      ip_timezone_offset: components["schemas"]["UTCOffset"];
      [key: string]: unknown;
    };
    /** @description Result summary object specifying values for `email` attributes of risk check. */
    RiskCheckEmail: ({
      is_deliverable: components["schemas"]["RiskCheckEmailIsDeliverableStatus"];
      /**
       * @description Count of all known breaches of this email address if known.
       * @example 1
       */
      breach_count: number | null;
      first_breached_at: components["schemas"]["ISO8601DateNullable"];
      last_breached_at: components["schemas"]["ISO8601DateNullable"];
      domain_registered_at: components["schemas"]["ISO8601DateNullable"];
      domain_is_free_provider: components["schemas"]["RiskCheckEmailDomainIsFreeProvider"];
      domain_is_custom: components["schemas"]["RiskCheckEmailDomainIsCustom"];
      domain_is_disposable: components["schemas"]["RiskCheckEmailDomainIsDisposable"];
      top_level_domain_is_suspicious: components["schemas"]["RiskCheckEmailTopLevelDomainIsSuspicious"];
      /**
       * @description A list of online services where this email address has been detected to have accounts or other activity.
       * @example [
       *   "facebook"
       * ]
       */
      linked_services: components["schemas"]["RiskCheckLinkedService"][];
      [key: string]: unknown;
    }) | null;
    /**
     * @description Indicates whether the email address domain is custom if known, i.e. a company domain and not free or disposable.
     * @example yes
     * @enum {string}
     */
    RiskCheckEmailDomainIsCustom: "yes" | "no" | "no_data";
    /**
     * @description Indicates whether the email domain is listed as disposable if known. Disposable domains are often used to create email addresses that are part of a fake set of user details.
     * @example yes
     * @enum {string}
     */
    RiskCheckEmailDomainIsDisposable: "yes" | "no" | "no_data";
    /**
     * @description Indicates whether the email address domain is a free provider such as Gmail or Hotmail if known.
     * @example yes
     * @enum {string}
     */
    RiskCheckEmailDomainIsFreeProvider: "yes" | "no" | "no_data";
    /**
     * @description SMTP-MX check to confirm the email address exists if known.
     * @example yes
     * @enum {string}
     */
    RiskCheckEmailIsDeliverableStatus: "yes" | "no" | "no_data";
    /**
     * @description Indicates whether the email address top level domain, which is the last part of the domain, is fraudulent or risky if known. In most cases, a suspicious top level domain is also associated with a disposable or high-risk domain.
     * @example yes
     * @enum {string}
     */
    RiskCheckEmailTopLevelDomainIsSuspicious: "yes" | "no" | "no_data";
    /** @description Result summary object capturing abuse signals related to `identity abuse`, e.g. stolen and synthetic identity fraud. */
    RiskCheckIdentityAbuseSignals: {
      synthetic_identity: components["schemas"]["RiskCheckSyntheticIdentity"];
      stolen_identity: components["schemas"]["RiskCheckStolenIdentity"];
      [key: string]: unknown;
    } | null;
    /**
     * @description An enum indicating the type of a linked service.
     * @enum {string}
     */
    RiskCheckLinkedService: "apple" | "ebay" | "facebook" | "flickr" | "foursquare" | "github" | "google" | "gravatar" | "instagram" | "lastfm" | "linkedin" | "microsoft" | "myspace" | "pinterest" | "skype" | "spotify" | "telegram" | "tumblr" | "twitter" | "viber" | "vimeo" | "weibo" | "whatsapp" | "yahoo" | "airbnb" | "amazon" | "booking" | "discord" | "kakao" | "ok" | "qzone" | "line" | "snapchat" | "zalo";
    /** @description Result summary object specifying values for `phone` attributes of risk check. */
    RiskCheckPhone: {
      /**
       * @description A list of online services where this phone number has been detected to have accounts or other activity.
       * @example [
       *   "facebook"
       * ]
       */
      linked_services: components["schemas"]["RiskCheckLinkedService"][];
      [key: string]: unknown;
    } | null;
    /**
     * @description Field containing the data used in determining the outcome of the stolen identity risk check.
     *
     * Contains the following fields:
     *
     * `score` - A score from 0 to 100 indicating the likelihood that the user is a stolen identity.
     */
    RiskCheckStolenIdentity: {
      /**
       * @description A score from 0 to 100 indicating the likelihood that the user is a stolen identity.
       * @example 0
       */
      score: number;
      [key: string]: unknown;
    } | null;
    /**
     * @description Field containing the data used in determining the outcome of the synthetic identity risk check.
     *
     * Contains the following fields:
     *
     * `score` - A score from 0 to 100 indicating the likelihood that the user is a synthetic identity.
     */
    RiskCheckSyntheticIdentity: {
      /**
       * @description A score from 0 to 100 indicating the likelihood that the user is a synthetic identity.
       * @example 0
       */
      score: number;
      [key: string]: unknown;
    } | null;
    /** @description Analysis information describing why a screening hit matched the provided user information */
    ScreeningHitAnalysis: {
      dates_of_birth?: components["schemas"]["MatchSummaryCode"];
      documents?: components["schemas"]["MatchSummaryCode"];
      locations?: components["schemas"]["MatchSummaryCode"];
      names?: components["schemas"]["MatchSummaryCode"];
      /**
       * @description The version of the screening's `search_terms` that were compared when the screening hit was added. screening hits are immutable once they have been reviewed. If changes are detected due to updates to the screening's `search_terms`, the associated program, or the list's source data prior to review, the screening hit will be updated to reflect those changes.
       * @example 1
       */
      search_terms_version: number;
      [key: string]: unknown;
    };
    /** @description Information associated with the watchlist hit */
    ScreeningHitData: {
      /** @description Dates of birth associated with the watchlist hit */
      dates_of_birth?: components["schemas"]["ScreeningHitDateOfBirthItem"][];
      /** @description Documents associated with the watchlist hit */
      documents?: components["schemas"]["ScreeningHitDocumentsItems"][];
      /** @description Locations associated with the watchlist hit */
      locations?: components["schemas"]["GenericScreeningHitLocationItems"][];
      /** @description Names associated with the watchlist hit */
      names?: components["schemas"]["ScreeningHitNamesItems"][];
      [key: string]: unknown;
    };
    /** @description Analyzed date of birth for the associated hit */
    ScreeningHitDateOfBirthItem: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["DateRange"];
      [key: string]: unknown;
    };
    /** @description Analyzed document information for the associated hit */
    ScreeningHitDocumentsItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["WatchlistScreeningDocument"];
      [key: string]: unknown;
    };
    /** @description Analyzed name information for the associated hit */
    ScreeningHitNamesItems: {
      analysis?: components["schemas"]["MatchSummary"];
      data?: components["schemas"]["IndividualScreeningHitNames"];
      [key: string]: unknown;
    };
    /** @description High level descriptions of how the associated selfie was processed. If a selfie fails verification, the details in the `analysis` object should help clarify why the selfie was rejected. */
    SelfieAnalysis: {
      document_comparison: components["schemas"]["SelfieAnalysisDocumentComparison"];
      [key: string]: unknown;
    };
    /**
     * @description Information about the comparison between the selfie and the document (if documentary verification also ran).
     * @enum {string}
     */
    SelfieAnalysisDocumentComparison: "match" | "no_match" | "no_input";
    /** @description The image or video capture of a selfie. Only one of image or video URL will be populated per selfie. */
    SelfieCapture: {
      image_url: components["schemas"]["SelfieCaptureImageURL"];
      video_url: components["schemas"]["SelfieCaptureVideoURL"];
      [key: string]: unknown;
    };
    /**
     * @description Temporary URL for downloading an image selfie capture.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/selfie/liveness.jpeg
     */
    SelfieCaptureImageURL: string | null;
    /**
     * @description Temporary URL for downloading a video selfie capture.
     * @example https://example.plaid.com/verifications/idv_52xR9LKo77r1Np/selfie/liveness.webm
     */
    SelfieCaptureVideoURL: string | null;
    /**
     * SelfieCheck
     * @description Additional information for the `selfie_check` step. This field will be `null` unless `steps.selfie_check` has reached a terminal state of either `success` or `failed`.
     */
    SelfieCheck: {
      status: components["schemas"]["SelfieCheckStatus"];
      /** @description An array of selfies submitted to the `selfie_check` step. Each entry represents one user submission. */
      selfies: components["schemas"]["SelfieCheckSelfie"][];
      [key: string]: unknown;
    } | null;
    /** @description Captures and analysis from a user's selfie. */
    SelfieCheckSelfie: {
      status: components["schemas"]["SelfieStatus"];
      /**
       * @description The `attempt` field begins with 1 and increments with each subsequent selfie upload.
       * @example 1
       */
      attempt: number;
      capture: components["schemas"]["SelfieCapture"];
      analysis: components["schemas"]["SelfieAnalysis"];
      [key: string]: unknown;
    };
    /**
     * @description The outcome status for the associated Identity Verification attempt's `selfie_check` step. This field will always have the same value as `steps.selfie_check`.
     * @example success
     * @enum {string}
     */
    SelfieCheckStatus: "success" | "failed";
    /**
     * @description An outcome status for this specific selfie. Distinct from the overall `selfie_check.status` that summarizes the verification outcome from one or more selfies.
     * @example success
     * @enum {string}
     */
    SelfieStatus: "success" | "failed";
    /**
     * @description A shareable URL that can be sent directly to the user to complete verification
     * @example https://flow.plaid.com/verify/idv_4FrXJvfQU3zGUR?key=e004115db797f7cc3083bff3167cba30644ef630fb46f5b086cde6cc3b86a36f
     */
    ShareableURL: string | null;
    /**
     * @description A type indicating whether a dashboard user, an API-based user, or Plaid last touched this object.
     * @enum {string}
     */
    Source: "dashboard" | "link" | "api" | "system";
    /**
     * @description The identifier provided by the source sanction or watchlist. When one is not provided by the source, this is `null`.
     * @example 26192ABC
     */
    SourceUID: string | null;
    /**
     * @description An instruction specifying what steps the new Identity Verification attempt should require the user to complete:
     *
     *
     * `reset` - Restart the user at the beginning of the session, regardless of whether they successfully completed part of their previous session.
     *
     * `incomplete` - Start the new session at the step that the user failed in the previous session, skipping steps that have already been successfully completed.
     *
     * `infer` - If the most recent Identity Verification attempt associated with the given `client_user_id` has a status of `failed` or `expired`, retry using the `incomplete` strategy. Otherwise, use the `reset` strategy.
     *
     * `custom` - Start the new session with a custom configuration, specified by the value of the `steps` field
     *
     * Note:
     *
     * The `incomplete` strategy cannot be applied if the session's failing step is `screening` or `risk_check`.
     *
     * The `infer` strategy cannot be applied if the session's status is still `active`
     * @enum {string}
     */
    Strategy: "reset" | "incomplete" | "infer" | "custom";
    /**
     * Street
     * @description The primary street portion of an address. If the user has submitted their address, this field will always be filled.
     * @example 123 Main St.
     */
    Street: string;
    /**
     * Street2
     * @description Extra street information, like an apartment or suite number.
     * @example Unit 42
     */
    Street2: string | null;
    /**
     * Street
     * @description The primary street portion of an address. If the user has submitted their address, this field will always be filled.
     * @example 123 Main St.
     */
    StreetNullable: string | null;
    /**
     * Timestamp
     * Format: date-time
     * @description An ISO8601 formatted timestamp.
     * @example 2020-07-24T03:26:02Z
     */
    Timestamp: string;
    /**
     * Timestamp
     * Format: date-time
     * @description An ISO8601 formatted timestamp.
     * @example 2020-07-24T03:26:02Z
     */
    TimestampNullable: string | null;
    /**
     * URL
     * Format: uri
     * @description An 'http' or 'https' URL (must begin with either of those).
     * @example https://example.com
     */
    URL: string;
    /**
     * URL
     * Format: uri
     * @description An 'http' or 'https' URL (must begin with either of those).
     * @example https://example.com
     */
    URLNullable: string | null;
    /**
     * @description UTC offset of the timezone associated with the IP address.
     * @example +06:00:00
     */
    UTCOffset: string | null;
    /** @description Search terms for editing an entity watchlist screening */
    UpdateEntityScreeningRequestSearchTerms: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      legal_name?: components["schemas"]["EntityWatchlistScreeningName"];
      document_number?: components["schemas"]["WatchlistScreeningDocumentValue"];
      email_address?: components["schemas"]["EmailAddress"];
      country?: components["schemas"]["GenericCountryCode"];
      phone_number?: components["schemas"]["WatchlistScreeningPhoneNumber"];
      url?: components["schemas"]["URL"];
    } | null;
    /** @description Search terms for editing an individual watchlist screening */
    UpdateIndividualScreeningRequestSearchTerms: {
      watchlist_program_id?: components["schemas"]["WatchlistProgramID"];
      legal_name?: components["schemas"]["WatchlistScreeningIndividualName"];
      date_of_birth?: components["schemas"]["ISO8601Date"];
      document_number?: components["schemas"]["WatchlistScreeningDocumentValue"];
      country?: components["schemas"]["GenericCountryCode"];
    } | null;
    /**
     * Timestamp
     * Format: date-time
     * @description An ISO8601 formatted timestamp. This field indicates the last time the resource was modified.
     * @example 2020-07-24T03:26:02Z
     */
    UpdatedAtTimestamp: string;
    /** @description Home address for the user. For more context on this field, see [Input Validation by Country](https://plaid.com/docs/identity-verification/hybrid-input-validation/#input-validation-by-country). */
    UserAddress: {
      street: components["schemas"]["Street"];
      street2?: components["schemas"]["Street2"];
      city: components["schemas"]["City"];
      region?: components["schemas"]["Region"];
      postal_code?: components["schemas"]["PostalCode"];
      country: components["schemas"]["GenericCountryCode"];
      [key: string]: unknown;
    } | null;
    /** @description ID number submitted by the user, currently used only for the Identity Verification product. If the user has not submitted this data yet, this field will be `null`. Otherwise, both fields are guaranteed to be filled. */
    UserIDNumber: {
      value: components["schemas"]["IDNumberValue"];
      type: components["schemas"]["IDNumberType"];
      [key: string]: unknown;
    } | null;
    /**
     * WatchlistProgramID
     * @description ID of the associated program.
     * @example prg_2eRPsDnL66rZ7H
     */
    WatchlistProgramID: string;
    /**
     * WatchlistScreeningAuditTrail
     * @description Information about the last change made to the parent object specifying what caused the change as well as when it occurred.
     */
    WatchlistScreeningAuditTrail: {
      source: components["schemas"]["Source"];
      dashboard_user_id: components["schemas"]["DashboardUserIDNullable"];
      timestamp: components["schemas"]["Timestamp"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningDocument
     * @description An official document, usually issued by a governing body or institution, with an associated identifier.
     */
    WatchlistScreeningDocument: {
      type: components["schemas"]["WatchlistScreeningDocumentType"];
      number: components["schemas"]["WatchlistScreeningDocumentValue"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningDocumentType
     * @description The kind of official document represented by this object.
     *
     * `birth_certificate` - A certificate of birth
     *
     * `drivers_license` - A license to operate a motor vehicle
     *
     * `immigration_number` - Immigration or residence documents
     *
     * `military_id` - Identification issued by a military group
     *
     * `other` - Any document not covered by other categories
     *
     * `passport` - An official passport issue by a government
     *
     * `personal_identification` - Any generic personal identification that is not covered by other categories
     *
     * `ration_card` - Identification that entitles the holder to rations
     *
     * `ssn` - United States Social Security Number
     *
     * `student_id` - Identification issued by an educational institution
     *
     * `tax_id` - Identification issued for the purpose of collecting taxes
     *
     * `travel_document` - Visas, entry permits, refugee documents, etc.
     *
     * `voter_id` - Identification issued for the purpose of voting
     * @example passport
     * @enum {string}
     */
    WatchlistScreeningDocumentType: "birth_certificate" | "drivers_license" | "immigration_number" | "military_id" | "other" | "passport" | "personal_identification" | "ration_card" | "ssn" | "student_id" | "tax_id" | "travel_document" | "voter_id";
    /**
     * WatchlistScreeningDocumentValue
     * @description The numeric or alphanumeric identifier associated with this document.
     * @example C31195855
     */
    WatchlistScreeningDocumentValue: string;
    /**
     * WatchlistScreeningDocumentValue
     * @description The numeric or alphanumeric identifier associated with this document.
     * @example C31195855
     */
    WatchlistScreeningDocumentValueNullable: string | null;
    /** @description Request input for creating an entity screening review */
    WatchlistScreeningEntityCreateRequest: {
      search_terms: components["schemas"]["EntityWatchlistSearchTerms"];
      client_user_id?: components["schemas"]["ClientUserID"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
    WatchlistScreeningEntityCreateResponse: {
      id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms: components["schemas"]["EntityWatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for fetching an entity watchlist screening */
    WatchlistScreeningEntityGetRequest: {
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
    WatchlistScreeningEntityGetResponse: {
      id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms: components["schemas"]["EntityWatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing changes to entity watchlist screenings */
    WatchlistScreeningEntityHistoryListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of entity watchlist screenings */
    WatchlistScreeningEntityHistoryListResponse: {
      /** @description List of entity watchlist screening */
      entity_watchlist_screenings: components["schemas"]["EntityWatchlistScreening"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing hits for an entity watchlist screening */
    WatchlistScreeningEntityHitListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of entity watchlist screening hits */
    WatchlistScreeningEntityHitListResponse: {
      /** @description List of entity watchlist screening hits */
      entity_watchlist_screening_hits: components["schemas"]["EntityWatchlistScreeningHit"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing entity watchlist screenings */
    WatchlistScreeningEntityListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      client_user_id?: components["schemas"]["ClientUserID"];
      status?: components["schemas"]["WatchlistScreeningStatus"];
      assignee?: components["schemas"]["DashboardUserID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of entity watchlist screenings */
    WatchlistScreeningEntityListResponse: {
      /** @description List of entity watchlist screening */
      entity_watchlist_screenings: components["schemas"]["EntityWatchlistScreening"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for fetching an entity watchlist program */
    WatchlistScreeningEntityProgramGetRequest: {
      entity_watchlist_program_id: components["schemas"]["EntityWatchlistProgramID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of entities. */
    WatchlistScreeningEntityProgramGetResponse: {
      id: components["schemas"]["EntityWatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "EU_CON"
       * ]
       */
      lists_enabled: components["schemas"]["EntityWatchlistCode"][];
      name: components["schemas"]["EntityWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing entity watchlist screening programs */
    WatchlistScreeningEntityProgramListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of entity watchlist screening programs */
    WatchlistScreeningEntityProgramListResponse: {
      /** @description List of entity watchlist screening programs */
      entity_watchlist_programs: components["schemas"]["EntityWatchlistProgram"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for creating a review for an entity screening */
    WatchlistScreeningEntityReviewCreateRequest: {
      /** @description Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      /** @description Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      comment?: components["schemas"]["ReviewComment"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
    };
    /**
     * @description A review submitted by a team member for an entity watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    WatchlistScreeningEntityReviewCreateResponse: {
      id: components["schemas"]["EntityWatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["EntityWatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing reviews for an entity watchlist screening */
    WatchlistScreeningEntityReviewListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of entity watchlist screening reviews */
    WatchlistScreeningEntityReviewListResponse: {
      /** @description List of entity watchlist screening reviews */
      entity_watchlist_screening_reviews: components["schemas"]["EntityWatchlistScreeningReview"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for editing an entity watchlist screening */
    WatchlistScreeningEntityUpdateRequest: {
      entity_watchlist_screening_id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms?: components["schemas"]["UpdateEntityScreeningRequestSearchTerms"];
      assignee?: components["schemas"]["DashboardUserID"];
      status?: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id?: components["schemas"]["ClientUserID"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      reset_fields?: components["schemas"]["WatchlistScreeningEntityUpdateRequestResettableFieldList"];
    };
    /**
     * @description The name of a field that can be reset back to null
     * @enum {string}
     */
    WatchlistScreeningEntityUpdateRequestResettableField: "assignee";
    /** @description A list of fields to reset back to null */
    WatchlistScreeningEntityUpdateRequestResettableFieldList: components["schemas"]["WatchlistScreeningEntityUpdateRequestResettableField"][] | null;
    /** @description The entity screening object allows you to represent an entity in your system, update its profile, and search for it on various watchlists. Note: Rejected entity screenings will not receive new hits, regardless of entity program configuration. */
    WatchlistScreeningEntityUpdateResponse: {
      id: components["schemas"]["EntityWatchlistScreeningID"];
      search_terms: components["schemas"]["EntityWatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningHit
     * @description Data from a government watchlist or PEP list that has been attached to the screening.
     */
    WatchlistScreeningHit: {
      id: components["schemas"]["WatchlistScreeningHitID"];
      review_status: components["schemas"]["WatchlistScreeningHitStatus"];
      first_active: components["schemas"]["Timestamp"];
      inactive_since: components["schemas"]["TimestampNullable"];
      historical_since: components["schemas"]["TimestampNullable"];
      list_code: components["schemas"]["IndividualWatchlistCode"];
      plaid_uid: components["schemas"]["InternalUID"];
      source_uid: components["schemas"]["SourceUID"];
      analysis?: components["schemas"]["ScreeningHitAnalysis"];
      data?: components["schemas"]["ScreeningHitData"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningHitID
     * @description ID of the associated screening hit.
     * @example scrhit_52xR9LKo77r1Np
     */
    WatchlistScreeningHitID: string;
    /** @description Location information for the associated individual watchlist hit */
    WatchlistScreeningHitLocations: {
      /**
       * @description The full location string, potentially including elements like street, city, postal codes and country codes. Note that this is not necessarily a complete or well-formatted address.
       * @example Florida, US
       */
      full: string;
      country: components["schemas"]["GenericCountryCode"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningHitStatus
     * @description The current state of review. All watchlist screening hits begin in a `pending_review` state but can be changed by creating a review. When a hit is in the `pending_review` state, it will always show the latest version of the watchlist data Plaid has available and be compared against the latest customer information saved in the watchlist screening. Once a hit has been marked as `confirmed` or `dismissed` it will no longer be updated so that the state is as it was when the review was first conducted.
     * @example pending_review
     * @enum {string}
     */
    WatchlistScreeningHitStatus: "confirmed" | "pending_review" | "dismissed";
    /**
     * WatchlistScreeningIndividual
     * @description The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration.
     */
    WatchlistScreeningIndividual: {
      id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms: components["schemas"]["WatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      [key: string]: unknown;
    };
    /** @description Request input for creating an individual watchlist screening */
    WatchlistScreeningIndividualCreateRequest: {
      search_terms: components["schemas"]["WatchlistScreeningRequestSearchTerms"];
      client_user_id?: components["schemas"]["ClientUserID"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /** @description The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
    WatchlistScreeningIndividualCreateResponse: {
      id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms: components["schemas"]["WatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for fetching an individual watchlist screening */
    WatchlistScreeningIndividualGetRequest: {
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
    WatchlistScreeningIndividualGetResponse: {
      id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms: components["schemas"]["WatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing changes to watchlist screenings for individuals */
    WatchlistScreeningIndividualHistoryListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of individual watchlist screenings. */
    WatchlistScreeningIndividualHistoryListResponse: {
      /** @description List of individual watchlist screenings */
      watchlist_screenings: components["schemas"]["WatchlistScreeningIndividual"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing hits for an individual watchlist screening */
    WatchlistScreeningIndividualHitListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of individual watchlist screening hits */
    WatchlistScreeningIndividualHitListResponse: {
      /** @description List of individual watchlist screening hits */
      watchlist_screening_hits: components["schemas"]["WatchlistScreeningHit"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningIndividualID
     * @description ID of the associated screening.
     * @example scr_52xR9LKo77r1Np
     */
    WatchlistScreeningIndividualID: string;
    /**
     * WatchlistScreeningIndividualID
     * @description ID of the associated screening.
     * @example scr_52xR9LKo77r1Np
     */
    WatchlistScreeningIndividualIDNullable: string | null;
    /** @description Request input for listinging watchlist screenings for individuals */
    WatchlistScreeningIndividualListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      client_user_id?: components["schemas"]["ClientUserID"];
      status?: components["schemas"]["WatchlistScreeningStatus"];
      assignee?: components["schemas"]["DashboardUserID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of individual watchlist screenings. */
    WatchlistScreeningIndividualListResponse: {
      /** @description List of individual watchlist screenings */
      watchlist_screenings: components["schemas"]["WatchlistScreeningIndividual"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningIndividualName
     * @description The legal name of the individual being screened.
     * @example Aleksey Potemkin
     */
    WatchlistScreeningIndividualName: string;
    /** @description Request input for fetching an individual watchlist program */
    WatchlistScreeningIndividualProgramGetRequest: {
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
    };
    /** @description A program that configures the active lists, search parameters, and other behavior for initial and ongoing screening of individuals. */
    WatchlistScreeningIndividualProgramGetResponse: {
      id: components["schemas"]["WatchlistProgramID"];
      created_at: components["schemas"]["Timestamp"];
      /**
       * @description Indicator specifying whether the program is enabled and will perform daily rescans.
       * @example true
       */
      is_rescanning_enabled: boolean;
      /**
       * @description Watchlists enabled for the associated program
       * @example [
       *   "US_SDN"
       * ]
       */
      lists_enabled: components["schemas"]["IndividualWatchlistCode"][];
      name: components["schemas"]["IndividualWatchlistScreeningProgramName"];
      name_sensitivity: components["schemas"]["ProgramNameSensitivity"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      is_archived: components["schemas"]["ProgramArchived"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing watchlist screening programs for individuals */
    WatchlistScreeningIndividualProgramListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of individual watchlist screening programs */
    WatchlistScreeningIndividualProgramListResponse: {
      /** @description List of individual watchlist screening programs */
      watchlist_programs: components["schemas"]["IndividualWatchlistProgram"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for creating a screening review */
    WatchlistScreeningIndividualReviewCreateRequest: {
      /** @description Hits to mark as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      /** @description Hits to mark as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      comment?: components["schemas"]["ReviewComment"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
    };
    /**
     * @description A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    WatchlistScreeningIndividualReviewCreateResponse: {
      id: components["schemas"]["WatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for listing reviews for an individual watchlist screening */
    WatchlistScreeningIndividualReviewListRequest: {
      secret?: components["schemas"]["APISecret"];
      client_id?: components["schemas"]["APIClientID"];
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      cursor?: components["schemas"]["Cursor"];
    };
    /** @description Paginated list of screening reviews */
    WatchlistScreeningIndividualReviewListResponse: {
      /** @description List of screening reviews */
      watchlist_screening_reviews: components["schemas"]["WatchlistScreeningReview"][];
      next_cursor: components["schemas"]["Cursor"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Request input for editing an individual watchlist screening */
    WatchlistScreeningIndividualUpdateRequest: {
      watchlist_screening_id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms?: components["schemas"]["UpdateIndividualScreeningRequestSearchTerms"];
      assignee?: components["schemas"]["DashboardUserID"];
      status?: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id?: components["schemas"]["ClientUserID"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      reset_fields?: components["schemas"]["WatchlistScreeningIndividualUpdateRequestResettableFieldList"];
    };
    /**
     * @description The name of a field that can be reset back to null
     * @enum {string}
     */
    WatchlistScreeningIndividualUpdateRequestResettableField: "assignee";
    /** @description A list of fields to reset back to null */
    WatchlistScreeningIndividualUpdateRequestResettableFieldList: components["schemas"]["WatchlistScreeningIndividualUpdateRequestResettableField"][] | null;
    /** @description The screening object allows you to represent a customer in your system, update their profile, and search for them on various watchlists. Note: Rejected customers will not receive new hits, regardless of program configuration. */
    WatchlistScreeningIndividualUpdateResponse: {
      id: components["schemas"]["WatchlistScreeningIndividualID"];
      search_terms: components["schemas"]["WatchlistScreeningSearchTerms"];
      assignee: components["schemas"]["DashboardUserIDNullable"];
      status: components["schemas"]["WatchlistScreeningStatus"];
      client_user_id: components["schemas"]["ClientUserIDNullable"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningPhoneNumber
     * @description A phone number in E.164 format.
     * @example +14025671234
     */
    WatchlistScreeningPhoneNumber: string;
    /**
     * WatchlistScreeningPhoneNumber
     * @description A phone number in E.164 format.
     * @example +14025671234
     */
    WatchlistScreeningPhoneNumberNullable: string | null;
    /** @description Search inputs for creating a watchlist screening */
    WatchlistScreeningRequestSearchTerms: {
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      legal_name: components["schemas"]["WatchlistScreeningIndividualName"];
      date_of_birth?: components["schemas"]["ISO8601Date"];
      document_number?: components["schemas"]["WatchlistScreeningDocumentValue"];
      country?: components["schemas"]["GenericCountryCode"];
    };
    /**
     * WatchlistScreeningReview
     * @description A review submitted by a team member for an individual watchlist screening. A review can be either a comment on the current screening state, actions taken
     * against hits attached to the watchlist screening, or both.
     */
    WatchlistScreeningReview: {
      id: components["schemas"]["WatchlistScreeningReviewID"];
      /** @description Hits marked as a true positive after thorough manual review. These hits will never recur or be updated once dismissed. In most cases, confirmed hits indicate that the customer should be rejected. */
      confirmed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      /** @description Hits marked as a false positive after thorough manual review. These hits will never recur or be updated once dismissed. */
      dismissed_hits: components["schemas"]["WatchlistScreeningHitID"][];
      comment: components["schemas"]["ReviewComment"];
      audit_trail: components["schemas"]["WatchlistScreeningAuditTrail"];
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningReviewID
     * @description ID of the associated review.
     * @example rev_aCLNRxK3UVzn2r
     */
    WatchlistScreeningReviewID: string;
    /** @description Search terms for creating an individual watchlist screening */
    WatchlistScreeningSearchTerms: {
      watchlist_program_id: components["schemas"]["WatchlistProgramID"];
      legal_name: components["schemas"]["WatchlistScreeningIndividualName"];
      date_of_birth: components["schemas"]["ISO8601DateNullable"];
      document_number: components["schemas"]["WatchlistScreeningDocumentValueNullable"];
      country: components["schemas"]["GenericCountryCodeNullable"];
      /**
       * @description The current version of the search terms. Starts at `1` and increments with each edit to `search_terms`.
       * @example 1
       */
      version: number;
      [key: string]: unknown;
    };
    /**
     * WatchlistScreeningStatus
     * @description A status enum indicating whether a screening is still pending review, has been rejected, or has been cleared.
     * @example cleared
     * @enum {string}
     */
    WatchlistScreeningStatus: "rejected" | "pending_review" | "cleared";
    /**
     * WeakAliasDetermination
     * @description Names that are explicitly marked as low quality either by their `source` list, or by `plaid` by a series of additional checks done by Plaid. Plaid does not ever surface a hit as a result of a weak name alone. If a name has no quality issues, this value will be `none`.
     * @example none
     * @enum {string}
     */
    WeakAliasDetermination: "none" | "source" | "plaid";
    /** @description CreditAuditCopyTokenUpdateRequest defines the request schema for `/credit/audit_copy_token/update` */
    CreditAuditCopyTokenUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description The `audit_copy_token` you would like to update. */
      audit_copy_token: string;
      /** @description Array of tokens which the specified Audit Copy Token will be updated with. The types of token supported are asset report token and employment report token. There can be at most 1 of each token type in the array. */
      report_tokens: components["schemas"]["AssetReportToken"][];
    };
    /** @description CreditAuditCopyTokenUpdateResponse defines the response schema for `/credit/audit_copy_token/update` */
    CreditAuditCopyTokenUpdateResponse: {
      request_id: components["schemas"]["RequestID"];
      /** @description `true` if the Audit Copy Token was successfully updated. */
      updated: boolean;
      [key: string]: unknown;
    };
    /**
     * CraBankIncomeGetRequest
     * @description CraBankIncomeGetRequest defines the request schema for `/cra/bank_income/get`.
     */
    CraBankIncomeGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      user_token?: components["schemas"]["UserToken"];
    };
    /**
     * CraBankIncomeGetResponse
     * @description CraBankIncomeGetResponse defines the response schema for `/cra/bank_income/get`.
     */
    CraBankIncomeGetResponse: {
      bank_income?: components["schemas"]["CraBankIncome"][];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description The report of the Bank Income data for an end user. */
    CraBankIncome: {
      /** @description The unique identifier associated with the Bank Income Report. */
      bank_income_id?: string;
      /**
       * Format: date-time
       * @description The time when the Bank Income Report was generated.
       */
      generated_time?: string;
      /** @description The number of days requested by the customer for the Bank Income Report. */
      days_requested?: number;
      /** @description The list of Items in the report along with the associated metadata about the Item. */
      items?: components["schemas"]["CraBankIncomeItem"][];
      bank_income_summary?: components["schemas"]["CraBankIncomeSummary"];
      /** @description If data from the Bank Income report was unable to be retrieved, the warnings will contain information about the error that caused the data to be incomplete. */
      warnings?: components["schemas"]["CraBankIncomeWarning"][];
    };
    /** @description The details and metadata for an end user's Item. */
    CraBankIncomeItem: {
      /** @description The Item's accounts that have Bank Income data. */
      bank_income_accounts?: components["schemas"]["CraBankIncomeAccount"][];
      /** @description The income sources for this Item. Each entry in the array is a single income source. */
      bank_income_sources?: components["schemas"]["CraBankIncomeSource"][];
      /**
       * Format: date-time
       * @description The time when this Item's data was last retrieved from the financial institution.
       */
      last_updated_time?: string;
      /** @description The unique identifier of the institution associated with the Item. */
      institution_id?: string;
      /** @description The name of the institution associated with the Item. */
      institution_name?: string;
    };
    /** @description The Item's bank accounts that have the selected data. */
    CraBankIncomeAccount: {
      /**
       * @description The last 2-4 alphanumeric characters of an account's official account number.
       * Note that the mask may be non-unique between an Item's accounts, and it may also not match the mask that the bank displays to the user.
       */
      mask: string | null;
      /** @description The name of the bank account. */
      name: string;
      /** @description The official name of the bank account. */
      official_name: string | null;
      subtype: components["schemas"]["DepositoryAccountSubtype"];
      type: components["schemas"]["CreditBankIncomeAccountType"];
      /** @description Data returned by the financial institution about the account owner or owners. Identity information is optional, so field may return an empty array. */
      owners: components["schemas"]["Owner"][];
    };
    /** @description Detailed information for the income source. */
    CraBankIncomeSource: {
      /** @description A unique identifier for an income source. */
      income_source_id?: string;
      /** @description The most common name or original description for the underlying income transactions. */
      income_description?: string;
      income_category?: components["schemas"]["CreditBankIncomeCategory"];
      /**
       * Format: date
       * @description Minimum of all dates within the specific income sources in the user's bank account for days requested by the client.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description Maximum of all dates within the specific income sources in the user’s bank account for days requested by the client.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      pay_frequency?: components["schemas"]["CreditBankIncomePayFrequency"];
      /** @description Total amount of earnings in the user’s bank account for the specific income source for days requested by the client. */
      total_amount?: number;
      iso_currency_code?: components["schemas"]["CreditIsoCurrencyCode"];
      unofficial_currency_code?: components["schemas"]["CreditUnofficialCurrencyCode"];
      /** @description Number of transactions for the income source within the start and end date. */
      transaction_count?: number;
      /**
       * Format: date
       * @description The expected date of the end user’s next paycheck for the income source.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      next_payment_date?: string | null;
      /** @description An estimate of the average gross monthly income based on the historical net amount and income category for the income source(s). */
      historical_average_monthly_gross_income?: number | null;
      /** @description The average monthly net income amount estimated based on the historical data for the income source(s). */
      historical_average_monthly_income?: number | null;
      /** @description The predicted average monthly net income amount for the income source(s). */
      forecasted_average_monthly_income?: number | null;
      employer?: components["schemas"]["CraBankIncomeEmployer"];
      historical_summary?: components["schemas"]["CraBankIncomeHistoricalSummary"][];
    };
    /** @description The object containing employer data. */
    CraBankIncomeEmployer: {
      /** @description The name of the employer. */
      name: string | null;
      [key: string]: unknown;
    };
    /** @description Summary for bank income across all income sources and items (max history of 730 days). */
    CraBankIncomeSummary: {
      /**
       * @description Total amount of earnings across all the income sources in the end user's Items for the days requested by the client.
       * This can contain multiple amounts, with each amount denominated in one unique currency.
       */
      total_amounts?: components["schemas"]["CreditAmountWithCurrency"][];
      /**
       * Format: date
       * @description The earliest date within the days requested in which all income sources identified by Plaid appear in a user's account.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The latest date in which all income sources identified by Plaid appear in the user's account.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      /** @description Number of income sources per end user. */
      income_sources_count?: number;
      /** @description Number of income categories per end user. */
      income_categories_count?: number;
      /** @description Number of income transactions per end user. */
      income_transactions_count?: number;
      /** @description An estimate of the average gross monthly income based on the historical net amount and income category for the income source(s). */
      historical_average_monthly_gross_income?: components["schemas"]["CreditAmountWithCurrency"][];
      /** @description The average monthly income amount estimated based on the historical data for the income source(s). */
      historical_average_monthly_income?: components["schemas"]["CreditAmountWithCurrency"][];
      /** @description The predicted average monthly income amount for the income source(s). */
      forecasted_average_monthly_income?: components["schemas"]["CreditAmountWithCurrency"][];
      historical_summary?: components["schemas"]["CraBankIncomeHistoricalSummary"][];
      [key: string]: unknown;
    };
    /** @description The end user's monthly summary for the income source(s). */
    CraBankIncomeHistoricalSummary: {
      /**
       * @description Total amount of earnings for the income source(s) of the user for the month in the summary.
       * This can contain multiple amounts, with each amount denominated in one unique currency.
       */
      total_amounts?: components["schemas"]["CreditAmountWithCurrency"][];
      /**
       * Format: date
       * @description The start date of the period covered in this monthly summary.
       * This date will be the first day of the month, unless the month being covered is a partial month because it is the first month included in the summary and the date range being requested does not begin with the first day of the month.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      start_date?: string;
      /**
       * Format: date
       * @description The end date of the period included in this monthly summary.
       * This date will be the last day of the month, unless the month being covered is a partial month because it is the last month included in the summary and the date range being requested does not end with the last day of the month.
       * The date will be returned in an ISO 8601 format (YYYY-MM-DD).
       */
      end_date?: string;
      transactions?: components["schemas"]["CraBankIncomeTransaction"][];
      [key: string]: unknown;
    };
    /** @description The transactions data for the end user's income source(s). */
    CraBankIncomeTransaction: {
      /**
       * @description The settled value of the transaction, denominated in the transactions's currency as stated in `iso_currency_code` or `unofficial_currency_code`.
       * Positive values when money moves out of the account; negative values when money moves in.
       * For example, credit card purchases are positive; credit card payment, direct deposits, and refunds are negative.
       */
      amount?: number;
      /**
       * Format: date
       * @description For pending transactions, the date that the transaction occurred; for posted transactions, the date that the transaction posted.
       * Both dates are returned in an ISO 8601 format (YYYY-MM-DD).
       */
      date?: string;
      /** @description The merchant name or transaction description. */
      name?: string;
      /** @description The string returned by the financial institution to describe the transaction. */
      original_description?: string | null;
      /**
       * @description When true, identifies the transaction as pending or unsettled.
       * Pending transaction details (name, type, amount, category ID) may change before they are settled.
       */
      pending?: boolean;
      /** @description The check number of the transaction. This field is only populated for check transactions. */
      check_number?: string | null;
      iso_currency_code?: components["schemas"]["CreditIsoCurrencyCode"];
      unofficial_currency_code?: components["schemas"]["CreditUnofficialCurrencyCode"];
      [key: string]: unknown;
    };
    /** @description The warning associated with the data that was unavailable for the Bank Income Report. */
    CraBankIncomeWarning: {
      warning_type?: components["schemas"]["CreditBankIncomeWarningType"];
      warning_code?: components["schemas"]["CraBankIncomeWarningCode"];
      cause?: components["schemas"]["CraBankIncomeCause"];
    };
    /**
     * @description The warning code identifies a specific kind of warning.
     * `IDENTITY_UNAVAILABLE`: Unable to extract identity for the Item
     * `TRANSACTIONS_UNAVAILABLE`: Unable to extract transactions for the Item
     * `REPORT_DELETED`: Report deleted due to customer or consumer request
     * `DATA_UNAVAILABLE`: No relevant data was found for the Item
     * @enum {string}
     */
    CraBankIncomeWarningCode: "IDENTITY_UNAVAILABLE" | "TRANSACTIONS_UNAVAILABLE" | "REPORT_DELETED" | "DATA_UNAVAILABLE";
    /** @description An error object and associated `item_id` used to identify a specific Item and error when a batch operation operating on multiple Items has encountered an error in one of the Items. */
    CraBankIncomeCause: {
      error_type: components["schemas"]["CreditBankIncomeErrorType"];
      /** @description We use standard HTTP response codes for success and failure notifications, and our errors are further classified by `error_type`. In general, 200 HTTP codes correspond to success, 40X codes are for developer- or user-related failures, and 50X codes are for Plaid-related issues. Error fields will be `null` if no error has occurred. */
      error_code: string;
      /** @description A developer-friendly representation of the error code. This may change over time and is not safe for programmatic use. */
      error_message: string;
      /**
       * @description A user-friendly representation of the error code. null if the error is not related to user action.
       * This may change over time and is not safe for programmatic use.
       */
      display_message: string;
    };
    /**
     * AssetReportFreddieGetRequest
     * @description AssetReportFreddieGetRequest defines the request schema for `credit/asset_report/freddie_mac/get`
     */
    AssetReportFreddieGetRequest: {
      /** @description A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely. */
      audit_copy_token: string;
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      [key: string]: unknown;
    };
    /**
     * AssetReportFreddieGetResponse
     * @description AssetReportFreddieGetResponse defines the response schema for `/asset_report/get`
     */
    AssetReportFreddieGetResponse: {
      DEAL: components["schemas"]["AssetReportFreddie"];
      request_id: components["schemas"]["RequestID"];
      /** @description The Verification Of Assets (aka VOA or Freddie Mac Schema) schema version. */
      SchemaVersion: number;
      [key: string]: unknown;
    };
    /**
     * AssetReportFreddie
     * @description An object representing an Asset Report with Freddie Mac schema.
     */
    AssetReportFreddie: {
      LOANS: components["schemas"]["Loans"];
      PARTIES: components["schemas"]["Parties"];
      SERVICES: components["schemas"]["Services"];
      [key: string]: unknown;
    };
    /**
     * Loans
     * @description A collection of loans that are part of a single deal.
     */
    Loans: {
      LOAN: components["schemas"]["Loan"];
      [key: string]: unknown;
    };
    /**
     * Loan
     * @description Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender.
     */
    Loan: {
      LOAN_IDENTIFIERS: components["schemas"]["LoanIdentifiers"];
      [key: string]: unknown;
    };
    /**
     * LoanIdentifiers
     * @description Collection of current and previous identifiers for this loan.
     */
    LoanIdentifiers: {
      LOAN_IDENTIFIER: components["schemas"]["LoanIdentifier"];
      [key: string]: unknown;
    };
    /**
     * LoanIdentifier
     * @description The information used to identify this loan by various parties to the transaction or other organizations.
     */
    LoanIdentifier: {
      /** @description The value of the identifier for the specified type. */
      LoanIdentifier: string | null;
      LoanIdentifierType: components["schemas"]["LoanIdentifierType"];
      [key: string]: unknown;
    };
    /**
     * LoanIdentifierType
     * @description A value from a MISMO prescribed list that specifies the type of loan identifier.
     * @enum {string|null}
     */
    LoanIdentifierType: "LenderLoan" | "UniversalLoan" | null;
    /**
     * Parties
     * @description A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
     */
    Parties: {
      PARTY: components["schemas"]["Party"][];
      [key: string]: unknown;
    };
    /**
     * Party
     * @description A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider.
     */
    Party: {
      INDIVIDUAL: components["schemas"]["PartyIndividual"];
      ROLES: components["schemas"]["Roles"];
      TAXPAYER_IDENTIFIERS: components["schemas"]["TaxpayerIdentifiers"];
      [key: string]: unknown;
    };
    /**
     * INDIVIDUAL
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    PartyIndividual: {
      NAME: components["schemas"]["IndividualName"];
      [key: string]: unknown;
    };
    /**
     * NAME
     * @description Parent container for name that allows for choice group between parsed and unparsed containers.Parent container for name that allows for choice group between parsed and unparsed containers.
     */
    IndividualName: {
      /** @description The first name of the individual represented by the parent object. */
      FirstName: string;
      /** @description The last name of the individual represented by the parent object. */
      LastName: string;
      [key: string]: unknown;
    };
    /**
     * Roles
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    Roles: {
      ROLE: components["schemas"]["Role"];
      [key: string]: unknown;
    };
    /**
     * Role
     * @description ADocumentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    Role: {
      ROLE_DETAIL: components["schemas"]["RoleDetail"];
      [key: string]: unknown;
    };
    /**
     * RoleDetail
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    RoleDetail: {
      PartyRoleType: components["schemas"]["PartyRoleType"];
      [key: string]: unknown;
    };
    /**
     * PartyRoleType
     * @description A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.A value from a MISMO defined list that identifies the role that the party plays in the transaction. Parties may be either a person or legal entity. A party may play multiple roles in a transaction.
     * @enum {string}
     */
    PartyRoleType: "Borrower";
    /**
     * TaxpayerIdentifiers
     * @description The collection of TAXPAYER_IDENTIFICATION elements
     */
    TaxpayerIdentifiers: {
      TAXPAYER_IDENTIFIER: components["schemas"]["TaxpayerIdentifier"];
      [key: string]: unknown;
    };
    /**
     * TaxpayerIdentifier
     * @description Information about the Taxpayer identification values assigned to the individual or legal entity.Information about the Taxpayer identification values assigned to the individual or legal entity.
     */
    TaxpayerIdentifier: {
      TaxpayerIdentifierType: components["schemas"]["TaxpayerIdentifierType"];
      /** @description The value of the taxpayer identifier as assigned by the IRS to the individual or legal entity. */
      TaxpayerIdentifierValue: string | null;
      [key: string]: unknown;
    };
    /**
     * TaxpayerIdentifierType
     * @description A value from a MISMO prescribed list that classifies identification numbers used by the Internal Revenue Service (IRS) in the administration of tax laws. A Social Security number (SSN) is issued by the SSA; all other taxpayer identification numbers are issued by the IRS.
     * @enum {string|null}
     */
    TaxpayerIdentifierType: "IndividualTaxpayerIdentificationNumber" | "SocialSecurityNumber" | null;
    /**
     * Services
     * @description A collection of objects that describe requests and responses for services.
     */
    Services: {
      SERVICE: components["schemas"]["Service"];
      [key: string]: unknown;
    };
    /**
     * Service
     * @description A collection of details related to a fulfillment service or product in terms of request, process and result.
     */
    Service: {
      VERIFICATION_OF_ASSET: components["schemas"]["VerificationOfAsset"];
      STATUSES: components["schemas"]["Statuses"];
      [key: string]: unknown;
    };
    /**
     * VerificationOfAsset
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    VerificationOfAsset: {
      REPORTING_INFORMATION: components["schemas"]["ReportingInformation"];
      SERVICE_PRODUCT_FULFILLMENT: components["schemas"]["ServiceProductFulfillment"];
      VERIFICATION_OF_ASSET_RESPONSE: components["schemas"]["VerificationOfAssetResponse"];
      [key: string]: unknown;
    };
    /**
     * ReportingInformation
     * @description Information about an report identifier and a report name.
     */
    ReportingInformation: {
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ReportingInformationIdentifier: string;
      [key: string]: unknown;
    };
    /**
     * ServiceProductFulfillment
     * @description A collection of details related to a fulfillment service or product in terms of request, process and result.
     */
    ServiceProductFulfillment: {
      SERVICE_PRODUCT_FULFILLMENT_DETAIL: components["schemas"]["ServiceProductFulfillmentDetail"];
      [key: string]: unknown;
    };
    /**
     * ServiceProductFulfillmentDetail
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    ServiceProductFulfillmentDetail: {
      /** @description A string that uniquely identifies a type of order Verification of Asset. */
      VendorOrderIdentifier: string | null;
      ServiceProductFulfillmentIdentifier: components["schemas"]["ServiceProductFulfillmentIdentifier"];
      [key: string]: unknown;
    };
    /**
     * ServiceProductFulfillmentIdentifier
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     * @enum {string}
     */
    ServiceProductFulfillmentIdentifier: "VOA" | "VOE";
    /**
     * VerificationOfAssetResponse
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    VerificationOfAssetResponse: {
      ASSETS: components["schemas"]["Assets"];
      [key: string]: unknown;
    };
    /**
     * Assets
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    Assets: {
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ASSET: components["schemas"]["Asset"][];
      [key: string]: unknown;
    };
    /**
     * Asset
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    Asset: {
      ASSET_DETAIL: components["schemas"]["AssetDetail"];
      ASSET_OWNERS: components["schemas"]["AssetOwners"];
      ASSET_HOLDER: components["schemas"]["AssetHolder"];
      ASSET_TRANSACTIONS: components["schemas"]["AssetTransactions"];
      VALIDATION_SOURCES: components["schemas"]["ValidationSources"];
      [key: string]: unknown;
    };
    /**
     * AssetDetail
     * @description Details about an asset.
     */
    AssetDetail: {
      /** @description A vendor created unique Identifier. */
      AssetUniqueIdentifier: string;
      /** @description A unique alphanumeric string identifying an asset. */
      AssetAccountIdentifier: string;
      /** @description Account Report As of Date / Create Date. Format YYYY-MM-DD */
      AssetAsOfDate: string;
      /** @description A text description that further defines the Asset. This could be used to describe the shares associated with the stocks, bonds or mutual funds, retirement funds or business owned that the borrower has disclosed (named) as an asset. */
      AssetDescription: string | null;
      /**
       * Format: double
       * @description Asset Account Available Balance.
       */
      AssetAvailableBalanceAmount: number;
      /**
       * Format: double
       * @description A vendor created unique Identifier
       */
      AssetCurrentBalanceAmount: number;
      AssetType: components["schemas"]["AssetType"];
      /** @description Additional Asset Decription some examples are Investment Tax-Deferred , Loan, 401K, 403B, Checking, Money Market, Credit Card,ROTH,529,Biller,ROLLOVER,CD,Savings,Investment Taxable, IRA, Mortgage, Line Of Credit. */
      AssetTypeAdditionalDescription: string | null;
      /** @description The Number of days requested made to the Financial Institution. Example When looking for 3 months of data from the FI, pass in 90 days. */
      AssetDaysRequestedCount: number;
      /** @description Ownership type of the asset account. */
      AssetOwnershipType: string | null;
      [key: string]: unknown;
    };
    /**
     * AssetType
     * @description A value from a MISMO prescribed list that specifies financial assets in a mortgage loan transaction. Assets may be either liquid or fixed and are associated with a corresponding asset amount.
     * @enum {string}
     */
    AssetType: "CheckingAccount" | "SavingsAccount" | "Investment" | "MoneyMarketFund" | "Other";
    /**
     * AssetOwners
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    AssetOwners: {
      /** @description Multiple Occurances of Account Owners Full Name up to 4. */
      ASSET_OWNER: components["schemas"]["AssetOwner"][];
      [key: string]: unknown;
    };
    /**
     * AssetOwner
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    AssetOwner: {
      /** @description Account Owner Full Name. */
      AssetOwnerText: string | null;
      [key: string]: unknown;
    };
    /**
     * AssetHolder
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    AssetHolder: {
      NAME: components["schemas"]["AssetHolderName"];
      [key: string]: unknown;
    };
    /**
     * NAME
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    AssetHolderName: {
      /** @description The unparsed name of either an individual or a legal entity. */
      FullName: string;
      [key: string]: unknown;
    };
    /**
     * AssetTransactions
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    AssetTransactions: {
      ASSET_TRANSACTION: components["schemas"]["AssetTransaction"][];
      [key: string]: unknown;
    };
    /**
     * AssetTransaction
     * @description An object representing...
     */
    AssetTransaction: {
      ASSET_TRANSACTION_DETAIL: components["schemas"]["AssetTransactionDetail"];
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ASSET_TRANSACTION_DESCRIPTON: components["schemas"]["AssetTransactionDescription"][];
      [key: string]: unknown;
    };
    /**
     * AssetTransactionDetail
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    AssetTransactionDetail: {
      /** @description A vendor created unique Identifier. */
      AssetTransactionUniqueIdentifier: string;
      /** @description Asset Transaction Amount. */
      AssetTransactionAmount: number;
      /**
       * Format: date
       * @description Asset Transaction Date.
       */
      AssetTransactionDate: string;
      /**
       * Format: date
       * @description Asset Transaction Post Date.
       */
      AssetTransactionPostDate: string;
      AssetTransactionType: components["schemas"]["AssetTransactionType"];
      /** @description Populate with who did the transaction. */
      AssetTransactionPaidByName: string | null;
      /** @description FI Provided - examples are atm, cash, check, credit, debit, deposit, directDebit, directDeposit, dividend, fee, interest, other, payment, pointOfSale, repeatPayment, serviceCharge, transfer. */
      AssetTransactionTypeAdditionalDescription: string | null;
      AssetTransactionCategoryType: components["schemas"]["AssetTransactionCategoryType"];
      /** @description FI provided Transaction Identifier. */
      FinancialInstitutionTransactionIdentifier: string | null;
      [key: string]: unknown;
    };
    /**
     * AssetTransactionType
     * @description Asset Transaction Type.
     * @enum {string}
     */
    AssetTransactionType: "Credit" | "Debit";
    /**
     * AssetTransactionCategoryType
     * @description Asset Transaction Category Type Enumerated derived by Vendor.
     * @enum {string|null}
     */
    AssetTransactionCategoryType: "ATMFee" | "Advertising" | "AirTravel" | "AlcoholBars" | "Allowance" | "Amusement" | "Arts" | "AutoTransport" | "AutoInsurance" | "AutoPayment" | "BabySupplies" | "BabysitterDaycare" | "BankFee" | "BillsUtilities" | "Bonus" | "BooksSupplies" | "Business Services" | "Buy" | "CashATM" | "Charity" | "Check" | "ChildSupport" | "Clothing" | "CoffeeShops" | "CreditCardPayment" | "Dentist" | "Doctor" | "Education" | "ElectronicsSoftware" | "Entertainment" | "Eyecare" | "FastFood" | "FederalTax" | "FeesCharges" | "FinanceCharge" | "Financial" | "FinancialAdvisor" | "FoodDining" | "Furnishings" | "GasFuel" | "GiftsDonations" | "Groceries" | "Gym" | "Hair" | "HealthFitness" | "HealthInsurance" | "Hobbies" | "Home" | "HomeImprovement" | "HomeInsurance" | "HomePhone" | "HomeServices" | "HomeSupplies" | "Hotel" | "Income" | "InterestIncome" | "Internet" | "Investments" | "Kids" | "KidsActivities" | "LateFee" | "Laundry" | "LawnGarden" | "Legal" | "LifeInsurance" | "LoanInsurance" | "LoanPayment" | "Loans" | "MobilePhone" | "MortgageRent" | "MoviesDVDs" | "Music" | "NewspapersMagazines" | "OfficeSupplies" | "Parking" | "Paycheck" | "PersonalCare" | "PetFoodSupplies" | "PetGrooming" | "Pets" | "Pharmacy" | "Printing" | "Property Tax" | "Public Transportation" | "Reimbursement" | "RentalCarTaxi" | "Restaurants" | "SalesTax" | "ServiceParts" | "ServiceFee" | "Shipping" | "Shopping" | "SpaMassage" | "SportingGoods" | "Sports" | "StateTax" | "Student Loan" | "Taxes" | "Television" | "Toys" | "Transfer" | "Travel" | "Tuition" | "Uncategorized" | "Utilities" | "Vacation" | "Veterinary" | null;
    /**
     * AssetTransactionDescription
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    AssetTransactionDescription: {
      /** @description Asset Transaction Description String up to 3 occurances 1 required. */
      AssetTransactionDescription: string;
      [key: string]: unknown;
    };
    /**
     * ValidationSources
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    ValidationSources: {
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      VALIDATION_SOURCE: components["schemas"]["ValidationSource"][];
      [key: string]: unknown;
    };
    /**
     * ValidationSource
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    ValidationSource: {
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ValidationSourceName: string | null;
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ValidationSourceReferenceIdentifier: string | null;
      [key: string]: unknown;
    };
    /**
     * Statuses
     * @description A collection of STATUS containers.
     */
    Statuses: {
      STATUS: components["schemas"]["Status"];
      [key: string]: unknown;
    };
    /**
     * Status
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    Status: {
      /** @description Satus Code. */
      StatusCode: string | null;
      /** @description Status Description. */
      StatusDescription: string | null;
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacReportsGetRequest
     * @description CreditFreddieMacReportsGetRequest defines the request schema for `credit/asset_report/freddie_mac/get`
     */
    CreditFreddieMacReportsGetRequest: {
      /** @description A token that can be shared with a third party auditor to allow them to obtain access to the Asset Report. This token should be stored securely. */
      audit_copy_token: string;
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * CreditFreddieMacReportsGetResponse
     * @description CreditFreddieMacReportsGetResponse defines the response schema for `/credit/freddie_mac/reports/get`
     */
    CreditFreddieMacReportsGetResponse: {
      DEAL: components["schemas"]["CreditFreddieMacVerificationOfAssetsDeal"];
      request_id: components["schemas"]["RequestID"];
      /** @description The Verification Of Assets (VOA) schema version. */
      SchemaVersion: number;
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacVerificationOfAssetsDeal
     * @description An object representing an Asset Report with Freddie Mac schema.
     */
    CreditFreddieMacVerificationOfAssetsDeal: {
      LOANS: components["schemas"]["CreditFreddieMacLoans"];
      PARTIES: components["schemas"]["CreditFreddieMacParties"];
      SERVICES: components["schemas"]["CreditFreddieMacServices"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacLoans
     * @description A collection of loans that are part of a single deal.
     */
    CreditFreddieMacLoans: {
      LOAN: components["schemas"]["CreditFreddieMacLoan"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacLoan
     * @description Information specific to a mortgage loan agreement between one or more borrowers and a mortgage lender.
     */
    CreditFreddieMacLoan: {
      LOAN_IDENTIFIERS: components["schemas"]["CreditFreddieMacLoanIdentifiers"];
      /** @description Type of loan. The value can only be "SubjectLoan" */
      LoanRoleType: string;
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacLoanIdentifiers
     * @description Collection of current and previous identifiers for this loan.
     */
    CreditFreddieMacLoanIdentifiers: {
      LOAN_IDENTIFIER: components["schemas"]["LoanIdentifier"][];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacServices
     * @description A collection of objects that describe requests and responses for services.
     */
    CreditFreddieMacServices: {
      SERVICE: components["schemas"]["CreditFreddieMacService"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacService
     * @description A collection of details related to a fulfillment service or product in terms of request, process and result.
     */
    CreditFreddieMacService: {
      VERIFICATION_OF_ASSET: components["schemas"]["CreditFreddieMacVerificationOfAsset"][];
      STATUSES: components["schemas"]["Statuses"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacVerificationOfAsset
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    CreditFreddieMacVerificationOfAsset: {
      REPORTING_INFORMATION: components["schemas"]["CreditFreddieMacReportingInformation"];
      SERVICE_PRODUCT_FULFILLMENT: components["schemas"]["ServiceProductFulfillment"];
      VERIFICATION_OF_ASSET_RESPONSE: components["schemas"]["CreditFreddieMacVerificationOfAssetResponse"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacReportingInformation
     * @description Information about an report identifier and a report name.
     */
    CreditFreddieMacReportingInformation: {
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ReportDateTime?: string;
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. The value can only be "ReportID" */
      ReportIdentifierType?: string;
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ReportingInformationParentIdentifier?: string;
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ReportingInformationIdentifier: string;
      [key: string]: unknown;
    };
    /**
     * VerificationOfAssetResponse
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    CreditFreddieMacVerificationOfAssetResponse: {
      ASSETS: components["schemas"]["CreditFreddieMacAssets"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacAssets
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    CreditFreddieMacAssets: {
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ASSET: components["schemas"]["CreditFreddieMacAsset"][];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacAsset
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    CreditFreddieMacAsset: {
      ASSET_DETAIL: components["schemas"]["AssetDetail"];
      ASSET_OWNERS: components["schemas"]["AssetOwners"];
      ASSET_HOLDER: components["schemas"]["AssetHolder"];
      ASSET_TRANSACTIONS: components["schemas"]["CreditFreddieMacAssetTransactions"];
      VALIDATION_SOURCES: components["schemas"]["ValidationSources"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacAssetTransactions
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    CreditFreddieMacAssetTransactions: {
      ASSET_TRANSACTION: components["schemas"]["CreditFreddieMacAssetTransaction"][];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacAssetTransaction
     * @description An object representing...
     */
    CreditFreddieMacAssetTransaction: {
      ASSET_TRANSACTION_DETAIL: components["schemas"]["AssetTransactionDetail"];
      /** @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac. */
      ASSET_TRANSACTION_DESCRIPTION: components["schemas"]["AssetTransactionDescription"][];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacParties
     * @description A collection of objects that define specific parties to a deal. This includes the direct participating parties, such as borrower and seller and the indirect parties such as the credit report provider.
     */
    CreditFreddieMacParties: {
      PARTY: components["schemas"]["CreditFreddieMacParty"][];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacParty
     * @description A collection of information about a single party to a transaction. Included direct participants like the borrower and seller as well as indirect participants such as the flood certificate provider.
     */
    CreditFreddieMacParty: {
      INDIVIDUAL: components["schemas"]["CreditFreddieMacPartyIndividual"];
      ROLES: components["schemas"]["Roles"];
      TAXPAYER_IDENTIFIERS: components["schemas"]["TaxpayerIdentifiers"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacPartyIndividual
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    CreditFreddieMacPartyIndividual: {
      NAME: components["schemas"]["CreditFreddieMacIndividualName"];
      [key: string]: unknown;
    };
    /**
     * CreditFreddieMacIndividualName
     * @description Documentation not found in the MISMO model viewer and not provided by Freddie Mac.
     */
    CreditFreddieMacIndividualName: {
      /** @description The first name of the individual represented by the parent object. */
      FirstName: string;
      /** @description The last name of the individual represented by the parent object. */
      LastName: string;
      /** @description The middle name of the individual represented by the parent object. */
      MiddleName: string;
      [key: string]: unknown;
    };
    /** @description ItemGetRequest defines the request schema for `/item/get` */
    ItemGetRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemGetResponse defines the response schema for `/item/get` and `/item/webhook/update` */
    ItemGetResponse: {
      item: components["schemas"]["Item"];
      status?: components["schemas"]["ItemStatusNullable"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ItemRemoveRequest defines the request schema for `/item/remove` */
    ItemRemoveRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemRemoveResponse defines the response schema for `/item/remove` */
    ItemRemoveResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ItemWebhookUpdateRequest defines the request schema for `/item/webhook/update` */
    ItemWebhookUpdateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
      /** @description The new webhook URL to associate with the Item. To remove a webhook from an Item, set to `null`. */
      webhook?: string | null;
    };
    /** @description ItemWebhookUpdateResponse defines the response schema for `/item/webhook/update` */
    ItemWebhookUpdateResponse: {
      item: components["schemas"]["Item"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ItemAccessTokenInvalidateRequest defines the request schema for `/item/access_token/invalidate` */
    ItemAccessTokenInvalidateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemAccessTokenInvalidateResponse defines the response schema for `/item/access_token/invalidate` */
    ItemAccessTokenInvalidateResponse: {
      new_access_token: components["schemas"]["AccessToken"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ItemPublicTokenExchangeRequest defines the request schema for `/item/public_token/exchange` */
    ItemPublicTokenExchangeRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Your `public_token`, obtained from the Link `onSuccess` callback or `/sandbox/item/public_token/create`. */
      public_token: string;
    };
    /** @description ItemPublicTokenExchangeResponse defines the response schema for `/item/public_token/exchange` */
    ItemPublicTokenExchangeResponse: {
      access_token: components["schemas"]["AccessToken"];
      /** @description The `item_id` value of the Item associated with the returned `access_token` */
      item_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ItemPublicTokenCreateRequest defines the request schema for `/item/public_token/create` */
    ItemPublicTokenCreateRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      access_token: components["schemas"]["AccessToken"];
    };
    /** @description ItemPublicTokenCreateResponse defines the response schema for `/item/public_token/create` */
    ItemPublicTokenCreateResponse: {
      /** @description A `public_token` for the particular Item corresponding to the specified `access_token` */
      public_token: string;
      /** Format: date-time */
      expiration?: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description ItemImportRequest defines the request schema for `/item/import` */
    ItemImportRequest: {
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Array of product strings */
      products: components["schemas"]["Products"][];
      user_auth: components["schemas"]["ItemImportRequestUserAuth"];
      options?: components["schemas"]["ItemImportRequestOptions"];
    };
    /** @description An optional object to configure `/item/import` request. */
    ItemImportRequestOptions: {
      /** @description Specifies a webhook URL to associate with an Item. Plaid fires a webhook if credentials fail. */
      webhook?: string;
    };
    /** @description Object of user ID and auth token pair, permitting Plaid to aggregate a user’s accounts */
    ItemImportRequestUserAuth: {
      /** @description Opaque user identifier */
      user_id: string;
      /** @description Authorization token Plaid will use to aggregate this user’s accounts */
      auth_token: string;
    };
    /** @description ItemImportResponse defines the response schema for `/item/import` */
    ItemImportResponse: {
      access_token: components["schemas"]["AccessToken"];
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /** @description Metadata about the Item. */
    Item: {
      /** @description The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
      item_id: string;
      /** @description The Plaid Institution ID associated with the Item. Field is `null` for Items created via Same Day Micro-deposits. */
      institution_id?: string | null;
      /** @description The URL registered to receive webhooks for the Item. */
      webhook: string | null;
      error: components["schemas"]["PlaidError"];
      /** @description A list of products available for the Item that have not yet been accessed. The contents of this array will be mutually exclusive with `billed_products`. */
      available_products: components["schemas"]["Products"][];
      /** @description A list of products that have been billed for the Item. The contents of this array will be mutually exclusive with `available_products`. Note - `billed_products` is populated in all environments but only requests in Production are billed. Also note that products that are billed on a pay-per-call basis rather than a pay-per-Item basis, such as `balance`, will not appear here. */
      billed_products: components["schemas"]["Products"][];
      /** @description A list of products added to the Item. In almost all cases, this will be the same as the `billed_products` field. For some products, it is possible for the product to be added to an Item but not yet billed (e.g. Assets, before `/asset_report/create` has been called, or Auth or Identity when added as Optional Products but before their endpoints have been called), in which case the product may appear in `products` but not in `billed_products`. */
      products?: components["schemas"]["Products"][];
      /** @description A list of products that have gone through consent collection for the Item. Only present for those enabled in the [Data Transparency](https://plaid.com/docs/link/data-transparency-messaging-migration-guide) beta. If you are not enrolled in Data Transparency, this field is not used. */
      consented_products?: components["schemas"]["Products"][];
      /**
       * Format: date-time
       * @description The RFC 3339 timestamp after which the consent provided by the end user will expire. Upon consent expiration, the item will enter the `ITEM_LOGIN_REQUIRED` error state. To circumvent the `ITEM_LOGIN_REQUIRED` error and maintain continuous consent, the end user can reauthenticate via Link’s update mode in advance of the consent expiration time.
       *
       * Note - This is only relevant for certain OAuth-based institutions. For all other institutions, this field will be null.
       */
      consent_expiration_time: string | null;
      /**
       * @description Indicates whether an Item requires user interaction to be updated, which can be the case for Items with some forms of two-factor authentication.
       *
       * `background` - Item can be updated in the background
       *
       * `user_present_required` - Item requires user interaction to be updated
       * @enum {string}
       */
      update_type: "background" | "user_present_required";
      [key: string]: unknown;
    };
    /**
     * ItemStatus
     * @description An object with information about the status of the Item.
     */
    ItemStatus: {
      investments?: components["schemas"]["ItemStatusInvestments"];
      transactions?: components["schemas"]["ItemStatusTransactions"];
      last_webhook?: components["schemas"]["ItemStatusLastWebhook"];
      [key: string]: unknown;
    } | null;
    /** @description Information about the last successful and failed transactions update for the Item. */
    ItemStatusNullable: (components["schemas"]["ItemStatus"] & {
      [key: string]: unknown;
    }) | null;
    /** @description Information about the last successful and failed transactions update for the Item. */
    ItemStatusTransactions: ({
      /**
       * Format: date-time
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful transactions update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.
       */
      last_successful_update?: string | null;
      /**
       * Format: date-time
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed transactions update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.
       */
      last_failed_update?: string | null;
      [key: string]: unknown;
    }) | null;
    /** @description Information about the last successful and failed investments update for the Item. */
    ItemStatusInvestments: ({
      /**
       * Format: date-time
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last successful investments update for the Item. The status will update each time Plaid successfully connects with the institution, regardless of whether any new data is available in the update.
       */
      last_successful_update?: string | null;
      /**
       * Format: date-time
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of the last failed investments update for the Item. The status will update each time Plaid fails an attempt to connect with the institution, regardless of whether any new data is available in the update.
       */
      last_failed_update?: string | null;
      [key: string]: unknown;
    }) | null;
    /** @description Information about the last webhook fired for the Item. */
    ItemStatusLastWebhook: ({
      /**
       * Format: date-time
       * @description [ISO 8601](https://wikipedia.org/wiki/ISO_8601) timestamp of when the webhook was fired.
       */
      sent_at?: string | null;
      /** @description The last webhook code sent. */
      code_sent?: string | null;
      [key: string]: unknown;
    }) | null;
    /**
     * Notification Category
     * @description Category of Notification
     * @enum {string}
     */
    FDXNotificationCategory: "SECURITY" | "MAINTENANCE" | "FRAUD" | "CONSENT" | "NEW_DATA";
    /**
     * Timestamp
     * Format: date-time
     * @description ISO 8601 date-time in format 'YYYY-MM-DDThh:mm:ss.nnn[Z|[+|-]hh:mm]' according to [IETF RFC3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14)
     * @example 2021-07-15T14:46:41.375Z
     */
    FDXTimestamp: string;
    /**
     * Notification Type
     * @description Type of Notification
     * @enum {string}
     */
    FDXNotificationType: "CONSENT_REVOKED" | "CONSENT_UPDATED" | "CUSTOM" | "SERVICE" | "BALANCE" | "PLANNED_OUTAGE";
    /**
     * Notification Severity
     * @description Severity level of notification
     * @enum {string}
     */
    FDXNotificationSeverity: "EMERGENCY" | "ALERT" | "WARNING" | "NOTICE" | "INFO";
    /**
     * Notification Priority
     * @description Priority of notification
     * @enum {string}
     */
    FDXNotificationPriority: "HIGH" | "MEDIUM" | "LOW";
    /**
     * Party Type
     * @description Identifies the type of a party
     * @enum {string}
     */
    FDXPartyType: "DATA_ACCESS_PLATFORM" | "DATA_PROVIDER" | "DATA_RECIPIENT" | "INDIVIDUAL" | "MERCHANT" | "VENDOR";
    /**
     * Party Registry
     * @description The registry containing the party’s registration with name and id
     * @enum {string}
     */
    FDXPartyRegistry: "FDX" | "GLEIF" | "ICANN" | "PRIVATE";
    /**
     * Party entity
     * @description FDX Participant - an entity or person that is a part of a FDX API transaction
     */
    FDXParty: {
      /** @description Human recognizable common name */
      name: string;
      type: components["schemas"]["FDXPartyType"];
      /**
       * Format: uri
       * @description URI for party, where an end user could learn more about the company or application involved in the data sharing chain
       */
      homeUri?: string;
      /**
       * Format: uri
       * @description URI for a logo asset to be displayed to the end user
       */
      logoUri?: string;
      registry?: components["schemas"]["FDXPartyRegistry"];
      /** @description Registered name of party */
      registeredEntityName?: string;
      /** @description Registered id of party */
      registeredEntityId?: string;
    };
    /**
     * Notification Payload Id Type
     * @description Type of entity causing origination of a notification
     * @enum {string}
     */
    FDXNotificationPayloadIdType: "ACCOUNT" | "CUSTOMER" | "PARTY" | "MAINTENANCE" | "CONSENT";
    /**
     * Initiator Fi Attribute
     * @description Initiator Fi Attribute
     */
    FDXInitiatorFiAttribute: {
      name?: string;
      value?: components["schemas"]["FDXPartyType"];
    };
    /**
     * FI Attribute entity
     * @description Financial Institution provider-specific attribute
     */
    FDXFiAttribute: {
      /** @description Name of attribute */
      name: string;
      /** @description Value of attribute */
      value: string;
    };
    /**
     * Notification Payload entity
     * @description Custom key-value pairs payload for a notification
     */
    FDXNotificationPayload: {
      /** @description ID for the origination entity related to the notification */
      id?: string;
      idType?: components["schemas"]["FDXNotificationPayloadIdType"];
      customFields?: components["schemas"]["FDXFiAttribute"][];
    };
    /**
     * @description HTTP Method to use for the request
     * @enum {string}
     */
    FDXHateoasLinkAction: "GET" | "POST" | "PATCH" | "DELETE" | "PUT";
    /**
     * HATEOAS Link
     * @description REST application constraint (Hypermedia As The Engine Of Application State)
     */
    FDXHateoasLink: {
      /**
       * Format: uri-reference
       * @description URL to invoke the action on the resource
       * @example https://api.fi.com/fdx/v4/accounts/12345
       */
      href: string;
      action?: components["schemas"]["FDXHateoasLinkAction"];
      /** @description Relation of this link to its containing entity, as defined by and with many example relation values at [IETF RFC5988](https://datatracker.ietf.org/doc/html/rfc5988) */
      rel?: string;
      /** @description Content-types that can be used in the Accept header */
      types?: components["schemas"]["FDXContentTypes"][];
    };
    /**
     * Content Types
     * @description Types of document formats. (Suggested values)
     * @enum {string}
     */
    FDXContentTypes: "application/pdf" | "image/gif" | "image/jpeg" | "image/tiff" | "image/png" | "application/json";
    /**
     * FDX Notification entity
     * @description Provides the base fields of a notification. Clients will read the `type` property to determine the expected notification payload
     */
    FDXNotification: {
      /** @description Id of notification */
      notificationId: string;
      type: components["schemas"]["FDXNotificationType"];
      sentOn: components["schemas"]["FDXTimestamp"];
      category: components["schemas"]["FDXNotificationCategory"];
      severity?: components["schemas"]["FDXNotificationSeverity"];
      priority?: components["schemas"]["FDXNotificationPriority"];
      publisher?: components["schemas"]["FDXParty"];
      subscriber?: components["schemas"]["FDXParty"];
      notificationPayload: components["schemas"]["FDXNotificationPayload"];
      url?: components["schemas"]["FDXHateoasLink"];
    };
    /**
     * StatementsListRequest
     * @description StatementsListRequest defines the request schema for `/statements/list`
     */
    StatementsListRequest: {
      access_token: components["schemas"]["AccessToken"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
    };
    /**
     * StatementsListResponse
     * @description StatementsListResponse defines the response schema for `/statements/list`
     */
    StatementsListResponse: {
      accounts: components["schemas"]["StatementsAccount"][];
      /** @description The Plaid Institution ID associated with the Item. */
      institution_id: string;
      /** @description The name of the institution associated with the Item. */
      institution_name: string;
      /** @description The Plaid Item ID. The `item_id` is always unique; linking the same account at the same institution twice will result in two Items with different `item_id` values. Like all Plaid identifiers, the `item_id` is case-sensitive. */
      item_id: string;
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
    /**
     * StatementsAccount
     * @description Account associated with the Item.
     */
    StatementsAccount: {
      /** @description Plaid's unique identifier for the account. */
      account_id: string;
      /** @description The name of the account, either assigned by the user or by the financial institution itself. */
      account_name: string;
      /** @description The type of account. Possible values are investment, credit, depository, loan, brokerage, other. */
      account_type: string;
      /** @description The list of statements' metadata associated with this account. */
      statements: components["schemas"]["StatementsStatement"][];
      [key: string]: unknown;
    };
    /**
     * StatementsStatement
     * @description A statement's metadata associated with an account
     */
    StatementsStatement: {
      /** @description Plaid's unique identifier for the statement. */
      statement_id: string;
      /** @description Month of the year. Possible values: 1 through 12 (January through December). */
      month: number;
      /** @description The year of statement. */
      year: number;
      [key: string]: unknown;
    };
    /**
     * StatementsDownloadRequest
     * @description StatementsDownloadRequest defines the request schema for `/statements/download`
     */
    StatementsDownloadRequest: {
      access_token: components["schemas"]["AccessToken"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /** @description Plaid's unique identifier for the statements. */
      statement_id: string;
    };
    /**
     * StatementsDownloadResponse
     * Format: binary
     * @description StatementsDownloadResponse defines the response schema for `/statements/download`. The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your systems.
     */
    StatementsDownloadResponse: string;
    /**
     * StatementsRefreshRequest
     * @description StatementsRefreshRequest defines the request schema for `/statements/refresh`
     */
    StatementsRefreshRequest: {
      access_token: components["schemas"]["AccessToken"];
      client_id?: components["schemas"]["APIClientID"];
      secret?: components["schemas"]["APISecret"];
      /**
       * Format: date
       * @description The start date for statements, in “YYYY-MM-DD” format, e.g. "2023-08-30". To determine whether a statement falls within the specified date range, Plaid will use the statement posted date. The statement posted date is typically either the last day of the statement period, or the following day.
       */
      start_date: string;
      /**
       * Format: date
       * @description The end date for statements, in “YYYY-MM-DD” format, e.g. "2023-10-30". You can request up to two years of data. To determine whether a statement falls within the specified date range, Plaid will use the statement posted date. The statement posted date is typically either the last day of the statement period, or the following day.
       */
      end_date: string;
    };
    /**
     * StatementsRefreshResponse
     * @description StatementsRefreshResponse defines the response schema for `/statements/refresh`
     */
    StatementsRefreshResponse: {
      request_id: components["schemas"]["RequestID"];
      [key: string]: unknown;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Create an Asset Report
   * @description The `/asset_report/create` endpoint initiates the process of creating an Asset Report, which can then be retrieved by passing the `asset_report_token` return value to the `/asset_report/get` or `/asset_report/pdf/get` endpoints.
   *
   * The Asset Report takes some time to be created and is not available immediately after calling `/asset_report/create`. The exact amount of time to create the report will vary depending on how many days of history are requested and will typically range from a few seconds to about one minute. When the Asset Report is ready to be retrieved using `/asset_report/get` or `/asset_report/pdf/get`, Plaid will fire a `PRODUCT_READY` webhook. For full details of the webhook schema, see [Asset Report webhooks](https://plaid.com/docs/api/products/assets/#webhooks).
   *
   * The `/asset_report/create` endpoint creates an Asset Report at a moment in time. Asset Reports are immutable. To get an updated Asset Report, use the `/asset_report/refresh` endpoint.
   */
  assetReportCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportCreateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve an Asset Report
   * @description The `/asset_report/get` endpoint retrieves the Asset Report in JSON format. Before calling `/asset_report/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
   *
   * By default, an Asset Report includes transaction descriptions as returned by the bank, as opposed to parsed and categorized by Plaid. You can also receive cleaned and categorized transactions, as well as additional insights like merchant name or location information. We call this an Asset Report with Insights. An Asset Report with Insights provides transaction category, location, and merchant information in addition to the transaction strings provided in a standard Asset Report. To retrieve an Asset Report with Insights, call `/asset_report/get` endpoint with `include_insights` set to `true`.
   *
   * For latency-sensitive applications, you can optionally call `/asset_report/create` with `options.add_ons` set to `["fast_assets"]`. This will cause Plaid to create two versions of the Asset Report: one with only current and available balance and identity information, and then later on the complete Asset Report. You will receive separate webhooks for each version of the Asset Report.
   */
  assetReportGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve a PDF Asset Report
   * @description The `/asset_report/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/asset_report/pdf/get`, you must first create the Asset Report using `/asset_report/create` (or filter an Asset Report using `/asset_report/filter`) and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
   *
   * The response to `/asset_report/pdf/get` is the PDF binary data. The `request_id`  is returned in the `Plaid-Request-ID` header.
   *
   * [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
   */
  assetReportPdfGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportPDFGetRequest"];
      };
    };
    responses: {
      /** @description A PDF of the Asset Report */
      200: {
        content: {
          "application/pdf": components["schemas"]["AssetReportPDFGetResponse"];
        };
      };
    };
  };
  /**
   * Refresh an Asset Report
   * @description An Asset Report is an immutable snapshot of a user's assets. In order to "refresh" an Asset Report you created previously, you can use the `/asset_report/refresh` endpoint to create a new Asset Report based on the old one, but with the most recent data available.
   *
   * The new Asset Report will contain the same Items as the original Report, as well as the same filters applied by any call to `/asset_report/filter`. By default, the new Asset Report will also use the same parameters you submitted with your original `/asset_report/create` request, but the original `days_requested` value and the values of any parameters in the `options` object can be overridden with new values. To change these arguments, simply supply new values for them in your request to `/asset_report/refresh`. Submit an empty string ("") for any previously-populated fields you would like set as empty.
   */
  assetReportRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRefreshRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportRefreshResponse"];
        };
      };
    };
  };
  /**
   * Filter Asset Report
   * @description By default, an Asset Report will contain all of the accounts on a given Item. In some cases, you may not want the Asset Report to contain all accounts. For example, you might have the end user choose which accounts are relevant in Link using the Account Select view, which you can enable in the dashboard. Or, you might always exclude certain account types or subtypes, which you can identify by using the `/accounts/get` endpoint. To narrow an Asset Report to only a subset of accounts, use the `/asset_report/filter` endpoint.
   *
   * To exclude certain Accounts from an Asset Report, first use the `/asset_report/create` endpoint to create the report, then send the `asset_report_token` along with a list of `account_ids` to exclude to the `/asset_report/filter` endpoint, to create a new Asset Report which contains only a subset of the original Asset Report's data.
   *
   * Because Asset Reports are immutable, calling `/asset_report/filter` does not alter the original Asset Report in any way; rather, `/asset_report/filter` creates a new Asset Report with a new token and id. Asset Reports created via `/asset_report/filter` do not contain new Asset data, and are not billed.
   *
   * Plaid will fire a [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook once generation of the filtered Asset Report has completed.
   */
  assetReportFilter: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportFilterRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportFilterResponse"];
        };
      };
    };
  };
  /**
   * Delete an Asset Report
   * @description The `/item/remove` endpoint allows you to invalidate an `access_token`, meaning you will not be able to create new Asset Reports with it. Removing an Item does not affect any Asset Reports or Audit Copies you have already created, which will remain accessible until you remove them specifically.
   *
   * The `/asset_report/remove` endpoint allows you to remove an Asset Report. Removing an Asset Report invalidates its `asset_report_token`, meaning you will no longer be able to use it to access Report data or create new Audit Copies. Removing an Asset Report does not affect the underlying Items, but does invalidate any `audit_copy_tokens` associated with the Asset Report.
   */
  assetReportRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportRemoveRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportRemoveResponse"];
        };
      };
    };
  };
  /**
   * Create Asset Report Audit Copy
   * @description Plaid can provide an Audit Copy of any Asset Report directly to a participating third party on your behalf. For example, Plaid can supply an Audit Copy directly to Fannie Mae on your behalf if you participate in the Day 1 Certainty™ program. An Audit Copy contains the same underlying data as the Asset Report.
   *
   * To grant access to an Audit Copy, use the `/asset_report/audit_copy/create` endpoint to create an `audit_copy_token` and then pass that token to the third party who needs access. Each third party has its own `auditor_id`, for example `fannie_mae`. You’ll need to create a separate Audit Copy for each third party to whom you want to grant access to the Report.
   */
  assetReportAuditCopyCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportAuditCopyCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportAuditCopyCreateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve an Asset Report Audit Copy
   * @description `/asset_report/audit_copy/get` allows auditors to get a copy of an Asset Report that was previously shared via the `/asset_report/audit_copy/create` endpoint.  The caller of `/asset_report/audit_copy/create` must provide the `audit_copy_token` to the auditor.  This token can then be used to call `/asset_report/audit_copy/create`.
   */
  assetReportAuditCopyGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportAuditCopyGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportGetResponse"];
        };
      };
    };
  };
  /**
   * Remove Asset Report Audit Copy
   * @description The `/asset_report/audit_copy/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Asset Report, the Asset Report itself and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
   */
  assetReportAuditCopyRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportAuditCopyRemoveRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportAuditCopyRemoveResponse"];
        };
      };
    };
  };
  /**
   * Retrieve a Base Report
   * @description This endpoint allows the customer to retrieve a Base Report. Customers should pass in the `user_token` created in `/link/token/create`.
   */
  baseReportGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BaseReportGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BaseReportGetResponse"];
        };
      };
    };
  };
  /**
   * Update an Audit Copy Token
   * @description The `/credit/audit_copy_token/update` endpoint updates an existing  Audit Copy Token by adding the report tokens in the `report_tokens` field to the `audit_copy_token`. If the Audit Copy Token already contains a report of a certain type, it will be replaced with the token provided in the `report_tokens` field.
   */
  creditAuditCopyTokenUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditAuditCopyTokenUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditAuditCopyTokenUpdateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve information from the bank accounts used for income verification
   * @description `/cra/bank_income/get` returns the bank income report(s) for a specified user.
   */
  craBankIncomeGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CraBankIncomeGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CraBankIncomeGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve a list of all statements associated with the provided item.
   * @description The `/statements/list` endpoint retrieves a list of all statements associated with the provided item.
   */
  statementsList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatementsListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StatementsListResponse"];
        };
      };
    };
  };
  /**
   * Retrieve a single statement.
   * @description The `/statements/download` endpoint retrieves a single statement PDF in binary format.  The response will contain a `Plaid-Content-Hash` header containing a SHA 256 checksum of the statement. This can be used to verify that the file being sent by Plaid is the same file that was downloaded to your system.
   */
  statementsDownload: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["StatementsDownloadRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["StatementsDownloadResponse"];
        };
      };
    };
  };
  /**
   * List a historical log of user consent events
   * @description List a historical log of user consent events
   */
  itemActivityList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemActivityListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemActivityListResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List a user’s connected applications
   * @description List a user’s connected applications
   */
  itemApplicationList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemApplicationListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemApplicationListResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Unlink a user’s connected application
   * @description Unlink a user’s connected application. On an unlink request, Plaid will immediately revoke the Application’s access to the User’s data.  The User will have to redo the OAuth authentication process in order to restore functionality.
   *
   * This endpoint only removes ongoing data access permissions, therefore the User will need to reach out to the Application itself in order to disable and delete their account and delete any data that the Application already received (if the Application does not do so by default).
   *
   * This endpoint should be called in real time as the User is unlinking an Application, and should not be batched in order to ensure that the change is reflected as soon as possible.
   */
  itemApplicationUnlink: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemApplicationUnlinkRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemApplicationUnlinkResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Update the scopes of access for a particular application
   * @description Enable consumers to update product access on selected accounts for an application.
   */
  itemApplicationScopesUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemApplicationScopesUpdateRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["ItemApplicationScopesUpdateResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve information about a Plaid application
   * @description Allows financial institutions to retrieve information about Plaid clients for the purpose of building control-tower experiences
   */
  applicationGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplicationGetRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["ApplicationGetResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve an Item
   * @description Returns information about the status of an Item.
   */
  itemGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemGetRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["ItemGetResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve auth data
   * @description The `/auth/get` endpoint returns the bank account and bank identification numbers (such as routing numbers, for US accounts) associated with an Item's checking and savings accounts, along with high-level account data and balances when available.
   *
   * Note: This request may take some time to complete if `auth` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
   *
   * Versioning note: In API version 2017-03-08, the schema of the `numbers` object returned by this endpoint is substantially different. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2018-05-22).
   */
  authGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthGetRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["AuthGetResponse"];
        };
      };
      /** @description Default error */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get transaction data
   * @description Note: All new implementations are encouraged to use `/transactions/sync` rather than `/transactions/get`. `/transactions/sync` provides the same functionality as `/transactions/get` and improves developer ease-of-use for handling transactions updates.
   *
   * The `/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from investments accounts, use the [Investments endpoint](https://plaid.com/docs/api/products/investments/) instead. Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.
   *
   * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).
   *
   * Due to the potentially large number of transactions associated with an Item, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.
   *
   * Data returned by `/transactions/get` will be the data available for the Item as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, you can use the `/transactions/refresh` endpoint.
   *
   * Note that data may not be immediately available to `/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/transactions/get`, if it wasn't. To be alerted when transaction data is ready to be fetched, listen for the [`INITIAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#initial_update) and [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhooks. If no transaction history is ready when `/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
   */
  transactionsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Refresh transaction data
   * @description `/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled Item. If changes to transactions are discovered after calling `/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/transactions/sync` and `/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/transactions/get` or `/transactions/sync`. Note that the `/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on an Item from that institution.
   *
   * `/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
   */
  transactionsRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRefreshRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRefreshResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Fetch recurring transaction streams
   * @description The `/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.
   *
   * This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
   *
   * This endpoint can only be called on an Item that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/transactions/get` or `/transactions/sync`). Once all historical transactions have been fetched, call `/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.
   *
   * After the initial call, you can call `/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
   */
  transactionsRecurringGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRecurringGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRecurringGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get incremental transaction updates on an Item
   * @description The `/transactions/sync` endpoint allows developers to subscribe to all transactions associated with an Item and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen.
   *
   * `/transactions/sync` provides the same functionality as `/transactions/get` and can be used instead of `/transactions/get` to simplify the process of tracking transactions updates. To learn more about migrating from `/transactions/get`, see the [Transactions Sync migration guide](https://plaid.com/docs/transactions/sync-migration/).
   *
   * This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.
   *
   * Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.
   *
   * In the first call to `/transactions/sync` for an Item, the endpoint will return all historical transactions data associated with that Item up until the time of the API call (as "adds"), which then generates a `next_cursor` for that Item. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.
   *
   * Due to the potentially large number of transactions associated with an Item, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.
   *
   * When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/transactions/sync` fails due to the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.
   *
   * Whenever new or updated transaction data becomes available, `/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. An Item's `status.transactions.last_successful_update` field will show the timestamp of the most recent successful update. To force Plaid to check for new transactions, use the `/transactions/refresh` endpoint.
   *
   * For newly created Items, data may not be immediately available to `/transactions/sync`. Plaid begins preparing transactions data when the Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
   *
   * To be alerted when new data is available, listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) webhook.
   *
   * `/transactions/sync` does not directly return balance data. To get the balance for an account, call `/accounts/get`, which is a free-to-use endpoint that will return the cached balance as of the last successful transactions update.
   */
  transactionsSync: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsSyncRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsSyncResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Enrich locally-held transaction data
   * @description The `/transactions/enrich` endpoint enriches raw transaction data generated by your own banking products or retrieved from other non-Plaid sources.
   */
  transactionsEnrich: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsEnrichRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsEnrichResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get details of all supported institutions
   * @description Returns a JSON response containing details on all financial institutions currently supported by Plaid. Because Plaid supports thousands of institutions, results are paginated.
   *
   * If there is no overlap between an institution’s enabled products and a client’s enabled products, then the institution will be filtered out from the response. As a result, the number of institutions returned may not match the count specified in the call.
   */
  institutionsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionsGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Search institutions
   * @description Returns a JSON response containing details for institutions that match the query parameters, up to a maximum of ten institutions per query.
   *
   * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` parameters to authenticate to this endpoint. The `public_key` parameter has since been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
   */
  institutionsSearch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionsSearchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionsSearchResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get details of an institution
   * @description Returns a JSON response containing details on a specified financial institution currently supported by Plaid.
   *
   * Versioning note: API versions 2019-05-29 and earlier allow use of the `public_key` parameter instead of the `client_id` and `secret` to authenticate to this endpoint. The `public_key` has been deprecated; all customers are encouraged to use `client_id` and `secret` instead.
   */
  institutionsGetById: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InstitutionsGetByIdRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InstitutionsGetByIdResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Remove an Item
   * @description The `/item/remove` endpoint allows you to remove an Item. Once removed, the `access_token`, as well as any processor tokens or bank account tokens associated with the Item, is no longer valid and cannot be used to access any data that was associated with the Item.
   *
   * Note that in the Development environment, issuing an `/item/remove`  request will not decrement your live credential count. To increase your credential account in Development, contact Support.
   *
   * Also note that for certain OAuth-based institutions, an Item removed via `/item/remove` may still show as an active connection in the institution's OAuth permission manager.
   *
   * API versions 2019-05-29 and earlier return a `removed` boolean as part of the response.
   */
  itemRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemRemoveRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["ItemRemoveResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve accounts
   * @description The `/accounts/get` endpoint can be used to retrieve a list of accounts associated with any linked Item. Plaid will only return active bank accounts — that is, accounts that are not closed and are capable of carrying a balance.
   * For items that went through the updated account selection pane, this endpoint only returns accounts that were permissioned by the user when they initially created the Item. If a user creates a new account after the initial link, you can capture this event through the [`NEW_ACCOUNTS_AVAILABLE`](https://plaid.com/docs/api/items/#new_accounts_available) webhook and then use Link's [update mode](https://plaid.com/docs/link/update-mode/) to request that the user share this new account with you.
   *
   * `/accounts/get` is free to use and retrieves cached information, rather than extracting fresh information from the institution. The balance returned will reflect the balance at the time of the last successful Item update. If the Item is enabled for a regularly updating product, such as Transactions, Investments, or Liabilities, the balance will typically update about once a day, as long as the Item is healthy. If the Item is enabled only for products that do not frequently update, such as Auth or Identity, balance data may be much older.
   *
   * For realtime balance information, use the paid endpoint `/accounts/balance/get` instead.
   */
  accountsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountsGetRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["AccountsGetResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get categories
   * @description Send a request to the `/categories/get` endpoint to get detailed information on categories returned by Plaid. This endpoint does not require authentication.
   *
   * All implementations are recommended to use the newer `personal_finance_category` taxonomy instead of the older `category` taxonomy supported by this endpoint. The [`personal_finance_category taxonomy` CSV file](https://plaid.com/documents/transactions-personal-finance-category-taxonomy.csv) is available for download and is not accessible via API.
   */
  categoriesGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CategoriesGetRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["CategoriesGetResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a test Item and processor token
   * @description Use the `/sandbox/processor_token/create` endpoint to create a valid `processor_token` for an arbitrary institution ID and test credentials. The created `processor_token` corresponds to a new Sandbox Item. You can then use this `processor_token` with the `/processor/` API endpoints in Sandbox. You can also use `/sandbox/processor_token/create` with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data.
   */
  sandboxProcessorTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxProcessorTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxProcessorTokenCreateResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a test Item
   * @description Use the `/sandbox/public_token/create` endpoint to create a valid `public_token`  for an arbitrary institution ID, initial products, and test credentials. The created `public_token` maps to a new Sandbox Item. You can then call `/item/public_token/exchange` to exchange the `public_token` for an `access_token` and perform all API actions. `/sandbox/public_token/create` can also be used with the [`user_custom` test username](https://plaid.com/docs/sandbox/user-custom) to generate a test account with custom data. `/sandbox/public_token/create` cannot be used with OAuth institutions.
   */
  sandboxPublicTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxPublicTokenCreateRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxPublicTokenCreateResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Fire a test webhook
   * @description The `/sandbox/item/fire_webhook` endpoint is used to test that code correctly handles webhooks. This endpoint can trigger the following webhooks:
   *
   * `DEFAULT_UPDATE`: Transactions update webhook to be fired for a given Sandbox Item. If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
   *
   * `NEW_ACCOUNTS_AVAILABLE`: Webhook to be fired for a given Sandbox Item created with Account Select v2.
   *
   * `AUTH_DATA_UPDATE`: Webhook to be fired for a given Sandbox Item created with Auth as an enabled product.
   *
   * `LOGIN_REPAIRED`: Fired when an Item recovers from the `ITEM_LOGIN_REQUIRED` without the user going through update mode in your app.
   *
   * `RECURRING_TRANSACTIONS_UPDATE`: Recurring Transactions webhook to be fired for a given Sandbox Item. If the Item does not support Recurring Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
   *
   * `SYNC_UPDATES_AVAILABLE`: Transactions webhook to be fired for a given Sandbox Item.  If the Item does not support Transactions, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
   *
   * `PRODUCT_READY`: Assets webhook to be fired when a given asset report has been successfully generated. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
   *
   * `ERROR`: Assets webhook to be fired when asset report generation has failed. If the Item does not support Assets, a `SANDBOX_PRODUCT_NOT_ENABLED` error will result.
   *
   * Note that this endpoint is provided for developer ease-of-use and is not required for testing webhooks; webhooks will also fire in Sandbox under the same conditions that they would in Production or Development (except for webhooks of type `TRANSFER`).
   */
  sandboxItemFireWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxItemFireWebhookRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxItemFireWebhookResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve real-time balance data
   * @description The `/accounts/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints, such as `/accounts/get`, return a balance object, only `/accounts/balance/get` forces the available and current balance fields to be refreshed rather than cached. This endpoint can be used for existing Items that were added via any of Plaid’s other products. This endpoint can be used as long as Link has been initialized with any other product, `balance` itself is not a product that can be used to initialize Link. As this endpoint triggers a synchronous request for fresh data, latency may be higher than for other Plaid endpoints (typically less than 10 seconds, but occasionally up to 30 seconds or more); if you encounter errors, you may find it necessary to adjust your timeout period when making requests.
   */
  accountsBalanceGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AccountsBalanceGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountsGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve identity data
   * @description The `/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses. Only name data is guaranteed to be returned; other fields will be empty arrays if not provided by the institution.
   *
   * This request may take some time to complete if identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
   *
   * Note: In API versions 2018-05-22 and earlier, the `owners` object is not returned, and instead identity information is returned in the top level `identity` object. For more details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2019-05-29).
   */
  identityGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve identity match score
   * @description The `/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.
   *
   * Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
   *
   * This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
   */
  identityMatch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityMatchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityMatchResponse"];
        };
      };
    };
  };
  /**
   * Refresh identity data
   * @description `/identity/refresh` is an optional endpoint for users of the Identity product. It initiates an on-demand extraction to fetch the most up to date Identity information from the Financial Institution. This on-demand extraction takes place in addition to the periodic extractions that automatically occur any Identity-enabled Item. If changes to Identity are discovered after calling `/identity/refresh`, Plaid will fire a webhook [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/identity/#default_update).
   * `/identity/refresh` is offered as an add-on to Identity and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
   */
  identityRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityRefreshRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityRefreshResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a dashboard user
   * @description Retrieve information about a dashboard user.
   */
  dashboardUserGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DashboardUserGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardUserGetResponse"];
        };
      };
    };
  };
  /**
   * List dashboard users
   * @description List all dashboard users associated with your account.
   */
  dashboardUserList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DashboardUserListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardUserListResponse"];
        };
      };
    };
  };
  /**
   * Create a new identity verification
   * @description Create a new Identity Verification for the user specified by the `client_user_id` field. The requirements and behavior of the verification are determined by the `template_id` provided.
   * If you don't know whether the associated user already has an active Identity Verification, you can specify `"is_idempotent": true` in the request body. With idempotency enabled, a new Identity Verification will only be created if one does not already exist for the associated `client_user_id` and `template_id`. If an Identity Verification is found, it will be returned unmodified with an `200 OK` HTTP status code.
   *
   * You can also use this endpoint to supply information you already have collected about the user; if any of these fields are specified, the screens prompting the user to enter them will be skipped during the Link flow.
   */
  identityVerificationCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityVerificationCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityVerificationCreateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve Identity Verification
   * @description Retrieve a previously created identity verification.
   */
  identityVerificationGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityVerificationGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityVerificationGetResponse"];
        };
      };
    };
  };
  /**
   * List Identity Verifications
   * @description Filter and list Identity Verifications created by your account
   */
  identityVerificationList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityVerificationListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityVerificationListResponse"];
        };
      };
    };
  };
  /**
   * Retry an Identity Verification
   * @description Allow a customer to retry their identity verification
   */
  identityVerificationRetry: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IdentityVerificationRetryRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IdentityVerificationRetryResponse"];
        };
      };
    };
  };
  /**
   * Create a watchlist screening for an entity
   * @description Create a new entity watchlist screening to check your customer against watchlists defined in the associated entity watchlist program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
   */
  watchlistScreeningEntityCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityCreateResponse"];
        };
      };
    };
  };
  /**
   * Get an entity screening
   * @description Retrieve an entity watchlist screening.
   */
  watchlistScreeningEntityGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityGetResponse"];
        };
      };
    };
  };
  /**
   * List history for entity watchlist screenings
   * @description List all changes to the entity watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
   */
  watchlistScreeningEntityHistoryList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityHistoryListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityHistoryListResponse"];
        };
      };
    };
  };
  /**
   * List hits for entity watchlist screenings
   * @description List all hits for the entity watchlist screening.
   */
  watchlistScreeningEntityHitList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityHitListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityHitListResponse"];
        };
      };
    };
  };
  /**
   * List entity watchlist screenings
   * @description List all entity screenings.
   */
  watchlistScreeningEntityList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityListResponse"];
        };
      };
    };
  };
  /**
   * Get entity watchlist screening program
   * @description Get an entity watchlist screening program
   */
  watchlistScreeningEntityProgramGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityProgramGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityProgramGetResponse"];
        };
      };
    };
  };
  /**
   * List entity watchlist screening programs
   * @description List all entity watchlist screening programs
   */
  watchlistScreeningEntityProgramList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityProgramListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityProgramListResponse"];
        };
      };
    };
  };
  /**
   * Create a review for an entity watchlist screening
   * @description Create a review for an entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
   */
  watchlistScreeningEntityReviewCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityReviewCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityReviewCreateResponse"];
        };
      };
    };
  };
  /**
   * List reviews for entity watchlist screenings
   * @description List all reviews for a particular entity watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
   */
  watchlistScreeningEntityReviewList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityReviewListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityReviewListResponse"];
        };
      };
    };
  };
  /**
   * Update an entity screening
   * @description Update an entity watchlist screening.
   */
  watchlistScreeningEntityUpdate: {
    /** @description The entity screening was successfully updated. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningEntityUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningEntityUpdateResponse"];
        };
      };
    };
  };
  /**
   * Create a watchlist screening for a person
   * @description Create a new Watchlist Screening to check your customer against watchlists defined in the associated Watchlist Program. If your associated program has ongoing screening enabled, this is the profile information that will be used to monitor your customer over time.
   */
  watchlistScreeningIndividualCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualCreateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve an individual watchlist screening
   * @description Retrieve a previously created individual watchlist screening
   */
  watchlistScreeningIndividualGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualGetResponse"];
        };
      };
    };
  };
  /**
   * List history for individual watchlist screenings
   * @description List all changes to the individual watchlist screening in reverse-chronological order. If the watchlist screening has not been edited, no history will be returned.
   */
  watchlistScreeningIndividualHistoryList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualHistoryListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualHistoryListResponse"];
        };
      };
    };
  };
  /**
   * List hits for individual watchlist screening
   * @description List all hits found by Plaid for a particular individual watchlist screening.
   */
  watchlistScreeningIndividualHitList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualHitListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualHitListResponse"];
        };
      };
    };
  };
  /**
   * List Individual Watchlist Screenings
   * @description List previously created watchlist screenings for individuals
   */
  watchlistScreeningIndividualList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualListResponse"];
        };
      };
    };
  };
  /**
   * Get individual watchlist screening program
   * @description Get an individual watchlist screening program
   */
  watchlistScreeningIndividualProgramGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualProgramGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualProgramGetResponse"];
        };
      };
    };
  };
  /**
   * List individual watchlist screening programs
   * @description List all individual watchlist screening programs
   */
  watchlistScreeningIndividualProgramList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualProgramListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualProgramListResponse"];
        };
      };
    };
  };
  /**
   * Create a review for an individual watchlist screening
   * @description Create a review for the individual watchlist screening. Reviews are compliance reports created by users in your organization regarding the relevance of potential hits found by Plaid.
   */
  watchlistScreeningIndividualReviewCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualReviewCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualReviewCreateResponse"];
        };
      };
    };
  };
  /**
   * List reviews for individual watchlist screenings
   * @description List all reviews for the individual watchlist screening.
   */
  watchlistScreeningIndividualReviewList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualReviewListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualReviewListResponse"];
        };
      };
    };
  };
  /**
   * Update individual watchlist screening
   * @description Update a specific individual watchlist screening. This endpoint can be used to add additional customer information, correct outdated information, add a reference id, assign the individual to a reviewer, and update which program it is associated with. Please note that you may not update `search_terms` and `status` at the same time since editing `search_terms` may trigger an automatic `status` change.
   */
  watchlistScreeningIndividualUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WatchlistScreeningIndividualUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WatchlistScreeningIndividualUpdateResponse"];
        };
      };
    };
  };
  /**
   * Create a Beacon User
   * @description Create and scan a Beacon User against your Beacon Program, according to your program's settings.
   *
   * When you submit a new user to `/beacon/user/create`, several checks are performed immediately:
   *
   *   - The user's PII (provided within the `user` object) is searched against all other users within the Beacon Program you specified. If a match is found that violates your program's "Duplicate Information Filtering" settings, the user will be returned with a status of `pending_review`.
   *
   *   - The user's PII is also searched against all fraud reports created by your organization across all of your Beacon Programs. If the user's data matches a fraud report that your team created, the user will be returned with a status of `rejected`.
   *
   *   - Finally, the user's PII is searched against all fraud report shared with the Beacon Network by other companies. If a matching fraud report is found, the user will be returned with a `pending_review` status if your program has enabled automatic flagging based on network fraud.
   */
  beaconUserCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeaconUserCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BeaconUserCreateResponse"];
        };
      };
    };
  };
  /**
   * Get a Beacon User
   * @description Fetch a Beacon User.
   *
   * The Beacon User is returned with all of their associated information and a `status` based on the Beacon Network duplicate record and fraud checks.
   */
  beaconUserGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeaconUserGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BeaconUserGetResponse"];
        };
      };
    };
  };
  /**
   * Review a Beacon User
   * @description Update the status of a Beacon User.
   *
   * When updating a Beacon User's status via this endpoint, Plaid validates that the status change is consistent with the related state for this Beacon User. Specifically, we will check:
   *
   * 1. Whether there are any associated Beacon Reports connected to the Beacon User, and
   * 2. Whether there are any confirmed Beacon Report Syndications connected to the Beacon User.
   *
   * When updating a Beacon User's status to "rejected", we enforce that either a Beacon Report has been created for the Beacon User or a Beacon Report Syndication has been confirmed.
   * When updating a Beacon User's status to "cleared", we enforce that there are no active Beacon Reports or confirmed Beacon Report Syndications associated with the user. If you previously created a Beacon Report for this user, you must delete it before updating the Beacon User's status to "cleared".
   * There are no restrictions on updating a Beacon User's status to "pending_review".
   *
   * If these conditions are not met, the request will be rejected with an error explaining the issue.
   */
  beaconUserReview: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeaconUserReviewRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BeaconUserGetResponse"];
        };
      };
    };
  };
  /**
   * Create a Beacon Report
   * @description Create a fraud report for a given Beacon User.
   *
   * Note: If you are creating users with the express purpose of providing historical fraud data, you should use the `/beacon/user/create` endpoint instead and embed the fraud report in the request. This will ensure that the Beacon User you create will not be subject to any billing costs.
   */
  beaconReportCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeaconReportCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BeaconReportCreateResponse"];
        };
      };
    };
  };
  /**
   * List Beacon Reports for a Beacon User
   * @description Use the `/beacon/report/list` endpoint to view all Beacon Reports you created for a specific Beacon User. The reports returned by this endpoint are exclusively reports you created for a specific user. A Beacon User can only have one active report at a time, but a new report can be created if a previous report has been deleted. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
   */
  beaconReportList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeaconReportListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BeaconReportListResponse"];
        };
      };
    };
  };
  /**
   * List Beacon Report Syndications for a Beacon User
   * @description Use the `/beacon/report_syndication/list` endpoint to view all Beacon Reports that have been syndicated to a specific Beacon User. This endpoint returns Beacon Report Syndications which are references to Beacon Reports created either by you, or another Beacon customer, that matched the specified Beacon User. A Beacon User can have multiple active Beacon Report Syndications at once. The results from this endpoint are paginated; the `next_cursor` field will be populated if there is another page of results that can be retrieved. To fetch the next page, pass the `next_cursor` value as the `cursor` parameter in the next request.
   */
  beaconReportSyndicationList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeaconReportSyndicationListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BeaconReportSyndicationListResponse"];
        };
      };
    };
  };
  /**
   * Get a Beacon Report
   * @description Returns a Beacon report for a given Beacon report id.
   */
  beaconReportGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeaconReportGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BeaconReportGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve Auth data
   * @description The `/processor/auth/get` endpoint returns the bank account and bank identification number (such as the routing number, for US accounts), for a checking or savings account that''s associated with a given `processor_token`. The endpoint also returns high-level account data and balances when available.
   *
   * Versioning note: API versions 2019-05-29 and earlier use a different schema for the `numbers` object returned by this endpoint. For details, see [Plaid API versioning](https://plaid.com/docs/api/versioning/#version-2020-09-14).
   */
  processorAuthGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorAuthGetRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorAuthGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve the account associated with a processor token
   * @description This endpoint returns the account associated with a given processor token.
   *
   * This endpoint retrieves cached information, rather than extracting fresh information from the institution. As a result, the account balance returned may not be up-to-date; for realtime balance information, use `/processor/balance/get` instead. Note that some information is nullable.
   */
  processorAccountGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorAccountGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorAccountGetResponse"];
        };
      };
    };
  };
  /**
   * Get transaction data
   * @description The `/processor/transactions/get` endpoint allows developers to receive user-authorized transaction data for credit, depository, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). Transaction data is standardized across financial institutions, and in many cases transactions are linked to a clean name, entity type, location, and category. Similarly, account data is standardized and returned with a clean name, number, balance, and other meta information where available.
   *
   * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.  Transactions are not immutable and can also be removed altogether by the institution; a removed transaction will no longer appear in `/processor/transactions/get`.  For more details, see [Pending and posted transactions](https://plaid.com/docs/transactions/transactions-data/#pending-and-posted-transactions).
   *
   * Due to the potentially large number of transactions associated with a processor token, results are paginated. Manipulate the `count` and `offset` parameters in conjunction with the `total_transactions` response body field to fetch all available transactions.
   *
   * Data returned by `/processor/transactions/get` will be the data available for the processor token as of the most recent successful check for new transactions. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, you can use the `/processor/transactions/refresh` endpoint.
   *
   * Note that data may not be immediately available to `/processor/transactions/get`. Plaid will begin to prepare transactions data upon Item link, if Link was initialized with `transactions`, or upon the first call to `/processor/transactions/get`, if it wasn't. If no transaction history is ready when `/processor/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
   *
   * To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
   */
  processorTransactionsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTransactionsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTransactionsGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get incremental transaction updates on a processor token
   * @description This endpoint replaces `/processor/transactions/get` and its associated webhooks for most common use-cases.
   *
   * The `/processor/transactions/sync` endpoint allows developers to subscribe to all transactions associated with a processor token and get updates synchronously in a stream-like manner, using a cursor to track which updates have already been seen. `/processor/transactions/sync` provides the same functionality as `/processor/transactions/get` and can be used instead of `/processor/transactions/get` to simplify the process of tracking transactions updates.
   *
   * This endpoint provides user-authorized transaction data for `credit`, `depository`, and some loan-type accounts (only those with account subtype `student`; coverage may be limited). For transaction history from `investments` accounts, use `/investments/transactions/get` instead.
   *
   * Returned transactions data is grouped into three types of update, indicating whether the transaction was added, removed, or modified since the last call to the API.
   *
   * In the first call to `/processor/transactions/sync` for a processor token, the endpoint will return all historical transactions data associated with that processor token up until the time of the API call (as "adds"), which then generates a `next_cursor` for that processor token. In subsequent calls, send the `next_cursor` to receive only the changes that have occurred since the previous call.
   *
   * Due to the potentially large number of transactions associated with a processor token, results are paginated. The `has_more` field specifies if additional calls are necessary to fetch all available transaction updates. Call `/processor/transactions/sync` with the new cursor, pulling all updates, until `has_more` is `false`.
   *
   * When retrieving paginated updates, track both the `next_cursor` from the latest response and the original cursor from the first call in which `has_more` was `true`; if a call to `/processor/transactions/sync` fails when retrieving a paginated update, which can occur as a result of the [`TRANSACTIONS_SYNC_MUTATION_DURING_PAGINATION`](https://plaid.com/docs/errors/transactions/#transactions_sync_mutation_during_pagination) error, the entire pagination request loop must be restarted beginning with the cursor for the first page of the update, rather than retrying only the single request that failed.
   *
   * Whenever new or updated transaction data becomes available, `/processor/transactions/sync` will provide these updates. Plaid typically checks for new data multiple times a day, but these checks may occur less frequently, such as once a day, depending on the institution. To force Plaid to check for new transactions, use the `/processor/transactions/refresh` endpoint.
   *
   * Note that for newly created processor tokens, data may not be immediately available to `/processor/transactions/sync`. Plaid begins preparing transactions data when the corresponding Item is created, but the process can take anywhere from a few seconds to several minutes to complete, depending on the number of transactions available.
   *
   * To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
   */
  processorTransactionsSync: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTransactionsSyncRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTransactionsSyncResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Refresh transaction data
   * @description `/processor/transactions/refresh` is an optional endpoint for users of the Transactions product. It initiates an on-demand extraction to fetch the newest transactions for a processor token. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Transactions-enabled processor token. If changes to transactions are discovered after calling `/processor/transactions/refresh`, Plaid will fire a webhook: for `/transactions/sync` users, [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#sync_updates_available) will be fired if there are any transactions updated, added, or removed. For users of both `/processor/transactions/sync` and `/processor/transactions/get`, [`TRANSACTIONS_REMOVED`](https://plaid.com/docs/api/products/transactions/#transactions_removed) will be fired if any removed transactions are detected, and [`DEFAULT_UPDATE`](https://plaid.com/docs/api/products/transactions/#default_update) will be fired if any new transactions are detected. New transactions can be fetched by calling `/processor/transactions/get` or `/processor/transactions/sync`. Note that the `/processor/transactions/refresh` endpoint is not supported for Capital One (`ins_128026`) and will result in a `PRODUCT_NOT_SUPPORTED` error if called on a processor token from that institution.
   *
   * `/processor/transactions/refresh` is offered as an add-on to Transactions and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
   */
  processorTransactionsRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTransactionsRefreshRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTransactionsRefreshResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Fetch recurring transaction streams
   * @description The `/processor/transactions/recurring/get` endpoint allows developers to receive a summary of the recurring outflow and inflow streams (expenses and deposits) from a user’s checking, savings or credit card accounts. Additionally, Plaid provides key insights about each recurring stream including the category, merchant, last amount, and more. Developers can use these insights to build tools and experiences that help their users better manage cash flow, monitor subscriptions, reduce spend, and stay on track with bill payments.
   *
   * This endpoint is offered as an add-on to Transactions. To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
   *
   * This endpoint can only be called on a processor token that has already been initialized with Transactions (either during Link, by specifying it in `/link/token/create`; or after Link, by calling `/processor/transactions/get` or `/processor/transactions/sync`). Once all historical transactions have been fetched, call `/processor/transactions/recurring/get` to receive the Recurring Transactions streams and subscribe to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook. To know when historical transactions have been fetched, if you are using `/processor/transactions/sync` listen for the [`SYNC_UPDATES_AVAILABLE`](https://plaid.com/docs/api/products/transactions/#SyncUpdatesAvailableWebhook-historical-update-complete) webhook and check that the `historical_update_complete` field in the payload is `true`. If using `/processor/transactions/get`, listen for the [`HISTORICAL_UPDATE`](https://plaid.com/docs/api/products/transactions/#historical_update) webhook.
   *
   * After the initial call, you can call `/processor/transactions/recurring/get` endpoint at any point in the future to retrieve the latest summary of recurring streams. Listen to the [`RECURRING_TRANSACTIONS_UPDATE`](https://plaid.com/docs/api/products/transactions/#recurring_transactions_update) webhook to be notified when new updates are available.
   *
   * To receive Transactions webhooks for a processor token, set its webhook URL via the [`/processor/token/webhook/update`](https://plaid.com/docs/api/processors/#processortokenwebhookupdate) endpoint.
   */
  processorTransactionsRecurringGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTransactionsRecurringGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTransactionsRecurringGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Evaluate a planned ACH transaction
   * @description Use `/processor/signal/evaluate` to evaluate a planned ACH transaction as a processor to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
   *
   * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/processor/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to our error documentation on [item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).
   *
   * Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time. To reduce this latency, you can call `/signal/prepare` on the Item before you need to request Signal data.
   */
  processorSignalEvaluate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorSignalEvaluateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorSignalEvaluateResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Report whether you initiated an ACH transaction
   * @description After calling `/processor/signal/evaluate`, call `/processor/signal/decision/report` to report whether the transaction was initiated.
   */
  processorSignalDecisionReport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorSignalDecisionReportRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorSignalDecisionReportResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Report a return for an ACH transaction
   * @description Call the `/processor/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/processor/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
   */
  processorSignalReturnReport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorSignalReturnReportRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorSignalReturnReportResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Opt-in a processor token to Signal
   * @description When a processor token is not initialized with Signal, call `/processor/signal/prepare` to opt-in that processor token to the Signal data collection process, which will improve the accuracy of the Signal score.
   *
   * If this endpoint is called with a processor token that is already initialized with Signal, it will return a 200 response and will not modify the processor token.
   */
  processorSignalPrepare: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorSignalPrepareRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorSignalPrepareResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a bank transfer as a processor
   * @description Use the `/processor/bank_transfer/create` endpoint to initiate a new bank transfer as a processor
   */
  processorBankTransferCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorBankTransferCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorBankTransferCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve Identity data
   * @description The `/processor/identity/get` endpoint allows you to retrieve various account holder information on file with the financial institution, including names, emails, phone numbers, and addresses.
   */
  processorIdentityGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorIdentityGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorIdentityGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve identity match score
   * @description The `/processor/identity/match` endpoint generates a match score, which indicates how well the provided identity data matches the identity information on file with the account holder's financial institution.
   *
   * Fields within the `balances` object will always be null when retrieved by `/identity/match`. Instead, use the free `/accounts/get` endpoint to request balance cached data, or `/accounts/balance/get` for real-time data.
   *
   * This request may take some time to complete if Identity was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the data.
   */
  processorIdentityMatch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorIdentityMatchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorIdentityMatchResponse"];
        };
      };
    };
  };
  /**
   * Retrieve Balance data
   * @description The `/processor/balance/get` endpoint returns the real-time balance for each of an Item's accounts. While other endpoints may return a balance object, only `/processor/balance/get` forces the available and current balance fields to be refreshed rather than cached.
   */
  processorBalanceGet: {
    /**
     * @description The `/processor/balance/get` endpoint returns the real-time balance for the account associated with a given `processor_token`.
     *
     * The current balance is the total amount of funds in the account. The available balance is the current balance less any outstanding holds or debits that have not yet posted to the account.
     *
     * Note that not all institutions calculate the available balance. In the event that available balance is unavailable from the institution, Plaid will return an available balance value of `null`.
     */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorBalanceGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorBalanceGetResponse"];
        };
      };
    };
  };
  /**
   * Update Webhook URL
   * @description The POST `/item/webhook/update` allows you to update the webhook URL associated with an Item. This request triggers a [`WEBHOOK_UPDATE_ACKNOWLEDGED`](https://plaid.com/docs/api/items/#webhook_update_acknowledged) webhook to the newly specified webhook URL.
   */
  itemWebhookUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemWebhookUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemWebhookUpdateResponse"];
        };
      };
    };
  };
  /**
   * Invalidate access_token
   * @description By default, the `access_token` associated with an Item does not expire and should be stored in a persistent, secure manner.
   *
   * You can use the `/item/access_token/invalidate` endpoint to rotate the `access_token` associated with an Item. The endpoint returns a new `access_token` and immediately invalidates the previous `access_token`.
   */
  itemAccessTokenInvalidate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemAccessTokenInvalidateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemAccessTokenInvalidateResponse"];
        };
      };
    };
  };
  /**
   * Get webhook verification key
   * @description Plaid signs all outgoing webhooks and provides JSON Web Tokens (JWTs) so that you can verify the authenticity of any incoming webhooks to your application. A message signature is included in the `Plaid-Verification` header.
   *
   * The `/webhook_verification_key/get` endpoint provides a JSON Web Key (JWK) that can be used to verify a JWT.
   */
  webhookVerificationKeyGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WebhookVerificationKeyGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WebhookVerificationKeyGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve Liabilities data
   * @description The `/liabilities/get` endpoint returns various details about an Item with loan or credit accounts. Liabilities data is available primarily for US financial institutions, with some limited coverage of Canadian institutions. Currently supported account types are account type `credit` with account subtype `credit card` or `paypal`, and account type `loan` with account subtype `student` or `mortgage`. To limit accounts listed in Link to types and subtypes supported by Liabilities, you can use the `account_filters` parameter when [creating a Link token](https://plaid.com/docs/api/tokens/#linktokencreate).
   *
   * The types of information returned by Liabilities can include balances and due dates, loan terms, and account details such as original loan amount and guarantor. Data is refreshed approximately once per day; the latest data can be retrieved by calling `/liabilities/get`.
   *
   * Note: This request may take some time to complete if `liabilities` was not specified as an initial product when creating the Item. This is because Plaid must communicate directly with the institution to retrieve the additional data.
   */
  liabilitiesGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LiabilitiesGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LiabilitiesGetResponse"];
        };
      };
    };
  };
  /**
   * Create payment recipient
   * @description Create a payment recipient for payment initiation.  The recipient must be in Europe, within a country that is a member of the Single Euro Payment Area (SEPA) or a non-Eurozone country [supported](https://plaid.com/global) by Plaid. For a standing order (recurring) payment, the recipient must be in the UK.
   *
   * It is recommended to use `bacs` in the UK and `iban` in EU.
   *
   * The endpoint is idempotent: if a developer has already made a request with the same payment details, Plaid will return the same `recipient_id`.
   */
  paymentInitiationRecipientCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationRecipientCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationRecipientCreateResponse"];
        };
      };
    };
  };
  /**
   * Reverse an existing payment
   * @description Reverse a settled payment from a Plaid virtual account.
   *
   * The original payment must be in a settled state to be refunded.
   * To refund partially, specify the amount as part of the request.
   * If the amount is not specified, the refund amount will be equal to all
   * of the remaining payment amount that has not been refunded yet.
   *
   * The refund will go back to the source account that initiated the payment.
   * The original payment must have been initiated to a Plaid virtual account
   * so that this account can be used to initiate the refund.
   */
  paymentInitiationPaymentReverse: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentReverseRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentReverseResponse"];
        };
      };
    };
  };
  /**
   * Get payment recipient
   * @description Get details about a payment recipient you have previously created.
   */
  paymentInitiationRecipientGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationRecipientGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationRecipientGetResponse"];
        };
      };
    };
  };
  /**
   * List payment recipients
   * @description The `/payment_initiation/recipient/list` endpoint list the payment recipients that you have previously created.
   */
  paymentInitiationRecipientList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationRecipientListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationRecipientListResponse"];
        };
      };
    };
  };
  /**
   * Create a payment
   * @description After creating a payment recipient, you can use the `/payment_initiation/payment/create` endpoint to create a payment to that recipient.  Payments can be one-time or standing order (recurring) and can be denominated in either EUR, GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency).  If making domestic GBP-denominated payments, your recipient must have been created with BACS numbers. In general, EUR-denominated payments will be sent via SEPA Credit Transfer, GBP-denominated payments will be sent via the Faster Payments network and for non-Eurozone markets typically via the local payment scheme, but the payment network used will be determined by the institution. Payments sent via Faster Payments will typically arrive immediately, while payments sent via SEPA Credit Transfer or other local payment schemes will typically arrive in one business day.
   *
   * Standing orders (recurring payments) must be denominated in GBP and can only be sent to recipients in the UK. Once created, standing order payments cannot be modified or canceled via the API. An end user can cancel or modify a standing order directly on their banking application or website, or by contacting the bank. Standing orders will follow the payment rules of the underlying rails (Faster Payments in UK). Payments can be sent Monday to Friday, excluding bank holidays. If the pre-arranged date falls on a weekend or bank holiday, the payment is made on the next working day. It is not possible to guarantee the exact time the payment will reach the recipient’s account, although at least 90% of standing order payments are sent by 6am.
   *
   * In the Development environment, payments must be below 5 GBP or other chosen [currency](https://plaid.com/docs/api/products/payment-initiation/#payment_initiation-payment-create-request-amount-currency). For details on any payment limits in Production, contact your Plaid Account Manager.
   */
  paymentInitiationPaymentCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentCreateResponse"];
        };
      };
    };
  };
  /**
   * Create payment token
   * @deprecated
   * @description The `/payment_initiation/payment/token/create` endpoint has been deprecated. New Plaid customers will be unable to use this endpoint, and existing customers are encouraged to migrate to the newer, `link_token`-based flow. The recommended flow is to provide the `payment_id` to `/link/token/create`, which returns a `link_token` used to initialize Link.
   *
   * The `/payment_initiation/payment/token/create` is used to create a `payment_token`, which can then be used in Link initialization to enter a payment initiation flow. You can only use a `payment_token` once. If this attempt fails, the end user aborts the flow, or the token expires, you will need to create a new payment token. Creating a new payment token does not require end user input.
   */
  createPaymentToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Create payment consent
   * @description The `/payment_initiation/consent/create` endpoint is used to create a payment consent, which can be used to initiate payments on behalf of the user. Payment consents are created with `UNAUTHORISED` status by default and must be authorised by the user before payments can be initiated.
   *
   * Consents can be limited in time and scope, and have constraints that describe limitations for payments.
   */
  paymentInitiationConsentCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentCreateResponse"];
        };
      };
    };
  };
  /**
   * Get payment consent
   * @description The `/payment_initiation/consent/get` endpoint can be used to check the status of a payment consent, as well as to receive basic information such as recipient and constraints.
   */
  paymentInitiationConsentGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentGetResponse"];
        };
      };
    };
  };
  /**
   * Revoke payment consent
   * @description The `/payment_initiation/consent/revoke` endpoint can be used to revoke the payment consent. Once the consent is revoked, it is not possible to initiate payments using it.
   */
  paymentInitiationConsentRevoke: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentRevokeRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentRevokeResponse"];
        };
      };
    };
  };
  /**
   * Execute a single payment using consent
   * @description The `/payment_initiation/consent/payment/execute` endpoint can be used to execute payments using payment consent.
   */
  paymentInitiationConsentPaymentExecute: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationConsentPaymentExecuteRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationConsentPaymentExecuteResponse"];
        };
      };
    };
  };
  /**
   * Force a Sandbox Item into an error state
   * @description `/sandbox/item/reset_login/` forces an Item into an `ITEM_LOGIN_REQUIRED` state in order to simulate an Item whose login is no longer valid. This makes it easy to test Link's [update mode](https://plaid.com/docs/link/update-mode) flow in the Sandbox environment.  After calling `/sandbox/item/reset_login`, You can then use Plaid Link update mode to restore the Item to a good state. An `ITEM_LOGIN_REQUIRED` webhook will also be fired after a call to this endpoint, if one is associated with the Item.
   *
   *
   * In the Sandbox, Items will transition to an `ITEM_LOGIN_REQUIRED` error state automatically after 30 days, even if this endpoint is not called.
   */
  sandboxItemResetLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxItemResetLoginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxItemResetLoginResponse"];
        };
      };
    };
  };
  /**
   * Set verification status for Sandbox account
   * @description The `/sandbox/item/set_verification_status` endpoint can be used to change the verification status of an Item in in the Sandbox in order to simulate the Automated Micro-deposit flow.
   *
   * Note that not all Plaid developer accounts are enabled for micro-deposit based verification by default. Your account must be enabled for this feature in order to test it in Sandbox. To enable this features or check your status, contact your account manager or [submit a product access Support ticket](https://dashboard.plaid.com/support/new/product-and-development/product-troubleshooting/request-product-access).
   *
   * For more information on testing Automated Micro-deposits in Sandbox, see [Auth full coverage testing](https://plaid.com/docs/auth/coverage/testing#).
   */
  sandboxItemSetVerificationStatus: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxItemSetVerificationStatusRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxItemSetVerificationStatusResponse"];
        };
      };
    };
  };
  /**
   * Exchange public token for an access token
   * @description Exchange a Link `public_token` for an API `access_token`. Link hands off the `public_token` client-side via the `onSuccess` callback once a user has successfully created an Item. The `public_token` is ephemeral and expires after 30 minutes. An `access_token` does not expire, but can be revoked by calling `/item/remove`.
   *
   * The response also includes an `item_id` that should be stored with the `access_token`. The `item_id` is used to identify an Item in a webhook. The `item_id` can also be retrieved by making an `/item/get` request.
   */
  itemPublicTokenExchange: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemPublicTokenExchangeRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublicTokenExchangeResponse"];
        };
      };
    };
  };
  /**
   * Create public token
   * @description Note: As of July 2020, the `/item/public_token/create` endpoint is deprecated. Instead, use `/link/token/create` with an `access_token` to create a Link token for use with [update mode](https://plaid.com/docs/link/update-mode).
   *
   * If you need your user to take action to restore or resolve an error associated with an Item, generate a public token with the `/item/public_token/create` endpoint and then initialize Link with that `public_token`.
   *
   * A `public_token` is one-time use and expires after 30 minutes. You use a `public_token` to initialize Link in [update mode](https://plaid.com/docs/link/update-mode) for a particular Item. You can generate a `public_token` for an Item even if you did not use Link to create the Item originally.
   *
   * The `/item/public_token/create` endpoint is **not** used to create your initial `public_token`. If you have not already received an `access_token` for a specific Item, use Link to obtain your `public_token` instead. See the [Quickstart](https://plaid.com/docs/quickstart) for more information.
   */
  itemCreatePublicToken: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemPublicTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemPublicTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Create user
   * @description This endpoint should be called for each of your end users before they begin a Plaid income flow. This provides you a single token to access all income data associated with the user. You should only create one per end user.
   *
   * If you call the endpoint multiple times with the same `client_user_id`, the first creation call will succeed and the rest will fail with an error message indicating that the user has been created for the given `client_user_id`.
   *
   * Ensure that you store the `user_token` along with your user's identifier in your database, as it is not possible to retrieve a previously created `user_token`.
   */
  userCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserCreateResponse"];
        };
      };
    };
  };
  /**
   * Update user information
   * @description This endpoint is used to update user information associated with an existing `user_token`. The `user_token` should be in the response of `/user/create` call
   *
   * If you call the endpoint with a non-exist `user_token`, the call will fail with an error message indicating that the user token is not found.
   */
  userUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserUpdateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve Link sessions for your user
   * @description This endpoint can be used for your end users after they complete the Link flow. This endpoint returns a list of Link sessions that your user completed, where each session includes the results from the Link flow.
   *
   * These results include details about the Item that was created and some product related metadata (showing, for example, whether the user finished the bank income verification step).
   */
  creditSessionsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditSessionsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditSessionsGetResponse"];
        };
      };
    };
  };
  /**
   * Get payment details
   * @description The `/payment_initiation/payment/get` endpoint can be used to check the status of a payment, as well as to receive basic information such as recipient and payment amount. In the case of standing orders, the `/payment_initiation/payment/get` endpoint will provide information about the status of the overall standing order itself; the API cannot be used to retrieve payment status for individual payments within a standing order.
   */
  paymentInitiationPaymentGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentGetResponse"];
        };
      };
    };
  };
  /**
   * List payments
   * @description The `/payment_initiation/payment/list` endpoint can be used to retrieve all created payments. By default, the 10 most recent payments are returned. You can request more payments and paginate through the results using the optional `count` and `cursor` parameters.
   */
  paymentInitiationPaymentList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentInitiationPaymentListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentInitiationPaymentListResponse"];
        };
      };
    };
  };
  /**
   * Get Investment holdings
   * @description The `/investments/holdings/get` endpoint allows developers to receive user-authorized stock position data for `investment`-type accounts.
   */
  investmentsHoldingsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestmentsHoldingsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InvestmentsHoldingsGetResponse"];
        };
      };
    };
  };
  /**
   * Get investment transactions
   * @description The `/investments/transactions/get` endpoint allows developers to retrieve up to 24 months of user-authorized transaction data for investment accounts.
   *
   * Transactions are returned in reverse-chronological order, and the sequence of transaction ordering is stable and will not shift.
   *
   * Due to the potentially large number of investment transactions associated with an Item, results are paginated. Manipulate the count and offset parameters in conjunction with the `total_investment_transactions` response body field to fetch all available investment transactions.
   *
   * Note that Investments does not have a webhook to indicate when initial transaction data has loaded (unless you use the `async_update` option). Instead, if transactions data is not ready when `/investments/transactions/get` is first called, Plaid will wait for the data. For this reason, calling `/investments/transactions/get` immediately after Link may take up to one to two minutes to return.
   *
   * Data returned by the asynchronous investments extraction flow (when `async_update` is set to true) may not be immediately available to `/investments/transactions/get`. To be alerted when the data is ready to be fetched, listen for the `HISTORICAL_UPDATE` webhook. If no investments history is ready when `/investments/transactions/get` is called, it will return a `PRODUCT_NOT_READY` error.
   */
  investmentsTransactionsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestmentsTransactionsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InvestmentsTransactionsGetResponse"];
        };
      };
    };
  };
  /**
   * Refresh investment data
   * @description `/investments/refresh` is an optional endpoint for users of the Investments product. It initiates an on-demand extraction to fetch the newest investments, holdings and investment transactions for an Item. This on-demand extraction takes place in addition to the periodic extractions that automatically occur multiple times a day for any Investments-enabled Item. If changes to investments are discovered after calling `/investments/refresh`, Plaid will fire webhooks: [`HOLDINGS: DEFAULT_UPDATE`](https://plaid.com/docs/api/products/investments/#holdings-default_update) if any new holdings are detected, and [INVESTMENTS_TRANSACTIONS: DEFAULT_UPDATE](https://plaid.com/docs/api/products/investments/#investments_transactions-default_update) if any new investment transactions are detected. Updated holdings and investment transactions can be fetched by calling `/investments/holdings/get` and `/investments/transactions/get`. "Note that the `/investments/refresh` endpoint is not supported by all institutions. If called on an Item from an institution that does not support this functionality, it will return a `PRODUCT_NOT_SUPPORTED` error.
   * `/investments/refresh` is offered as an add-on to Investments and has a separate [fee model](/docs/account/billing/#per-request-flat-fee). To request access to this endpoint, submit a [product access request](https://dashboard.plaid.com/team/products) or contact your Plaid account manager.
   */
  investmentsRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestmentsRefreshRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InvestmentsRefreshResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get data needed to authorize an investments transfer
   * @description The `/investments/auth/get` endpoint allows developers to receive user-authorized data to facilitate the transfer of holdings
   */
  investmentsAuthGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestmentsAuthGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["InvestmentsAuthGetResponse"];
        };
      };
    };
  };
  /**
   * Create processor token
   * @description Used to create a token suitable for sending to one of Plaid's partners to enable integrations. Note that Stripe partnerships use bank account tokens instead; see `/processor/stripe/bank_account_token/create` for creating tokens for use with Stripe integrations. Once created, a processor token for a given Item cannot be modified or updated. If the account must be linked to a new or different partner resource, create a new Item by having the user go through the Link flow again; a new processor token can then be created from the new `access_token`. Processor tokens can also be revoked, using `/item/remove`.
   */
  processorTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Control a processor's access to products
   * @description Used to control a processor's access to products on the given processor token. By default, a processor will have access to all available products on the corresponding item. To restrict access to a particular set of products, call this endpoint with the desired products. To restore access to all available products, call this endpoint with an empty list. This endpoint can be called multiple times as your needs and your processor's needs change.
   */
  processorTokenPermissionsSet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTokenPermissionsSetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTokenPermissionsSetResponse"];
        };
      };
    };
  };
  /**
   * Get a processor token's product permissions
   * @description Used to get a processor token's product permissions. The `products` field will be an empty list if the processor can access all available products.
   */
  processorTokenPermissionsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTokenPermissionsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTokenPermissionsGetResponse"];
        };
      };
    };
  };
  /**
   * Update a processor token's webhook URL
   * @description This endpoint allows you, the processor, to update the webhook URL associated with a processor token. This request triggers a `WEBHOOK_UPDATE_ACKNOWLEDGED` webhook to the newly specified webhook URL.
   */
  processorTokenWebhookUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorTokenWebhookUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTokenWebhookUpdateResponse"];
        };
      };
    };
  };
  /**
   * Create Stripe bank account token
   * @description
   * Used to create a token suitable for sending to Stripe to enable Plaid-Stripe integrations. For a detailed guide on integrating Stripe, see [Add Stripe to your app](https://plaid.com/docs/auth/partnerships/stripe/).
   *
   * Note that the Stripe bank account token is a one-time use token. To store bank account information for later use, you can use a Stripe customer object and create an associated bank account from the token, or you can use a Stripe Custom account and create an associated external bank account from the token. This bank account information should work indefinitely, unless the user's bank account information changes or they revoke Plaid's permissions to access their account. Stripe bank account information cannot be modified once the bank account token has been created. If you ever need to change the bank account details used by Stripe for a specific customer, have the user go through Link again and create a new bank account token from the new `access_token`.
   *
   * Bank account tokens can also be revoked, using `/item/remove`.
   */
  processorStripeBankAccountTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorStripeBankAccountTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorStripeBankAccountTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Create Apex bank account token
   * @description Used to create a token suitable for sending to Apex to enable Plaid-Apex integrations.
   */
  processorApexProcessorTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProcessorApexProcessorTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ProcessorTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Create a deposit switch
   * @description This endpoint creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
   */
  depositSwitchCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchCreateResponse"];
        };
      };
    };
  };
  /**
   * Import Item
   * @description `/item/import` creates an Item via your Plaid Exchange Integration and returns an `access_token`. As part of an `/item/import` request, you will include a User ID (`user_auth.user_id`) and Authentication Token (`user_auth.auth_token`) that enable data aggregation through your Plaid Exchange API endpoints. These authentication principals are to be chosen by you.
   *
   * Upon creating an Item via `/item/import`, Plaid will automatically begin an extraction of that Item through the Plaid Exchange infrastructure you have already integrated.
   */
  itemImport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ItemImportRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ItemImportResponse"];
        };
      };
    };
  };
  /**
   * Create a deposit switch token
   * @description In order for the end user to take action, you will need to create a public token representing the deposit switch. This token is used to initialize Link. It can be used one time and expires after 30 minutes.
   */
  depositSwitchTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Create Link Token
   * @description The `/link/token/create` endpoint creates a `link_token`, which is required as a parameter when initializing Link. Once Link has been initialized, it returns a `public_token`, which can then be exchanged for an `access_token` via `/item/public_token/exchange` as part of the main Link flow.
   *
   * A `link_token` generated by `/link/token/create` is also used to initialize other Link flows, such as the update mode flow for tokens with expired credentials, or the Payment Initiation (Europe) flow.
   */
  linkTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Get Link Token
   * @description The `/link/token/get` endpoint gets information about a previously-created `link_token` using the
   * `/link/token/create` endpoint. It can be useful for debugging purposes.
   */
  linkTokenGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkTokenGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkTokenGetResponse"];
        };
      };
    };
  };
  /**
   * Exchange the Link Correlation Id for a Link Token
   * @description Exchange an OAuth `link_correlation_id` for the corresponding `link_token`. The `link_correlation_id` is only available for 'payment_initiation' products and is provided to the client via the OAuth `redirect_uri` as a query parameter.
   * The `link_correlation_id` is ephemeral and expires in a brief period, after which it can no longer be exchanged for the 'link_token'.
   */
  linkOauthCorrelationIdExchange: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkOAuthCorrelationIdExchangeRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkOAuthCorrelationIdExchangeResponse"];
        };
      };
    };
  };
  /**
   * Retrieve a deposit switch
   * @description This endpoint returns information related to how the user has configured their payroll allocation and the state of the switch. You can use this information to build logic related to the user's direct deposit allocation preferences.
   */
  depositSwitchGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve a transfer
   * @description The `/transfer/get` endpoint fetches information about the transfer corresponding to the given `transfer_id`.
   */
  transferGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a recurring transfer
   * @description The `/transfer/recurring/get` fetches information about the recurring transfer corresponding to the given `recurring_transfer_id`.
   */
  transferRecurringGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRecurringGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferRecurringGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a bank transfer
   * @description The `/bank_transfer/get` fetches information about the bank transfer corresponding to the given `bank_transfer_id`.
   */
  bankTransferGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["BankTransferGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a transfer authorization
   * @description Use the `/transfer/authorization/create` endpoint to authorize a transfer. This endpoint must be called prior to calling `/transfer/create`.
   *
   * There are three possible outcomes to calling this endpoint: If the `authorization.decision` in the response is `declined`, the proposed transfer has failed the risk check and you cannot proceed with the transfer. If the `authorization.decision` is `approved`, and the `authorization.rationale_code` is `null`, the transfer has passed the risk check and you can proceed to call `/transfer/create`. If the `authorization.decision` is `approved` and the `authorization.rationale_code` is non-`null`, the risk check could not be run: you may proceed with the transfer, but should perform your own risk evaluation. For more details, see the response schema.
   *
   * In Plaid's Sandbox environment the decisions will be returned as follows:
   *
   *   - To approve a transfer with `null` rationale code, make an authorization request with an `amount` less than the available balance in the account.
   *
   *   - To approve a transfer with the rationale code `MANUALLY_VERIFIED_ITEM`, create an Item in Link through the [Same Day Micro-deposits flow](https://plaid.com/docs/auth/coverage/testing/#testing-same-day-micro-deposits).
   *
   *   - To approve a transfer with the rationale code `ITEM_LOGIN_REQUIRED`, [reset the login for an Item](https://plaid.com/docs/sandbox/#item_login_required).
   *
   *   - To decline a transfer with the rationale code `NSF`, the available balance on the account must be less than the authorization `amount`. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
   *
   *   - To decline a transfer with the rationale code `RISK`, the available balance on the account must be exactly $0. See [Create Sandbox test data](https://plaid.com/docs/sandbox/user-custom/) for details on how to customize data in Sandbox.
   */
  transferAuthorizationCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferAuthorizationCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferAuthorizationCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a balance held with Plaid
   * @description Use the `/transfer/balance/get` endpoint to view a balance held with Plaid.
   */
  transferBalanceGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferBalanceGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferBalanceGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get RTP eligibility information of a transfer
   * @description Use the `/transfer/capabilities/get` endpoint to determine the RTP eligibility information of a transfer. To simulate RTP eligibility in Sandbox, log in using the username `user_good` and password `pass_good` and use the first two checking and savings accounts in the "First Platypus Bank" institution (ending in 0000 or 1111), which will return `true`. Any other account will return `false`.
   */
  transferCapabilitiesGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferCapabilitiesGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferCapabilitiesGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get transfer product configuration
   * @description Use the `/transfer/configuration/get` endpoint to view your transfer product configurations.
   */
  transferConfigurationGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferConfigurationGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferConfigurationGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve Plaid Ledger balance
   * @description Use the `/transfer/ledger/get` endpoint to view a balance on the ledger held with Plaid.
   */
  transferLedgerGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferLedgerGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferLedgerGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Move available balance between the ledgers of the platform and one of its originators
   * @description Use the `/transfer/ledger/distribute` endpoint to move available balance between the ledgers of the platform and one of its originators.
   */
  transferLedgerDistribute: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferLedgerDistributeRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferLedgerDistributeResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Deposit funds into a Plaid Ledger balance
   * @description Use the `/transfer/ledger/deposit` endpoint to deposit funds into Plaid Ledger.
   */
  transferLedgerDeposit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferLedgerDepositRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferLedgerDepositResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Withdraw funds from a Plaid Ledger balance
   * @description Use the `/transfer/ledger/withdraw` endpoint to withdraw funds from a Plaid Ledger balance.
   */
  transferLedgerWithdraw: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferLedgerWithdrawRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferLedgerWithdrawResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Update the funding account associated with the originator
   * @description Use the `/transfer/originator/funding_account/update` endpoint to update the funding account associated with the originator.
   */
  transferOriginatorFundingAccountUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferOriginatorFundingAccountUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferOriginatorFundingAccountUpdateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get transfer product usage metrics
   * @description Use the `/transfer/metrics/get` endpoint to view your transfer product usage metrics.
   */
  transferMetricsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferMetricsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferMetricsGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a transfer
   * @description Use the `/transfer/create` endpoint to initiate a new transfer.
   */
  transferCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a recurring transfer
   * @description Use the `/transfer/recurring/create` endpoint to initiate a new recurring transfer. This capability is not currently supported for Transfer UI or Platform Payments (beta) customers.
   */
  transferRecurringCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRecurringCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferRecurringCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a bank transfer
   * @description Use the `/bank_transfer/create` endpoint to initiate a new bank transfer.
   */
  bankTransferCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List transfers
   * @description Use the `/transfer/list` endpoint to see a list of all your transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired transfers.
   */
  transferList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List recurring transfers
   * @description Use the `/transfer/recurring/list` endpoint to see a list of all your recurring transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired recurring transfers.
   */
  transferRecurringList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRecurringListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferRecurringListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List bank transfers
   * @description Use the `/bank_transfer/list` endpoint to see a list of all your bank transfers and their statuses. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired bank transfers.
   */
  bankTransferList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Cancel a transfer
   * @description Use the `/transfer/cancel` endpoint to cancel a transfer.  A transfer is eligible for cancellation if the `cancellable` property returned by `/transfer/get` is `true`.
   */
  transferCancel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferCancelRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferCancelResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Cancel a recurring transfer.
   * @description Use the `/transfer/recurring/cancel` endpoint to cancel a recurring transfer.  Scheduled transfer that hasn't been submitted to bank will be cancelled.
   */
  transferRecurringCancel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRecurringCancelRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferRecurringCancelResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Cancel a bank transfer
   * @description Use the `/bank_transfer/cancel` endpoint to cancel a bank transfer.  A transfer is eligible for cancelation if the `cancellable` property returned by `/bank_transfer/get` is `true`.
   */
  bankTransferCancel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferCancelRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferCancelResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List transfer events
   * @description Use the `/transfer/event/list` endpoint to get a list of transfer events based on specified filter criteria.
   */
  transferEventList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferEventListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferEventListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List bank transfer events
   * @description Use the `/bank_transfer/event/list` endpoint to get a list of Plaid-initiated ACH or bank transfer events based on specified filter criteria. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://plaid.com/docs/auth/coverage/microdeposit-events/).
   */
  bankTransferEventList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferEventListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferEventListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Sync transfer events
   * @description `/transfer/event/sync` allows you to request up to the next 25 transfer events that happened after a specific `event_id`. Use the `/transfer/event/sync` endpoint to guarantee you have seen all transfer events.
   */
  transferEventSync: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferEventSyncRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferEventSyncResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Sync bank transfer events
   * @description `/bank_transfer/event/sync` allows you to request up to the next 25 Plaid-initiated bank transfer events that happened after a specific `event_id`. When using Auth with micro-deposit verification enabled, this endpoint can be used to fetch status updates on ACH micro-deposits. For more details, see [micro-deposit events](https://www.plaid.com/docs/auth/coverage/microdeposit-events/).
   */
  bankTransferEventSync: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferEventSyncRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferEventSyncResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a sweep
   * @description The `/transfer/sweep/get` endpoint fetches a sweep corresponding to the given `sweep_id`.
   */
  transferSweepGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferSweepGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferSweepGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a sweep
   * @description The `/bank_transfer/sweep/get` endpoint fetches information about the sweep corresponding to the given `sweep_id`.
   */
  bankTransferSweepGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferSweepGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["BankTransferSweepGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List sweeps
   * @description The `/transfer/sweep/list` endpoint fetches sweeps matching the given filters.
   */
  transferSweepList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferSweepListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferSweepListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List sweeps
   * @description The `/bank_transfer/sweep/list` endpoint fetches information about the sweeps matching the given filters.
   */
  bankTransferSweepList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferSweepListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["BankTransferSweepListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get balance of your Bank Transfer account
   * @description Use the `/bank_transfer/balance/get` endpoint to see the available balance in your bank transfer account. Debit transfers increase this balance once their status is posted. Credit transfers decrease this balance when they are created.
   *
   * The transactable balance shows the amount in your account that you are able to use for transfers, and is essentially your available balance minus your minimum balance.
   *
   * Note that this endpoint can only be used with FBO accounts, when using Bank Transfers in the Full Service configuration. It cannot be used on your own account when using Bank Transfers in the BTS Platform configuration.
   */
  bankTransferBalanceGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferBalanceGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferBalanceGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Migrate account into Bank Transfers
   * @description As an alternative to adding Items via Link, you can also use the `/bank_transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Bank Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/bank_transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
   */
  bankTransferMigrateAccount: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BankTransferMigrateAccountRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["BankTransferMigrateAccountResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Migrate account into Transfers
   * @description As an alternative to adding Items via Link, you can also use the `/transfer/migrate_account` endpoint to migrate known account and routing numbers to Plaid Items.  Note that Items created in this way are not compatible with endpoints for other products, such as `/accounts/balance/get`, and can only be used with Transfer endpoints.  If you require access to other endpoints, create the Item through Link instead.  Access to `/transfer/migrate_account` is not enabled by default; to obtain access, contact your Plaid Account Manager.
   */
  transferMigrateAccount: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferMigrateAccountRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferMigrateAccountResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a transfer intent object to invoke the Transfer UI
   * @description Use the `/transfer/intent/create` endpoint to generate a transfer intent object and invoke the Transfer UI.
   */
  transferIntentCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferIntentCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferIntentCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve more information about a transfer intent
   * @description Use the `/transfer/intent/get` endpoint to retrieve more information about a transfer intent.
   */
  transferIntentGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferIntentGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferIntentGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Lists historical repayments
   * @description The `/transfer/repayment/list` endpoint fetches repayments matching the given filters. Repayments are returned in reverse-chronological order (most recent first) starting at the given `start_time`.
   */
  transferRepaymentList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRepaymentListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferRepaymentListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List the returns included in a repayment
   * @description The `/transfer/repayment/return/list` endpoint retrieves the set of returns that were batched together into the specified repayment. The sum of amounts of returns retrieved by this request equals the amount of the repayment.
   */
  transferRepaymentReturnList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRepaymentReturnListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferRepaymentReturnListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a new originator
   * @description Use the `/transfer/originator/create` endpoint to create a new originator and return an `originator_client_id`.
   */
  transferOriginatorCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferOriginatorCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferOriginatorCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Generate a Plaid-hosted onboarding UI URL.
   * @description The `/transfer/questionnaire/create` endpoint generates a Plaid-hosted onboarding UI URL. Redirect the originator to this URL to provide their due diligence information and agree to Plaid’s terms for ACH money movement.
   */
  transferQuestionnaireCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferQuestionnaireCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferQuestionnaireCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Submit transfer diligence on behalf of the originator
   * @description Use the `/transfer/diligence/submit` endpoint to submit transfer diligence on behalf of the originator (i.e., the end customer).
   */
  transferDiligenceSubmit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferDiligenceSubmitRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferDiligenceSubmitResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Upload transfer diligence document on behalf of the originator
   * @description Third-party sender customers can use `/transfer/diligence/document/upload` endpoint to upload a document on behalf of its end customer (i.e. originator) to Plaid. You’ll need to send a request of type multipart/form-data.
   * You must provide the `client_id` in the `PLAID-CLIENT-ID` header and `secret` in the `PLAID-SECRET` header.
   */
  transferDiligenceDocumentUpload: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferDiligenceDocumentUploadRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferDiligenceDocumentUploadResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get status of an originator's onboarding
   * @description The `/transfer/originator/get` endpoint gets status updates for an originator's onboarding process. This information is also available via the Transfer page on the Plaid dashboard.
   */
  transferOriginatorGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferOriginatorGetRequest"];
        "examples": unknown;
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferOriginatorGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get status of all originators' onboarding
   * @description The `/transfer/originator/list` endpoint gets status updates for all of your originators' onboarding. This information is also available via the Plaid dashboard.
   */
  transferOriginatorList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferOriginatorListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferOriginatorListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a refund
   * @description Use the `/transfer/refund/create` endpoint to create a refund for a transfer. A transfer can be refunded if the transfer was initiated in the past 180 days.
   *
   * Processing of the refund will not occur until at least 4 business days following the transfer's settlement date, plus any hold/settlement delays. This 3-day window helps better protect your business from regular ACH returns. Consumer initiated returns (unauthorized returns) could still happen for about 60 days from the settlement date. If the original transfer is canceled, returned or failed, all pending refunds will automatically be canceled. Processed refunds cannot be revoked.
   */
  transferRefundCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRefundCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferRefundCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a refund
   * @description The `/transfer/refund/get` endpoint fetches information about the refund corresponding to the given `refund_id`.
   */
  transferRefundGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRefundGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
        };
        content: {
          "application/json": components["schemas"]["TransferRefundGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Cancel a refund
   * @description Use the `/transfer/refund/cancel` endpoint to cancel a refund.  A refund is eligible for cancellation if it has not yet been submitted to the payment network.
   */
  transferRefundCancel: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransferRefundCancelRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransferRefundCancelResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Simulate a bank transfer event in Sandbox
   * @description Use the `/sandbox/bank_transfer/simulate` endpoint to simulate a bank transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/bank_transfer/event/sync` or `/bank_transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
   */
  sandboxBankTransferSimulate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxBankTransferSimulateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxBankTransferSimulateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Simulate creating a sweep
   * @description Use the `/sandbox/transfer/sweep/simulate` endpoint to create a sweep and associated events in the Sandbox environment. Upon calling this endpoint, all transfers with a sweep status of `swept` will become `swept_settled`, all `posted` or `pending` transfers with a sweep status of `unswept` will become `swept`, and all `returned` transfers with a sweep status of `swept` will become `return_swept`.
   */
  sandboxTransferSweepSimulate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferSweepSimulateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferSweepSimulateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Simulate a transfer event in Sandbox
   * @description Use the `/sandbox/transfer/simulate` endpoint to simulate a transfer event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
   */
  sandboxTransferSimulate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferSimulateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferSimulateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Simulate a refund event in Sandbox
   * @description Use the `/sandbox/transfer/refund/simulate` endpoint to simulate a refund event in the Sandbox environment.  Note that while an event will be simulated and will appear when using endpoints such as `/transfer/event/sync` or `/transfer/event/list`, no transactions will actually take place and funds will not move between accounts, even within the Sandbox.
   */
  sandboxTransferRefundSimulate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferRefundSimulateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferRefundSimulateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Simulate converting pending balance to available balance
   * @description Use the `/sandbox/transfer/ledger/simulate_available` endpoint to simulate converting pending balance to available balance for all originators in the Sandbox environment.
   */
  sandboxTransferLedgerSimulateAvailable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferLedgerSimulateAvailableRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferLedgerSimulateAvailableResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Simulate a ledger deposit event in Sandbox
   * @description Use the `/sandbox/transfer/ledger/deposit/simulate` endpoint to simulate a ledger deposit event in the Sandbox environment.
   */
  sandboxTransferLedgerDepositSimulate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferLedgerDepositSimulateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferLedgerDepositSimulateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Simulate a ledger withdraw event in Sandbox
   * @description Use the `/sandbox/transfer/ledger/withdraw/simulate` endpoint to simulate a ledger withdraw event in the Sandbox environment.
   */
  sandboxTransferLedgerWithdrawSimulate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferLedgerWithdrawSimulateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferLedgerWithdrawSimulateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Trigger the creation of a repayment
   * @description Use the `/sandbox/transfer/repayment/simulate` endpoint to trigger the creation of a repayment. As a side effect of calling this route, a repayment is created that includes all unreimbursed returns of guaranteed transfers. If there are no such returns, an 400 error is returned.
   */
  sandboxTransferRepaymentSimulate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferRepaymentSimulateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferRepaymentSimulateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Manually fire a Transfer webhook
   * @description Use the `/sandbox/transfer/fire_webhook` endpoint to manually trigger a `TRANSFER_EVENTS_UPDATE` webhook in the Sandbox environment.
   */
  sandboxTransferFireWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferFireWebhookRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferFireWebhookResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a test clock
   * @description Use the `/sandbox/transfer/test_clock/create` endpoint to create a `test_clock` in the Sandbox environment.
   *
   * A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. Test clocks are used for testing recurring transfers in Sandbox.
   *
   * A test clock can be associated with up to 5 recurring transfers.
   */
  sandboxTransferTestClockCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferTestClockCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferTestClockCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Advance a test clock
   * @description Use the `/sandbox/transfer/test_clock/advance` endpoint to advance a `test_clock` in the Sandbox environment.
   *
   * A test clock object represents an independent timeline and has a `virtual_time` field indicating the current timestamp of the timeline. A test clock can be advanced by incrementing `virtual_time`, but may never go back to a lower `virtual_time`.
   *
   * If a test clock is advanced, we will simulate the changes that ought to occur during the time that elapsed.
   *
   * For example, a client creates a weekly recurring transfer with a test clock set at t. When the client advances the test clock by setting `virtual_time` = t + 15 days, 2 new originations should be created, along with the webhook events.
   *
   * The advancement of the test clock from its current `virtual_time` should be limited such that there are no more than 20 originations resulting from the advance operation on each `recurring_transfer` associated with the `test_clock`.
   *
   * For example, if the recurring transfer associated with this test clock originates once every 4 weeks, you can advance the `virtual_time` up to 80 weeks on each API call.
   */
  sandboxTransferTestClockAdvance: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferTestClockAdvanceRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferTestClockAdvanceResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get a test clock
   * @description Use the `/sandbox/transfer/test_clock/get` endpoint to get a `test_clock` in the Sandbox environment.
   */
  sandboxTransferTestClockGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferTestClockGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferTestClockGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * List test clocks
   * @description Use the `/sandbox/transfer/test_clock/list` endpoint to see a list of all your test clocks in the Sandbox environment, by ascending `virtual_time`. Results are paginated; use the `count` and `offset` query parameters to retrieve the desired test clocks.
   */
  sandboxTransferTestClockList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxTransferTestClockListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxTransferTestClockListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Reset the login of a Payment Profile
   * @deprecated
   * @description `/sandbox/payment_profile/reset_login/` forces a Payment Profile into a state where the login is no longer valid. This makes it easy to test update mode for Payment Profile in the Sandbox environment.
   *
   *  After calling `/sandbox/payment_profile/reset_login`, calls to the `/transfer/authorization/create` with the Payment Profile will result in a `decision_rationale` `PAYMENT_PROFILE_LOGIN_REQUIRED`. You can then use update mode for Payment Profile to restore it into a good state.
   *
   *  In order to invoke this endpoint, you must first [create a Payment Profile](https://plaid.com/docs/transfer/add-to-app/#create-a-payment-profile-optional) and [go through the Link flow](https://plaid.com/docs/transfer/add-to-app/#create-a-link-token).
   */
  sandboxPaymentProfileResetLogin: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxPaymentProfileResetLoginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxPaymentProfileResetLoginResponse"];
        };
      };
    };
  };
  /**
   * Search employer database
   * @description `/employers/search` allows you the ability to search Plaid’s database of known employers, for use with Deposit Switch. You can use this endpoint to look up a user's employer in order to confirm that they are supported. Users with non-supported employers can then be routed out of the Deposit Switch flow.
   *
   * The data in the employer database is currently limited. As the Deposit Switch and Income products progress through their respective beta periods, more employers are being regularly added. Because the employer database is frequently updated, we recommend that you do not cache or store data from this endpoint for more than a day.
   */
  employersSearch: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmployersSearchRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmployersSearchResponse"];
        };
      };
    };
  };
  /**
   * (Deprecated) Create an income verification instance
   * @deprecated
   * @description `/income/verification/create` begins the income verification process by returning an `income_verification_id`. You can then provide the `income_verification_id` to `/link/token/create` under the `income_verification` parameter in order to create a Link instance that will prompt the user to go through the income verification flow. Plaid will fire an `INCOME` webhook once the user completes the Payroll Income flow, or when the uploaded documents in the Document Income flow have finished processing.
   */
  incomeVerificationCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationCreateResponse"];
        };
      };
    };
  };
  /**
   * (Deprecated) Retrieve information from the paystubs used for income verification
   * @deprecated
   * @description `/income/verification/paystubs/get` returns the information collected from the paystubs that were used to verify an end user's income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
   */
  incomeVerificationPaystubsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationPaystubsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationPaystubsGetResponse"];
        };
      };
    };
  };
  /**
   * (Deprecated) Download the original documents used for income verification
   * @deprecated
   * @description `/income/verification/documents/download` provides the ability to download the source documents associated with the verification.
   *
   * If Document Income was used, the documents will be those the user provided in Link. For Payroll Income, the most recent files available
   * for download from the payroll provider will be available from this endpoint.
   *
   * The response to `/income/verification/documents/download` is a ZIP file in binary data. If a `document_id` is passed, a single document will be contained in this file.
   * If not, the response will contain all documents associated with the verification.
   *
   * The `request_id` is returned in the `Plaid-Request-ID` header.
   */
  incomeVerificationDocumentsDownload: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationDocumentsDownloadRequest"];
      };
    };
    responses: {
      /** @description A ZIP file containing source documents(s) used as the basis for income verification. */
      200: {
        content: {
          "application/zip": string;
        };
      };
    };
  };
  /**
   * (Deprecated) Retrieve information from the tax documents used for income verification
   * @deprecated
   * @description `/income/verification/taxforms/get` returns the information collected from forms that were used to verify an end user''s income. It can be called once the status of the verification has been set to `VERIFICATION_STATUS_PROCESSING_COMPLETE`, as reported by the `INCOME: verification_status` webhook. Attempting to call the endpoint before verification has been completed will result in an error.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/get` instead.
   */
  incomeVerificationTaxformsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationTaxformsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationTaxformsGetResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * (Deprecated) Check digital income verification eligibility and optimize conversion
   * @deprecated
   * @description `/income/verification/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification and returns a `precheck_id` that can be provided to `/link/token/create`. If the user is eligible for digital verification, providing the `precheck_id` in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the `precheck_id` can still be provided to `/link/token/create` and the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
   *
   * While all request fields are optional, providing either `employer` or `transactions_access_tokens` data will increase the chance of receiving a useful result.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/payroll_income/precheck` instead.
   */
  incomeVerificationPrecheck: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IncomeVerificationPrecheckRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["IncomeVerificationPrecheckResponse"];
        };
      };
    };
  };
  /**
   * (Deprecated) Retrieve a summary of an individual's employment information
   * @deprecated
   * @description `/employment/verification/get` returns a list of employments through a user payroll that was verified by an end user.
   *
   * This endpoint has been deprecated; new integrations should use `/credit/employment/get` instead.
   */
  employmentVerificationGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmploymentVerificationGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["EmploymentVerificationGetResponse"];
        };
      };
    };
  };
  /**
   * Create a deposit switch without using Plaid Exchange
   * @description This endpoint provides an alternative to `/deposit_switch/create` for customers who have not yet fully integrated with Plaid Exchange. Like `/deposit_switch/create`, it creates a deposit switch entity that will be persisted throughout the lifecycle of the switch.
   */
  depositSwitchAltCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DepositSwitchAltCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DepositSwitchAltCreateResponse"];
        };
      };
    };
  };
  /**
   * Create Asset or Income Report Audit Copy Token
   * @description Plaid can create an Audit Copy token of an Asset Report and/or Income Report to share with participating Government Sponsored Entity (GSE). If you participate in the Day 1 Certainty™ program, Plaid can supply an Audit Copy token directly to Fannie Mae on your behalf. An Audit Copy token contains the same underlying data as the Asset Report and/or Income Report (result of /credit/payroll_income/get).
   *
   * Use the `/credit/audit_copy_token/create` endpoint to create an `audit_copy_token` and then pass that token to the GSE who needs access.
   */
  creditAuditCopyTokenCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditAuditCopyTokenCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditAuditCopyTokenCreateResponse"];
        };
      };
    };
  };
  /**
   * Remove an Audit Copy token
   * @description The `/credit/audit_copy_token/remove` endpoint allows you to remove an Audit Copy. Removing an Audit Copy invalidates the `audit_copy_token` associated with it, meaning both you and any third parties holding the token will no longer be able to use it to access Report data. Items associated with the Report data and other Audit Copies of it are not affected and will remain accessible after removing the given Audit Copy.
   */
  creditReportAuditCopyRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditAuditCopyTokenRemoveRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditAuditCopyTokenRemoveResponse"];
        };
      };
    };
  };
  /**
   * Retrieve an Asset Report with Freddie Mac format. Only Freddie Mac can use this endpoint.
   * @description The `credit/asset_report/freddie_mac/get` endpoint retrieves the Asset Report in Freddie Mac's JSON format.
   */
  creditAssetReportFreddieMacGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetReportFreddieGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportFreddieGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve an Asset Report with Freddie Mac format (aka VOA - Verification Of Assets), and a Verification Of Employment (VOE) report if this one is available. Only Freddie Mac can use this endpoint.
   * @description The `credit/asset_report/freddie_mac/get` endpoint retrieves the Verification of Assets and Verification of Employment reports.
   */
  creditFreddieMacReportsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditFreddieMacReportsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditFreddieMacReportsGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve information from the bank accounts used for employment verification
   * @description `/credit/bank_employment/get` returns the employment report(s) derived from bank transaction data for a specified user.
   */
  creditBankEmploymentGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankEmploymentGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBankEmploymentGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve information from the bank accounts used for income verification
   * @description `/credit/bank_income/get` returns the bank income report(s) for a specified user.
   */
  creditBankIncomeGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankIncomeGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBankIncomeGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve information from the bank accounts used for income verification in PDF format
   * @description `/credit/bank_income/pdf/get` returns the most recent bank income report for a specified user in PDF format.
   */
  creditBankIncomePdfGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankIncomePDFGetRequest"];
      };
    };
    responses: {
      /** @description A PDF of the Bank Income Report */
      200: {
        content: {
          "application/pdf": components["schemas"]["CreditBankIncomePDFGetResponse"];
        };
      };
    };
  };
  /**
   * Refresh a user's bank income information
   * @description `/credit/bank_income/refresh` refreshes the bank income report data for a specific user.
   */
  creditBankIncomeRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankIncomeRefreshRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBankIncomeRefreshResponse"];
        };
      };
    };
  };
  /**
   * Subscribe and unsubscribe to proactive notifications for a user's income profile
   * @description `/credit/bank_income/webhook/update` allows you to subscribe or unsubscribe a user for income webhook notifications. By default, all users start out unsubscribed.
   *
   * If a user is subscribed, on significant changes to the user's income profile, you will receive a `BANK_INCOME_REFRESH_UPDATE` webhook, prompting you to refresh bank income data for the user.
   */
  creditBankIncomeWebhookUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankIncomeWebhookUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBankIncomeWebhookUpdateResponse"];
        };
      };
    };
  };
  /**
   * Update the parsing configuration for a document income verification
   * @description `/credit/payroll_income/parsing_config/update` updates the parsing configuration for a document income verification.
   */
  creditPayrollIncomeParsingConfigUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomeParsingConfigUpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomeParsingConfigUpdateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve data for a user's uploaded bank statements
   * @description `/credit/bank_statements/uploads/get` returns parsed data from bank statements uploaded by users as part of the Document Income flow. If your account is not enabled for Document Parsing, contact your account manager to request access.
   */
  creditBankStatementsUploadsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditBankStatementsUploadsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditBankStatementsUploadsGetResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Retrieve a user's payroll information
   * @description This endpoint gets payroll income information for a specific user, either as a result of the user connecting to their payroll provider or uploading a pay related document.
   */
  creditPayrollIncomeGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomeGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomeGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve fraud insights for a user's manually uploaded document(s).
   * @description `/credit/payroll_income/risk_signals/get` can be used as part of the Document Income flow to assess a user-uploaded document for signs of potential fraud or tampering. It returns a risk score for each uploaded document that indicates the likelihood of the document being fraudulent, in addition to details on the individual risk signals contributing to the score.
   *
   * To trigger risk signal generation for an Item, call `/link/token/create` with `parsing_config` set to include `fraud_risk`, or call `/credit/payroll_income/parsing_config/update`. Once risk signal generation has been triggered, `/credit/payroll_income/risk_signals/get` can be called at any time after the `INCOME_VERIFICATION_RISK_SIGNALS` webhook has been fired.
   *
   * `/credit/payroll_income/risk_signals/get` is offered as an add-on to Document Income and is billed separately. To request access to this endpoint, submit a product access request or contact your Plaid account manager.
   */
  creditPayrollIncomeRiskSignalsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomeRiskSignalsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomeRiskSignalsGetResponse"];
        };
      };
    };
  };
  /**
   * Check income verification eligibility and optimize conversion
   * @deprecated
   * @description `/credit/payroll_income/precheck` is an optional endpoint that can be called before initializing a Link session for income verification. It evaluates whether a given user is supportable by digital income verification. If the user is eligible for digital verification, that information will be associated with the user token, and in this way will generate a Link UI optimized for the end user and their specific employer. If the user cannot be confirmed as eligible, the user can still use the income verification flow, but they may be required to manually upload a paystub to verify their income.
   *
   * While all request fields are optional, providing `employer` data will increase the chance of receiving a useful result.
   *
   * When testing in Sandbox, you can control the results by providing special test values in the `employer` and `access_tokens` fields. `employer_good` and `employer_bad` will result in `HIGH` and `LOW` confidence values, respectively. `employer_multi` will result in a `HIGH` confidence with multiple payroll options. Likewise, `access_good` and `access_bad` will result in `HIGH` and `LOW` confidence values, respectively. Any other value for `employer` and `access_tokens` in Sandbox will result in `UNKNOWN` confidence.
   */
  creditPayrollIncomePrecheck: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomePrecheckRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomePrecheckResponse"];
        };
      };
    };
  };
  /**
   * Retrieve a summary of an individual's employment information
   * @description `/credit/employment/get` returns a list of items with employment information from a user's payroll provider that was verified by an end user.
   */
  creditEmploymentGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditEmploymentGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditEmploymentGetResponse"];
        };
      };
    };
  };
  /**
   * Refresh a digital payroll income verification
   * @description `/credit/payroll_income/refresh` refreshes a given digital payroll income verification.
   */
  creditPayrollIncomeRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditPayrollIncomeRefreshRequest"];
      };
    };
    responses: {
      /** @description success */
      200: {
        content: {
          "application/json": components["schemas"]["CreditPayrollIncomeRefreshResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create a relay token to share an Asset Report with a partner client (beta)
   * @description Plaid can share an Asset Report directly with a participating third party on your behalf. The shared Asset Report is the exact same Asset Report originally created in `/asset_report/create`.
   *
   * To grant a third party access to an Asset Report, use the `/credit/relay/create` endpoint to create a `relay_token` and then pass that token to your third party. Each third party has its own `secondary_client_id`; for example, `ce5bd328dcd34123456`. You'll need to create a separate `relay_token` for each third party that needs access to the report on your behalf.
   */
  creditRelayCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditRelayCreateResponse"];
        };
      };
    };
  };
  /**
   * Retrieve the reports associated with a relay token that was shared with you (beta)
   * @description `/credit/relay/get` allows third parties to receive a report that was shared with them, using a `relay_token` that was created by the report owner.
   */
  creditRelayGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssetReportGetResponse"];
        };
      };
    };
  };
  /**
   * Retrieve the pdf reports associated with a relay token that was shared with you (beta)
   * @description `/credit/relay/pdf/get` allows third parties to receive a pdf report that was shared with them, using a `relay_token` that was created by the report owner.
   *
   * The `/credit/relay/pdf/get` endpoint retrieves the Asset Report in PDF format. Before calling `/credit/relay/pdf/get`, you must first create the Asset Report using `/credit/relay/create` and then wait for the [`PRODUCT_READY`](https://plaid.com/docs/api/products/assets/#product_ready) webhook to fire, indicating that the Report is ready to be retrieved.
   *
   * The response to `/credit/relay/pdf/get` is the PDF binary data. The `request_id` is returned in the `Plaid-Request-ID` header.
   *
   * [View a sample PDF Asset Report](https://plaid.com/documents/sample-asset-report.pdf).
   */
  creditRelayPdfGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayPDFGetRequest"];
      };
    };
    responses: {
      /** @description A PDF of the Asset Report */
      200: {
        content: {
          "application/pdf": components["schemas"]["CreditRelayPDFGetResponse"];
        };
      };
    };
  };
  /**
   * Refresh a report of a relay token (beta)
   * @description The `/credit/relay/refresh` endpoint allows third parties to refresh a report that was relayed to them, using a `relay_token` that was created by the report owner. A new report will be created with the original report parameters, but with the most recent data available based on the `days_requested` value of the original report.
   */
  creditRelayRefresh: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayRefreshRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditRelayRefreshResponse"];
        };
      };
    };
  };
  /**
   * Remove relay token (beta)
   * @description The `/credit/relay/remove` endpoint allows you to invalidate a `relay_token`. The third party holding the token will no longer be able to access or refresh the reports which the `relay_token` gives access to. The original report, associated Items, and other relay tokens that provide access to the same report are not affected and will remain accessible after removing the given `relay_token`.
   */
  creditRelayRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreditRelayRemoveRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreditRelayRemoveResponse"];
        };
      };
    };
  };
  /**
   * Manually fire a Bank Transfer webhook
   * @description Use the `/sandbox/bank_transfer/fire_webhook` endpoint to manually trigger a Bank Transfers webhook in the Sandbox environment.
   */
  sandboxBankTransferFireWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxBankTransferFireWebhookRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxBankTransferFireWebhookResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Manually fire an Income webhook
   * @description Use the `/sandbox/income/fire_webhook` endpoint to manually trigger a Payroll or Document Income webhook in the Sandbox environment.
   */
  sandboxIncomeFireWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxIncomeFireWebhookRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxIncomeFireWebhookResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Manually fire a bank income webhook in sandbox
   * @description Use the `/sandbox/bank_income/fire_webhook` endpoint to manually trigger a Bank Income webhook in the Sandbox environment.
   */
  sandboxBankIncomeFireWebhook: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxBankIncomeFireWebhookRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxBankIncomeFireWebhookResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Save the selected accounts when connecting to the Platypus Oauth institution
   * @description Save the selected accounts when connecting to the Platypus Oauth institution
   */
  sandboxOauthSelectAccounts: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SandboxOauthSelectAccountsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SandboxOauthSelectAccountsResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Evaluate a planned ACH transaction
   * @description Use `/signal/evaluate` to evaluate a planned ACH transaction to get a return risk assessment (such as a risk score and risk tier) and additional risk signals.
   *
   * In order to obtain a valid score for an ACH transaction, Plaid must have an access token for the account, and the Item must be healthy (receiving product updates) or have recently been in a healthy state. If the transaction does not meet eligibility requirements, an error will be returned corresponding to the underlying cause. If `/signal/evaluate` is called on the same transaction multiple times within a 24-hour period, cached results may be returned. For more information please refer to the error documentation on [Item errors](/docs/errors/item/) and [Link in Update Mode](/docs/link/update-mode/).
   *
   * Note: This request may take some time to complete if Signal is being added to an existing Item. This is because Plaid must communicate directly with the institution when retrieving the data for the first time.
   */
  signalEvaluate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalEvaluateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalEvaluateResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Report whether you initiated an ACH transaction
   * @description After calling `/signal/evaluate`, call `/signal/decision/report` to report whether the transaction was initiated.
   */
  signalDecisionReport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalDecisionReportRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalDecisionReportResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Report a return for an ACH transaction
   * @description Call the `/signal/return/report` endpoint to report a returned transaction that was previously sent to the `/signal/evaluate` endpoint. Your feedback will be used by the model to incorporate the latest risk trend in your portfolio.
   */
  signalReturnReport: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalReturnReportRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalReturnReportResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Opt-in an Item to Signal
   * @description When Link is not initialized with Signal, call `/signal/prepare` to opt-in that Item to the Signal data collection process, developing a Signal score.
   *
   * If you are using other Plaid products after Link, e.g. Identity or Assets, call `/signal/prepare` after those product calls are complete.
   *
   * Example flow: Link is initialized with Auth, call `/auth/get` for the account and routing number, call `/identity/get` to retrieve bank ownership details, then call `/signal/prepare` to begin Signal data collection. Later, once you have obtained details about the proposed transaction from the user, call `/signal/evaluate` for a Signal score. For more information please see [Recommendations for initializing Link with specific product combinations](https://www.plaid.com/docs/link/initializing-products/#recommendations-for-initializing-link-with-specific-product-combinations).
   *
   * If run on an Item that is already initialized with Signal, this endpoint will return a 200 response and will not modify the Item.
   */
  signalPrepare: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["SignalPrepareRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SignalPrepareResponse"];
        };
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create an e-wallet
   * @description Create an e-wallet. The response is the newly created e-wallet object.
   */
  walletCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletCreateResponse"];
        };
      };
    };
  };
  /**
   * Fetch an e-wallet
   * @description Fetch an e-wallet. The response includes the current balance.
   */
  walletGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletGetResponse"];
        };
      };
    };
  };
  /**
   * Fetch a list of e-wallets
   * @description This endpoint lists all e-wallets in descending order of creation.
   */
  walletList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletListResponse"];
        };
      };
    };
  };
  /**
   * Execute a transaction using an e-wallet
   * @description Execute a transaction using the specified e-wallet.
   * Specify the e-wallet to debit from, the counterparty to credit to, the idempotency key to prevent duplicate transactions, the amount and reference for the transaction.
   * Transactions will settle in seconds to several days, depending on the underlying payment rail.
   */
  walletTransactionExecute: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletTransactionExecuteRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactionExecuteResponse"];
        };
      };
    };
  };
  /**
   * Fetch an e-wallet transaction
   * @description Fetch a specific e-wallet transaction
   */
  walletTransactionGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletTransactionGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactionGetResponse"];
        };
      };
    };
  };
  /**
   * List e-wallet transactions
   * @description This endpoint lists the latest transactions of the specified e-wallet. Transactions are returned in descending order by the `created_at` time.
   */
  walletTransactionList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WalletTransactionListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["WalletTransactionListResponse"];
        };
      };
    };
  };
  /**
   * enhance locally-held transaction data
   * @description The `/beta/transactions/v1/enhance` endpoint enriches raw transaction data provided directly by clients.
   *
   * The product is currently in beta.
   */
  transactionsEnhance: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsEnhanceGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsEnhanceGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create transaction category rule
   * @description The `/transactions/rules/v1/create` endpoint creates transaction categorization rules.
   *
   * Rules will be applied on the Item's transactions returned in `/transactions/get` response.
   *
   * The product is currently in beta. To request access, contact transactions-feedback@plaid.com.
   */
  transactionsRulesCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRulesCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRulesCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Return a list of rules created for the Item associated with the access token.
   * @description The `/transactions/rules/v1/list` returns a list of transaction rules created for the Item associated with the access token.
   */
  transactionsRulesList: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRulesListRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRulesListResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Remove transaction rule
   * @description The `/transactions/rules/v1/remove` endpoint is used to remove a transaction rule.
   */
  transactionsRulesRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsRulesRemoveRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsRulesRemoveResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Obtain user insights based on transactions sent through /transactions/enrich
   * @description The `/beta/transactions/user_insights/v1/get` gets user insights for clients who have enriched data with `/transactions/enrich`.
   *
   * The product is currently in beta.
   */
  transactionsUserInsightsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TransactionsUserInsightsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["TransactionsUserInsightsGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create payment profile
   * @deprecated
   * @description Use `/payment_profile/create` endpoint to create a new payment profile.
   * To initiate the account linking experience, call `/link/token/create` and provide the `payment_profile_token` in the `transfer.payment_profile_token` field.
   * You can then use the `payment_profile_token` when creating transfers using `/transfer/authorization/create` and `/transfer/create`.
   */
  paymentProfileCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentProfileCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentProfileCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get payment profile
   * @deprecated
   * @description Use `/payment_profile/get` endpoint to get the status of a given Payment Profile.
   */
  paymentProfileGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentProfileGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentProfileGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Remove payment profile
   * @deprecated
   * @description Use the `/payment_profile/remove` endpoint to remove a given Payment Profile. Once it’s removed, it can no longer be used to create transfers.
   */
  paymentProfileRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaymentProfileRemoveRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PaymentProfileRemoveResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Creates a new end customer for a Plaid reseller.
   * @description The `/partner/customer/create` endpoint is used by reseller partners to create end customers.
   */
  partnerCustomerCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartnerCustomerCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PartnerCustomerCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Returns a Plaid reseller's end customer.
   * @description The `/partner/customer/get` endpoint is used by reseller partners to retrieve data about a single end customer.
   */
  partnerCustomerGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartnerCustomerGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PartnerCustomerGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Enables a Plaid reseller's end customer in the Production environment.
   * @description The `/partner/customer/enable` endpoint is used by reseller partners to enable an end customer in the Production environment.
   */
  partnerCustomerEnable: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartnerCustomerEnableRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PartnerCustomerEnableResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Removes a Plaid reseller's end customer.
   * @description The `/partner/customer/remove` endpoint is used by reseller partners to remove an end customer. Removing an end customer will remove it from view in the Plaid Dashboard and deactivate its API keys. This endpoint can only be used to remove an end customer that has not yet been enabled in Production.
   */
  partnerCustomerRemove: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartnerCustomerRemoveRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PartnerCustomerRemoveResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Returns OAuth-institution registration information for a given end customer.
   * @description The `/partner/customer/oauth_institutions/get` endpoint is used by reseller partners to retrieve OAuth-institution registration information about a single end customer. To learn how to set up a webhook to listen to status update events, visit the [reseller documentation](https://plaid.com/docs/account/resellers/#enabling-end-customers).
   */
  partnerCustomerOauthInstitutionsGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PartnerCustomerOAuthInstitutionsGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["PartnerCustomerOAuthInstitutionsGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Create Hosted Link session
   * @description Use the `/link_delivery/create` endpoint to create a Hosted Link session.
   */
  linkDeliveryCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkDeliveryCreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkDeliveryCreateResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Get Hosted Link session
   * @description Use the `/link_delivery/get` endpoint to get the status of a Hosted Link session.
   */
  linkDeliveryGet: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LinkDeliveryGetRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LinkDeliveryGetResponse"];
        };
      };
      /** @description Error response */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
  /**
   * Webhook receiver for fdx notifications
   * @description A generic webhook receiver endpoint for FDX Event Notifications
   */
  fdxNotifications: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["FDXNotification"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: never;
      };
      /** @description Error response. */
      default: {
        content: {
          "application/json": components["schemas"]["PlaidError"];
        };
      };
    };
  };
}


export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
