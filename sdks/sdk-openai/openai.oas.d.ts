/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/chat/completions": {
    /** Creates a model response for the given chat conversation. */
    post: operations["createChatCompletion"];
  };
  "/completions": {
    /** Creates a completion for the provided prompt and parameters. */
    post: operations["createCompletion"];
  };
  "/edits": {
    /**
     * Creates a new edit for the provided input, instruction, and parameters.
     * @deprecated
     */
    post: operations["createEdit"];
  };
  "/images/generations": {
    /** Creates an image given a prompt. */
    post: operations["createImage"];
  };
  "/images/edits": {
    /** Creates an edited or extended image given an original image and a prompt. */
    post: operations["createImageEdit"];
  };
  "/images/variations": {
    /** Creates a variation of a given image. */
    post: operations["createImageVariation"];
  };
  "/embeddings": {
    /** Creates an embedding vector representing the input text. */
    post: operations["createEmbedding"];
  };
  "/audio/speech": {
    /** Generates audio from the input text. */
    post: operations["createSpeech"];
  };
  "/audio/transcriptions": {
    /** Transcribes audio into the input language. */
    post: operations["createTranscription"];
  };
  "/audio/translations": {
    /** Translates audio into English. */
    post: operations["createTranslation"];
  };
  "/files": {
    /** Returns a list of files that belong to the user's organization. */
    get: operations["listFiles"];
    /**
     * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
     *
     * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
     *
     * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
     */
    post: operations["createFile"];
  };
  "/files/{file_id}": {
    /** Returns information about a specific file. */
    get: operations["retrieveFile"];
    /** Delete a file. */
    delete: operations["deleteFile"];
  };
  "/files/{file_id}/content": {
    /** Returns the contents of the specified file. */
    get: operations["downloadFile"];
  };
  "/fine_tuning/jobs": {
    /** List your organization's fine-tuning jobs */
    get: operations["listPaginatedFineTuningJobs"];
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     *
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     *
     * [Learn more about fine-tuning](/docs/guides/fine-tuning)
     */
    post: operations["createFineTuningJob"];
  };
  "/fine_tuning/jobs/{fine_tuning_job_id}": {
    /**
     * Get info about a fine-tuning job.
     *
     * [Learn more about fine-tuning](/docs/guides/fine-tuning)
     */
    get: operations["retrieveFineTuningJob"];
  };
  "/fine_tuning/jobs/{fine_tuning_job_id}/events": {
    /** Get status updates for a fine-tuning job. */
    get: operations["listFineTuningEvents"];
  };
  "/fine_tuning/jobs/{fine_tuning_job_id}/cancel": {
    /** Immediately cancel a fine-tune job. */
    post: operations["cancelFineTuningJob"];
  };
  "/fine-tunes": {
    /**
     * List your organization's fine-tuning jobs
     *
     * @deprecated
     */
    get: operations["listFineTunes"];
    /**
     * Creates a job that fine-tunes a specified model from a given dataset.
     *
     * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
     *
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
     *
     * @deprecated
     */
    post: operations["createFineTune"];
  };
  "/fine-tunes/{fine_tune_id}": {
    /**
     * Gets info about the fine-tune job.
     *
     * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
     *
     * @deprecated
     */
    get: operations["retrieveFineTune"];
  };
  "/fine-tunes/{fine_tune_id}/cancel": {
    /**
     * Immediately cancel a fine-tune job.
     *
     * @deprecated
     */
    post: operations["cancelFineTune"];
  };
  "/fine-tunes/{fine_tune_id}/events": {
    /**
     * Get fine-grained status updates for a fine-tune job.
     *
     * @deprecated
     */
    get: operations["listFineTuneEvents"];
  };
  "/models": {
    /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
    get: operations["listModels"];
  };
  "/models/{model}": {
    /** Retrieves a model instance, providing basic information about the model such as the owner and permissioning. */
    get: operations["retrieveModel"];
    /** Delete a fine-tuned model. You must have the Owner role in your organization to delete a model. */
    delete: operations["deleteModel"];
  };
  "/moderations": {
    /** Classifies if text violates OpenAI's Content Policy */
    post: operations["createModeration"];
  };
  "/assistants": {
    /** Returns a list of assistants. */
    get: operations["listAssistants"];
    /** Create an assistant with a model and instructions. */
    post: operations["createAssistant"];
  };
  "/assistants/{assistant_id}": {
    /** Retrieves an assistant. */
    get: operations["getAssistant"];
    /** Modifies an assistant. */
    post: operations["modifyAssistant"];
    /** Delete an assistant. */
    delete: operations["deleteAssistant"];
  };
  "/threads": {
    /** Create a thread. */
    post: operations["createThread"];
  };
  "/threads/{thread_id}": {
    /** Retrieves a thread. */
    get: operations["getThread"];
    /** Modifies a thread. */
    post: operations["modifyThread"];
    /** Delete a thread. */
    delete: operations["deleteThread"];
  };
  "/threads/{thread_id}/messages": {
    /** Returns a list of messages for a given thread. */
    get: operations["listMessages"];
    /** Create a message. */
    post: operations["createMessage"];
  };
  "/threads/{thread_id}/messages/{message_id}": {
    /** Retrieve a message. */
    get: operations["getMessage"];
    /** Modifies a message. */
    post: operations["modifyMessage"];
  };
  "/threads/runs": {
    /** Create a thread and run it in one request. */
    post: operations["createThreadAndRun"];
  };
  "/threads/{thread_id}/runs": {
    /** Returns a list of runs belonging to a thread. */
    get: operations["listRuns"];
    /** Create a run. */
    post: operations["createRun"];
  };
  "/threads/{thread_id}/runs/{run_id}": {
    /** Retrieves a run. */
    get: operations["getRun"];
    /** Modifies a run. */
    post: operations["modifyRun"];
  };
  "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs": {
    /** When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. */
    post: operations["submitToolOuputsToRun"];
  };
  "/threads/{thread_id}/runs/{run_id}/cancel": {
    /** Cancels a run that is `in_progress`. */
    post: operations["cancelRun"];
  };
  "/threads/{thread_id}/runs/{run_id}/steps": {
    /** Returns a list of run steps belonging to a run. */
    get: operations["listRunSteps"];
  };
  "/threads/{thread_id}/runs/{run_id}/steps/{step_id}": {
    /** Retrieves a run step. */
    get: operations["getRunStep"];
  };
  "/assistants/{assistant_id}/files": {
    /** Returns a list of assistant files. */
    get: operations["listAssistantFiles"];
    /** Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). */
    post: operations["createAssistantFile"];
  };
  "/assistants/{assistant_id}/files/{file_id}": {
    /** Retrieves an AssistantFile. */
    get: operations["getAssistantFile"];
    /** Delete an assistant file. */
    delete: operations["deleteAssistantFile"];
  };
  "/threads/{thread_id}/messages/{message_id}/files": {
    /** Returns a list of message files. */
    get: operations["listMessageFiles"];
  };
  "/threads/{thread_id}/messages/{message_id}/files/{file_id}": {
    /** Retrieves a message file. */
    get: operations["getMessageFile"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Error: {
      code: string | null;
      message: string;
      param: string | null;
      type: string;
    };
    ErrorResponse: {
      error: components["schemas"]["Error"];
    };
    ListModelsResponse: {
      /** @enum {string} */
      object: "list";
      data: components["schemas"]["Model"][];
    };
    DeleteModelResponse: {
      id: string;
      deleted: boolean;
      object: string;
    };
    CreateCompletionRequest: {
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model: string | ("babbage-002" | "davinci-002" | "gpt-3.5-turbo-instruct" | "text-davinci-003" | "text-davinci-002" | "text-davinci-001" | "code-davinci-002" | "text-curie-001" | "text-babbage-001" | "text-ada-001");
      /**
       * @description The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.
       *
       * Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.
       *
       * @default <|endoftext|>
       */
      prompt: string | string[] | number[] | number[][] | null;
      /**
       * @description Generates `best_of` completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
       *
       * When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.
       *
       * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
       *
       * @default 1
       */
      best_of?: number | null;
      /**
       * @description Echo back the prompt in addition to the completion
       *
       * @default false
       */
      echo?: boolean | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
       *
       * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
       *
       * @default 0
       */
      frequency_penalty?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       *
       * Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       *
       * As an example, you can pass `{"50256": -100}` to prevent the <|endoftext|> token from being generated.
       *
       * @default null
       */
      logit_bias?: {
        [key: string]: number;
      } | null;
      /**
       * @description Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.
       *
       * The maximum value for `logprobs` is 5.
       *
       * @default null
       */
      logprobs?: number | null;
      /**
       * @description The maximum number of [tokens](/tokenizer) that can be generated in the completion.
       *
       * The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
       *
       * @default 16
       * @example 16
       */
      max_tokens?: number | null;
      /**
       * @description How many completions to generate for each prompt.
       *
       * **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.
       *
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
       *
       * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
       *
       * @default 0
       */
      presence_penalty?: number | null;
      /**
       * @description If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
       *
       * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
       */
      seed?: number | null;
      /**
       * @description Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
       *
       * @default null
       */
      stop?: (string | null) | string[] | null;
      /**
       * @description Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
       *
       * @default false
       */
      stream?: boolean | null;
      /**
       * @description The suffix that comes after a completion of inserted text.
       * @default null
       * @example test.
       */
      suffix?: string | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       *
       * We generally recommend altering this or `top_p` but not both.
       *
       * @default 1
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       *
       * We generally recommend altering this or `temperature` but not both.
       *
       * @default 1
       * @example 1
       */
      top_p?: number | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    /** @description Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint). */
    CreateCompletionResponse: {
      /** @description A unique identifier for the completion. */
      id: string;
      /** @description The list of completion choices the model generated for the input prompt. */
      choices: ({
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * `length` if the maximum number of tokens specified in the request was reached,
           * or `content_filter` if content was omitted due to a flag from our content filters.
           *
           * @enum {string}
           */
          finish_reason: "stop" | "length" | "content_filter";
          index: number;
          logprobs: {
            text_offset?: number[];
            token_logprobs?: number[];
            tokens?: string[];
            top_logprobs?: {
                [key: string]: number;
              }[];
          } | null;
          text: string;
        })[];
      /** @description The Unix timestamp (in seconds) of when the completion was created. */
      created: number;
      /** @description The model used for completion. */
      model: string;
      /**
       * @description This fingerprint represents the backend configuration that the model runs with.
       *
       * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
       */
      system_fingerprint?: string;
      /**
       * @description The object type, which is always "text_completion"
       * @enum {string}
       */
      object: "text_completion";
      usage?: components["schemas"]["CompletionUsage"];
    };
    ChatCompletionRequestMessageContentPart: components["schemas"]["ChatCompletionRequestMessageContentPartText"] | components["schemas"]["ChatCompletionRequestMessageContentPartImage"];
    /** Image content part */
    ChatCompletionRequestMessageContentPartImage: {
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "image_url";
      image_url: {
        /**
         * Format: uri
         * @description Either a URL of the image or the base64 encoded image data.
         */
        url: string;
        /**
         * @description Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision/low-or-high-fidelity-image-understanding).
         * @default auto
         * @enum {string}
         */
        detail?: "auto" | "low" | "high";
      };
    };
    /** Text content part */
    ChatCompletionRequestMessageContentPartText: {
      /**
       * @description The type of the content part.
       * @enum {string}
       */
      type: "text";
      /** @description The text content. */
      text: string;
    };
    ChatCompletionRequestMessage: components["schemas"]["ChatCompletionRequestSystemMessage"] | components["schemas"]["ChatCompletionRequestUserMessage"] | components["schemas"]["ChatCompletionRequestAssistantMessage"] | components["schemas"]["ChatCompletionRequestToolMessage"] | components["schemas"]["ChatCompletionRequestFunctionMessage"];
    /** System message */
    ChatCompletionRequestSystemMessage: {
      /** @description The contents of the system message. */
      content: string;
      /**
       * @description The role of the messages author, in this case `system`.
       * @enum {string}
       */
      role: "system";
      /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
      name?: string;
    };
    /** User message */
    ChatCompletionRequestUserMessage: {
      /** @description The contents of the user message. */
      content: string | components["schemas"]["ChatCompletionRequestMessageContentPart"][];
      /**
       * @description The role of the messages author, in this case `user`.
       * @enum {string}
       */
      role: "user";
      /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
      name?: string;
    };
    /** Assistant message */
    ChatCompletionRequestAssistantMessage: {
      /** @description The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified. */
      content?: string | null;
      /**
       * @description The role of the messages author, in this case `assistant`.
       * @enum {string}
       */
      role: "assistant";
      /** @description An optional name for the participant. Provides the model information to differentiate between participants of the same role. */
      name?: string;
      tool_calls?: components["schemas"]["ChatCompletionMessageToolCalls"];
      /**
       * @deprecated
       * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
       */
      function_call?: {
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments: string;
        /** @description The name of the function to call. */
        name: string;
      };
    };
    /** Tool message */
    ChatCompletionRequestToolMessage: {
      /**
       * @description The role of the messages author, in this case `tool`.
       * @enum {string}
       */
      role: "tool";
      /** @description The contents of the tool message. */
      content: string;
      /** @description Tool call that this message is responding to. */
      tool_call_id: string;
    };
    /**
     * Function message
     * @deprecated
     */
    ChatCompletionRequestFunctionMessage: {
      /**
       * @description The role of the messages author, in this case `function`.
       * @enum {string}
       */
      role: "function";
      /** @description The contents of the function message. */
      content: string | null;
      /** @description The name of the function to call. */
      name: string;
    };
    /**
     * @description The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
     *
     * Omitting `parameters` defines a function with an empty parameter list.
     */
    FunctionParameters: {
      [key: string]: unknown;
    };
    /** @deprecated */
    ChatCompletionFunctions: {
      /** @description A description of what the function does, used by the model to choose when and how to call the function. */
      description?: string;
      /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
      name: string;
      parameters?: components["schemas"]["FunctionParameters"];
    };
    /** @description Specifying a particular function via `{"name": "my_function"}` forces the model to call that function. */
    ChatCompletionFunctionCallOption: {
      /** @description The name of the function to call. */
      name: string;
    };
    ChatCompletionTool: {
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
      function: components["schemas"]["FunctionObject"];
    };
    FunctionObject: {
      /** @description A description of what the function does, used by the model to choose when and how to call the function. */
      description?: string;
      /** @description The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */
      name: string;
      parameters?: components["schemas"]["FunctionParameters"];
    };
    /**
     * @description Controls which (if any) function is called by the model.
     * `none` means the model will not call a function and instead generates a message.
     * `auto` means the model can pick between generating a message or calling a function.
     * Specifying a particular function via `{"type: "function", "function": {"name": "my_function"}}` forces the model to call that function.
     *
     * `none` is the default when no functions are present. `auto` is the default if functions are present.
     */
    ChatCompletionToolChoiceOption: ("none" | "auto") | components["schemas"]["ChatCompletionNamedToolChoice"];
    /** @description Specifies a tool the model should use. Use to force the model to call a specific function. */
    ChatCompletionNamedToolChoice: {
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
      function: {
        /** @description The name of the function to call. */
        name: string;
      };
    };
    /** @description The tool calls generated by the model, such as function calls. */
    ChatCompletionMessageToolCalls: components["schemas"]["ChatCompletionMessageToolCall"][];
    ChatCompletionMessageToolCall: {
      /** @description The ID of the tool call. */
      id: string;
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type: "function";
      /** @description The function that the model called. */
      function: {
        /** @description The name of the function to call. */
        name: string;
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments: string;
      };
    };
    ChatCompletionMessageToolCallChunk: {
      index: number;
      /** @description The ID of the tool call. */
      id?: string;
      /**
       * @description The type of the tool. Currently, only `function` is supported.
       * @enum {string}
       */
      type?: "function";
      function?: {
        /** @description The name of the function to call. */
        name?: string;
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments?: string;
      };
    };
    /**
     * @description The role of the author of a message
     * @enum {string}
     */
    ChatCompletionRole: "system" | "user" | "assistant" | "tool" | "function";
    /** @description A chat completion message generated by the model. */
    ChatCompletionResponseMessage: {
      /** @description The contents of the message. */
      content: string | null;
      tool_calls?: components["schemas"]["ChatCompletionMessageToolCalls"];
      /**
       * @description The role of the author of this message.
       * @enum {string}
       */
      role: "assistant";
      /**
       * @deprecated
       * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
       */
      function_call?: {
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments: string;
        /** @description The name of the function to call. */
        name: string;
      };
    };
    /** @description A chat completion delta generated by streamed model responses. */
    ChatCompletionStreamResponseDelta: {
      /** @description The contents of the chunk message. */
      content?: string | null;
      /**
       * @deprecated
       * @description Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
       */
      function_call?: {
        /** @description The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function. */
        arguments?: string;
        /** @description The name of the function to call. */
        name?: string;
      };
      tool_calls?: components["schemas"]["ChatCompletionMessageToolCallChunk"][];
      /**
       * @description The role of the author of this message.
       * @enum {string}
       */
      role?: "system" | "user" | "assistant" | "tool";
    };
    CreateChatCompletionRequest: {
      /** @description A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models). */
      messages: components["schemas"]["ChatCompletionRequestMessage"][];
      /**
       * @description ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
       * @example gpt-3.5-turbo
       */
      model: string | ("gpt-4-1106-preview" | "gpt-4-vision-preview" | "gpt-4" | "gpt-4-0314" | "gpt-4-0613" | "gpt-4-32k" | "gpt-4-32k-0314" | "gpt-4-32k-0613" | "gpt-3.5-turbo" | "gpt-3.5-turbo-16k" | "gpt-3.5-turbo-0301" | "gpt-3.5-turbo-0613" | "gpt-3.5-turbo-1106" | "gpt-3.5-turbo-16k-0613");
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
       *
       * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
       *
       * @default 0
       */
      frequency_penalty?: number | null;
      /**
       * @description Modify the likelihood of specified tokens appearing in the completion.
       *
       * Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
       *
       * @default null
       */
      logit_bias?: {
        [key: string]: number;
      } | null;
      /**
       * @description Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`. This option is currently not available on the `gpt-4-vision-preview` model.
       * @default false
       */
      logprobs?: boolean | null;
      /** @description An integer between 0 and 5 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used. */
      top_logprobs?: number | null;
      /**
       * @description The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.
       *
       * The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
       */
      max_tokens?: number | null;
      /**
       * @description How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
       *
       * [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
       *
       * @default 0
       */
      presence_penalty?: number | null;
      /**
       * @description An object specifying the format that the model must output. Compatible with `gpt-4-1106-preview` and `gpt-3.5-turbo-1106`.
       *
       * Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is valid JSON.
       *
       * **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
       */
      response_format?: {
        /**
         * @description Must be one of `text` or `json_object`.
         * @default text
         * @example json_object
         * @enum {string}
         */
        type?: "text" | "json_object";
      };
      /**
       * @description This feature is in Beta.
       * If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.
       * Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
       */
      seed?: number | null;
      /**
       * @description Up to 4 sequences where the API will stop generating further tokens.
       *
       * @default null
       */
      stop?: (string | null) | string[];
      /**
       * @description If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
       *
       * @default false
       */
      stream?: boolean | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       *
       * We generally recommend altering this or `top_p` but not both.
       *
       * @default 1
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       *
       * We generally recommend altering this or `temperature` but not both.
       *
       * @default 1
       * @example 1
       */
      top_p?: number | null;
      /** @description A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. */
      tools?: components["schemas"]["ChatCompletionTool"][];
      tool_choice?: components["schemas"]["ChatCompletionToolChoiceOption"];
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
      /**
       * @deprecated
       * @description Deprecated in favor of `tool_choice`.
       *
       * Controls which (if any) function is called by the model.
       * `none` means the model will not call a function and instead generates a message.
       * `auto` means the model can pick between generating a message or calling a function.
       * Specifying a particular function via `{"name": "my_function"}` forces the model to call that function.
       *
       * `none` is the default when no functions are present. `auto` is the default if functions are present.
       */
      function_call?: ("none" | "auto") | components["schemas"]["ChatCompletionFunctionCallOption"];
      /**
       * @deprecated
       * @description Deprecated in favor of `tools`.
       *
       * A list of functions the model may generate JSON inputs for.
       */
      functions?: components["schemas"]["ChatCompletionFunctions"][];
    };
    /** @description Represents a chat completion response returned by model, based on the provided input. */
    CreateChatCompletionResponse: {
      /** @description A unique identifier for the chat completion. */
      id: string;
      /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
      choices: ({
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * `length` if the maximum number of tokens specified in the request was reached,
           * `content_filter` if content was omitted due to a flag from our content filters,
           * `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
           *
           * @enum {string}
           */
          finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call";
          /** @description The index of the choice in the list of choices. */
          index: number;
          message: components["schemas"]["ChatCompletionResponseMessage"];
          /** @description Log probability information for the choice. */
          logprobs: ({
            /** @description A list of message content tokens with log probability information. */
            content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
          }) | null;
        })[];
      /** @description The Unix timestamp (in seconds) of when the chat completion was created. */
      created: number;
      /** @description The model used for the chat completion. */
      model: string;
      /**
       * @description This fingerprint represents the backend configuration that the model runs with.
       *
       * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
       */
      system_fingerprint?: string;
      /**
       * @description The object type, which is always `chat.completion`.
       * @enum {string}
       */
      object: "chat.completion";
      usage?: components["schemas"]["CompletionUsage"];
    };
    /** @description Represents a chat completion response returned by model, based on the provided input. */
    CreateChatCompletionFunctionResponse: {
      /** @description A unique identifier for the chat completion. */
      id: string;
      /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
      choices: ({
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.
           *
           * @enum {string}
           */
          finish_reason: "stop" | "length" | "function_call" | "content_filter";
          /** @description The index of the choice in the list of choices. */
          index: number;
          message: components["schemas"]["ChatCompletionResponseMessage"];
        })[];
      /** @description The Unix timestamp (in seconds) of when the chat completion was created. */
      created: number;
      /** @description The model used for the chat completion. */
      model: string;
      /**
       * @description This fingerprint represents the backend configuration that the model runs with.
       *
       * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
       */
      system_fingerprint?: string;
      /**
       * @description The object type, which is always `chat.completion`.
       * @enum {string}
       */
      object: "chat.completion";
      usage?: components["schemas"]["CompletionUsage"];
    };
    ChatCompletionTokenLogprob: {
      /** @description The token. */
      token: string;
      /** @description The log probability of this token. */
      logprob: number;
      /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
      bytes: number[] | null;
      /** @description List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned. */
      top_logprobs: ({
          /** @description The token. */
          token: string;
          /** @description The log probability of this token. */
          logprob: number;
          /** @description A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token. */
          bytes: number[] | null;
        })[];
    };
    ListPaginatedFineTuningJobsResponse: {
      data: components["schemas"]["FineTuningJob"][];
      has_more: boolean;
      /** @enum {string} */
      object: "list";
    };
    /** @description Represents a streamed chunk of a chat completion response returned by model, based on the provided input. */
    CreateChatCompletionStreamResponse: {
      /** @description A unique identifier for the chat completion. Each chunk has the same ID. */
      id: string;
      /** @description A list of chat completion choices. Can be more than one if `n` is greater than 1. */
      choices: ({
          delta: components["schemas"]["ChatCompletionStreamResponseDelta"];
          /** @description Log probability information for the choice. */
          logprobs?: ({
            /** @description A list of message content tokens with log probability information. */
            content: components["schemas"]["ChatCompletionTokenLogprob"][] | null;
          }) | null;
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * `length` if the maximum number of tokens specified in the request was reached,
           * `content_filter` if content was omitted due to a flag from our content filters,
           * `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
           *
           * @enum {string|null}
           */
          finish_reason: "stop" | "length" | "tool_calls" | "content_filter" | "function_call" | null;
          /** @description The index of the choice in the list of choices. */
          index: number;
        })[];
      /** @description The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp. */
      created: number;
      /** @description The model to generate the completion. */
      model: string;
      /**
       * @description This fingerprint represents the backend configuration that the model runs with.
       * Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
       */
      system_fingerprint?: string;
      /**
       * @description The object type, which is always `chat.completion.chunk`.
       * @enum {string}
       */
      object: "chat.completion.chunk";
    };
    /** @description Represents a streamed chunk of a chat completion response returned by model, based on the provided input. */
    CreateChatCompletionImageResponse: Record<string, never>;
    CreateEditRequest: {
      /**
       * @description The instruction that tells the model how to edit the prompt.
       * @example Fix the spelling mistakes.
       */
      instruction: string;
      /**
       * @description ID of the model to use. You can use the `text-davinci-edit-001` or `code-davinci-edit-001` model with this endpoint.
       * @example text-davinci-edit-001
       */
      model: string | ("text-davinci-edit-001" | "code-davinci-edit-001");
      /**
       * @description The input text to use as a starting point for the edit.
       * @default
       * @example What day of the wek is it?
       */
      input?: string | null;
      /**
       * @description How many edits to generate for the input and instruction.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
       *
       * We generally recommend altering this or `top_p` but not both.
       *
       * @default 1
       * @example 1
       */
      temperature?: number | null;
      /**
       * @description An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
       *
       * We generally recommend altering this or `temperature` but not both.
       *
       * @default 1
       * @example 1
       */
      top_p?: number | null;
    };
    /**
     * Edit
     * @deprecated
     */
    CreateEditResponse: {
      /** @description A list of edit choices. Can be more than one if `n` is greater than 1. */
      choices: ({
          /**
           * @description The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
           * `length` if the maximum number of tokens specified in the request was reached,
           * or `content_filter` if content was omitted due to a flag from our content filters.
           *
           * @enum {string}
           */
          finish_reason: "stop" | "length";
          /** @description The index of the choice in the list of choices. */
          index: number;
          /** @description The edited result. */
          text: string;
        })[];
      /**
       * @description The object type, which is always `edit`.
       * @enum {string}
       */
      object: "edit";
      /** @description The Unix timestamp (in seconds) of when the edit was created. */
      created: number;
      usage: components["schemas"]["CompletionUsage"];
    };
    CreateImageRequest: {
      /**
       * @description A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
       * @example A cute baby sea otter
       */
      prompt: string;
      /**
       * @description The model to use for image generation.
       * @default dall-e-2
       * @example dall-e-3
       */
      model?: (string | ("dall-e-2" | "dall-e-3")) | null;
      /**
       * @description The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
       * @default standard
       * @example standard
       * @enum {string}
       */
      quality?: "standard" | "hd";
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`.
       * @default url
       * @example url
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
       * @default 1024x1024
       * @example 1024x1024
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | "1792x1024" | "1024x1792" | null;
      /**
       * @description The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
       * @default vivid
       * @example vivid
       * @enum {string|null}
       */
      style?: "vivid" | "natural" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    ImagesResponse: {
      created: number;
      data: components["schemas"]["Image"][];
    };
    /** @description Represents the url or the content of an image generated by the OpenAI API. */
    Image: {
      /** @description The base64-encoded JSON of the generated image, if `response_format` is `b64_json`. */
      b64_json?: string;
      /** @description The URL of the generated image, if `response_format` is `url` (default). */
      url?: string;
      /** @description The prompt that was used to generate the image, if there was any revision to the prompt. */
      revised_prompt?: string;
    };
    CreateImageEditRequest: {
      /**
       * Format: binary
       * @description The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
       */
      image: string;
      /**
       * @description A text description of the desired image(s). The maximum length is 1000 characters.
       * @example A cute baby sea otter wearing a beret
       */
      prompt: string;
      /**
       * Format: binary
       * @description An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
       */
      mask?: string;
      /**
       * @description The model to use for image generation. Only `dall-e-2` is supported at this time.
       * @default dall-e-2
       * @example dall-e-2
       */
      model?: (string | "dall-e-2") | null;
      /**
       * @description The number of images to generate. Must be between 1 and 10.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
       * @default 1024x1024
       * @example 1024x1024
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`.
       * @default url
       * @example url
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    CreateImageVariationRequest: {
      /**
       * Format: binary
       * @description The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
       */
      image: string;
      /**
       * @description The model to use for image generation. Only `dall-e-2` is supported at this time.
       * @default dall-e-2
       * @example dall-e-2
       */
      model?: (string | "dall-e-2") | null;
      /**
       * @description The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
       * @default 1
       * @example 1
       */
      n?: number | null;
      /**
       * @description The format in which the generated images are returned. Must be one of `url` or `b64_json`.
       * @default url
       * @example url
       * @enum {string|null}
       */
      response_format?: "url" | "b64_json" | null;
      /**
       * @description The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
       * @default 1024x1024
       * @example 1024x1024
       * @enum {string|null}
       */
      size?: "256x256" | "512x512" | "1024x1024" | null;
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    CreateModerationRequest: {
      /** @description The input text to classify */
      input: string | string[];
      /**
       * @description Two content moderations models are available: `text-moderation-stable` and `text-moderation-latest`.
       *
       * The default is `text-moderation-latest` which will be automatically upgraded over time. This ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be slightly lower than for `text-moderation-latest`.
       *
       * @default text-moderation-latest
       * @example text-moderation-stable
       */
      model?: string | ("text-moderation-latest" | "text-moderation-stable");
    };
    /** @description Represents policy compliance report by OpenAI's content moderation model against a given input. */
    CreateModerationResponse: {
      /** @description The unique identifier for the moderation request. */
      id: string;
      /** @description The model used to generate the moderation results. */
      model: string;
      /** @description A list of moderation objects. */
      results: {
          /** @description Whether the content violates [OpenAI's usage policies](/policies/usage-policies). */
          flagged: boolean;
          /** @description A list of the categories, and whether they are flagged or not. */
          categories: {
            /** @description Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harrassment. */
            hate: boolean;
            /** @description Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. */
            "hate/threatening": boolean;
            /** @description Content that expresses, incites, or promotes harassing language towards any target. */
            harassment: boolean;
            /** @description Harassment content that also includes violence or serious harm towards any target. */
            "harassment/threatening": boolean;
            /** @description Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders. */
            "self-harm": boolean;
            /** @description Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders. */
            "self-harm/intent": boolean;
            /** @description Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts. */
            "self-harm/instructions": boolean;
            /** @description Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness). */
            sexual: boolean;
            /** @description Sexual content that includes an individual who is under 18 years old. */
            "sexual/minors": boolean;
            /** @description Content that depicts death, violence, or physical injury. */
            violence: boolean;
            /** @description Content that depicts death, violence, or physical injury in graphic detail. */
            "violence/graphic": boolean;
          };
          /** @description A list of the categories along with their scores as predicted by model. */
          category_scores: {
            /** @description The score for the category 'hate'. */
            hate: number;
            /** @description The score for the category 'hate/threatening'. */
            "hate/threatening": number;
            /** @description The score for the category 'harassment'. */
            harassment: number;
            /** @description The score for the category 'harassment/threatening'. */
            "harassment/threatening": number;
            /** @description The score for the category 'self-harm'. */
            "self-harm": number;
            /** @description The score for the category 'self-harm/intent'. */
            "self-harm/intent": number;
            /** @description The score for the category 'self-harm/instructions'. */
            "self-harm/instructions": number;
            /** @description The score for the category 'sexual'. */
            sexual: number;
            /** @description The score for the category 'sexual/minors'. */
            "sexual/minors": number;
            /** @description The score for the category 'violence'. */
            violence: number;
            /** @description The score for the category 'violence/graphic'. */
            "violence/graphic": number;
          };
        }[];
    };
    ListFilesResponse: {
      data: components["schemas"]["OpenAIFile"][];
      /** @enum {string} */
      object: "list";
    };
    CreateFileRequest: {
      /**
       * Format: binary
       * @description The File object (not file name) to be uploaded.
       */
      file: string;
      /**
       * @description The intended purpose of the uploaded file.
       *
       * Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This allows us to validate the format of the uploaded file is correct for fine-tuning.
       *
       * @enum {string}
       */
      purpose: "fine-tune" | "assistants";
    };
    DeleteFileResponse: {
      id: string;
      /** @enum {string} */
      object: "file";
      deleted: boolean;
    };
    CreateFineTuningJobRequest: {
      /**
       * @description The name of the model to fine-tune. You can select one of the
       * [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
       *
       * @example gpt-3.5-turbo
       */
      model: string | ("babbage-002" | "davinci-002" | "gpt-3.5-turbo");
      /**
       * @description The ID of an uploaded file that contains training data.
       *
       * See [upload file](/docs/api-reference/files/upload) for how to upload a file.
       *
       * Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.
       *
       * See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
       *
       * @example file-abc123
       */
      training_file: string;
      /** @description The hyperparameters used for the fine-tuning job. */
      hyperparameters?: {
        /**
         * @description Number of examples in each batch. A larger batch size means that model parameters
         * are updated less frequently, but with lower variance.
         *
         * @default auto
         */
        batch_size?: "auto" | number;
        /**
         * @description Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
         * overfitting.
         *
         * @default auto
         */
        learning_rate_multiplier?: "auto" | number;
        /**
         * @description The number of epochs to train the model for. An epoch refers to one full cycle
         * through the training dataset.
         *
         * @default auto
         */
        n_epochs?: "auto" | number;
      };
      /**
       * @description A string of up to 18 characters that will be added to your fine-tuned model name.
       *
       * For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel`.
       *
       * @default null
       */
      suffix?: string | null;
      /**
       * @description The ID of an uploaded file that contains validation data.
       *
       * If you provide this file, the data is used to generate validation
       * metrics periodically during fine-tuning. These metrics can be viewed in
       * the fine-tuning results file.
       * The same data should not be present in both train and validation files.
       *
       * Your dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.
       *
       * See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
       *
       * @example file-abc123
       */
      validation_file?: string | null;
    };
    ListFineTuningJobEventsResponse: {
      data: components["schemas"]["FineTuningJobEvent"][];
      /** @enum {string} */
      object: "list";
    };
    CreateFineTuneRequest: {
      /**
       * @description The ID of an uploaded file that contains training data.
       *
       * See [upload file](/docs/api-reference/files/upload) for how to upload a file.
       *
       * Your dataset must be formatted as a JSONL file, where each training
       * example is a JSON object with the keys "prompt" and "completion".
       * Additionally, you must upload your file with the purpose `fine-tune`.
       *
       * See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.
       *
       * @example file-abc123
       */
      training_file: string;
      /**
       * @description The batch size to use for training. The batch size is the number of
       * training examples used to train a single forward and backward pass.
       *
       * By default, the batch size will be dynamically configured to be
       * ~0.2% of the number of examples in the training set, capped at 256 -
       * in general, we've found that larger batch sizes tend to work better
       * for larger datasets.
       *
       * @default null
       */
      batch_size?: number | null;
      /**
       * @description If this is provided, we calculate F-beta scores at the specified
       * beta values. The F-beta score is a generalization of F-1 score.
       * This is only used for binary classification.
       *
       * With a beta of 1 (i.e. the F-1 score), precision and recall are
       * given the same weight. A larger beta score puts more weight on
       * recall and less on precision. A smaller beta score puts more weight
       * on precision and less on recall.
       *
       * @default null
       * @example [
       *   0.6,
       *   1,
       *   1.5,
       *   2
       * ]
       */
      classification_betas?: number[] | null;
      /**
       * @description The number of classes in a classification task.
       *
       * This parameter is required for multiclass classification.
       *
       * @default null
       */
      classification_n_classes?: number | null;
      /**
       * @description The positive class in binary classification.
       *
       * This parameter is needed to generate precision, recall, and F1
       * metrics when doing binary classification.
       *
       * @default null
       */
      classification_positive_class?: string | null;
      /**
       * @description If set, we calculate classification-specific metrics such as accuracy
       * and F-1 score using the validation set at the end of every epoch.
       * These metrics can be viewed in the [results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).
       *
       * In order to compute classification metrics, you must provide a
       * `validation_file`. Additionally, you must
       * specify `classification_n_classes` for multiclass classification or
       * `classification_positive_class` for binary classification.
       *
       * @default false
       */
      compute_classification_metrics?: boolean | null;
      /** @description The hyperparameters used for the fine-tuning job. */
      hyperparameters?: {
        /**
         * @description The number of epochs to train the model for. An epoch refers to one
         * full cycle through the training dataset.
         *
         * @default auto
         */
        n_epochs?: "auto" | number;
      };
      /**
       * @description The learning rate multiplier to use for training.
       * The fine-tuning learning rate is the original learning rate used for
       * pretraining multiplied by this value.
       *
       * By default, the learning rate multiplier is the 0.05, 0.1, or 0.2
       * depending on final `batch_size` (larger learning rates tend to
       * perform better with larger batch sizes). We recommend experimenting
       * with values in the range 0.02 to 0.2 to see what produces the best
       * results.
       *
       * @default null
       */
      learning_rate_multiplier?: number | null;
      /**
       * @description The name of the base model to fine-tune. You can select one of "ada",
       * "babbage", "curie", "davinci", or a fine-tuned model created after 2022-04-21 and before 2023-08-22.
       * To learn more about these models, see the
       * [Models](/docs/models) documentation.
       *
       * @default curie
       * @example curie
       */
      model?: (string | ("ada" | "babbage" | "curie" | "davinci")) | null;
      /**
       * @description The weight to use for loss on the prompt tokens. This controls how
       * much the model tries to learn to generate the prompt (as compared
       * to the completion which always has a weight of 1.0), and can add
       * a stabilizing effect to training when completions are short.
       *
       * If prompts are extremely long (relative to completions), it may make
       * sense to reduce this weight so as to avoid over-prioritizing
       * learning the prompt.
       *
       * @default 0.01
       */
      prompt_loss_weight?: number | null;
      /**
       * @description A string of up to 40 characters that will be added to your fine-tuned model name.
       *
       * For example, a `suffix` of "custom-model-name" would produce a model name like `ada:ft-your-org:custom-model-name-2022-02-15-04-21-04`.
       *
       * @default null
       */
      suffix?: string | null;
      /**
       * @description The ID of an uploaded file that contains validation data.
       *
       * If you provide this file, the data is used to generate validation
       * metrics periodically during fine-tuning. These metrics can be viewed in
       * the [fine-tuning results file](/docs/guides/legacy-fine-tuning/analyzing-your-fine-tuned-model).
       * Your train and validation data should be mutually exclusive.
       *
       * Your dataset must be formatted as a JSONL file, where each validation
       * example is a JSON object with the keys "prompt" and "completion".
       * Additionally, you must upload your file with the purpose `fine-tune`.
       *
       * See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/creating-training-data) for more details.
       *
       * @example file-abc123
       */
      validation_file?: string | null;
    };
    ListFineTunesResponse: {
      data: components["schemas"]["FineTune"][];
      /** @enum {string} */
      object: "list";
    };
    ListFineTuneEventsResponse: {
      data: components["schemas"]["FineTuneEvent"][];
      /** @enum {string} */
      object: "list";
    };
    CreateEmbeddingRequest: {
      /**
       * @description Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.
       *
       * @example The quick brown fox jumped over the lazy dog
       */
      input: string | string[] | number[] | number[][];
      /**
       * @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them.
       *
       * @example text-embedding-ada-002
       */
      model: string | "text-embedding-ada-002";
      /**
       * @description The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
       * @default float
       * @example float
       * @enum {string}
       */
      encoding_format?: "float" | "base64";
      /**
       * @description A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
       *
       * @example user-1234
       */
      user?: string;
    };
    CreateEmbeddingResponse: {
      /** @description The list of embeddings generated by the model. */
      data: components["schemas"]["Embedding"][];
      /** @description The name of the model used to generate the embedding. */
      model: string;
      /**
       * @description The object type, which is always "list".
       * @enum {string}
       */
      object: "list";
      /** @description The usage information for the request. */
      usage: {
        /** @description The number of tokens used by the prompt. */
        prompt_tokens: number;
        /** @description The total number of tokens used by the request. */
        total_tokens: number;
      };
    };
    CreateTranscriptionRequest: {
      /**
       * Format: binary
       * @description The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
       */
      file: string;
      /**
       * @description ID of the model to use. Only `whisper-1` is currently available.
       *
       * @example whisper-1
       */
      model: string | "whisper-1";
      /** @description The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency. */
      language?: string;
      /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language. */
      prompt?: string;
      /**
       * @description The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
       *
       * @default json
       * @enum {string}
       */
      response_format?: "json" | "text" | "srt" | "verbose_json" | "vtt";
      /**
       * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       *
       * @default 0
       */
      temperature?: number;
    };
    CreateTranscriptionResponse: {
      text: string;
    };
    CreateTranslationRequest: {
      /**
       * Format: binary
       * @description The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.
       */
      file: string;
      /**
       * @description ID of the model to use. Only `whisper-1` is currently available.
       *
       * @example whisper-1
       */
      model: string | "whisper-1";
      /** @description An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should be in English. */
      prompt?: string;
      /**
       * @description The format of the transcript output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.
       *
       * @default json
       */
      response_format?: string;
      /**
       * @description The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.
       *
       * @default 0
       */
      temperature?: number;
    };
    CreateTranslationResponse: {
      text: string;
    };
    CreateSpeechRequest: {
      /** @description One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd` */
      model: string | ("tts-1" | "tts-1-hd");
      /** @description The text to generate audio for. The maximum length is 4096 characters. */
      input: string;
      /**
       * @description The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
       * @enum {string}
       */
      voice: "alloy" | "echo" | "fable" | "onyx" | "nova" | "shimmer";
      /**
       * @description The format to audio in. Supported formats are `mp3`, `opus`, `aac`, and `flac`.
       * @default mp3
       * @enum {string}
       */
      response_format?: "mp3" | "opus" | "aac" | "flac";
      /**
       * @description The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
       * @default 1
       */
      speed?: number;
    };
    /**
     * Model
     * @description Describes an OpenAI model offering that can be used with the API.
     */
    Model: {
      /** @description The model identifier, which can be referenced in the API endpoints. */
      id: string;
      /** @description The Unix timestamp (in seconds) when the model was created. */
      created: number;
      /**
       * @description The object type, which is always "model".
       * @enum {string}
       */
      object: "model";
      /** @description The organization that owns the model. */
      owned_by: string;
    };
    /**
     * OpenAIFile
     * @description The `File` object represents a document that has been uploaded to OpenAI.
     */
    OpenAIFile: {
      /** @description The file identifier, which can be referenced in the API endpoints. */
      id: string;
      /** @description The size of the file, in bytes. */
      bytes: number;
      /** @description The Unix timestamp (in seconds) for when the file was created. */
      created_at: number;
      /** @description The name of the file. */
      filename: string;
      /**
       * @description The object type, which is always `file`.
       * @enum {string}
       */
      object: "file";
      /**
       * @description The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`, `assistants`, and `assistants_output`.
       * @enum {string}
       */
      purpose: "fine-tune" | "fine-tune-results" | "assistants" | "assistants_output";
      /**
       * @deprecated
       * @description Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
       * @enum {string}
       */
      status: "uploaded" | "processed" | "error";
      /**
       * @deprecated
       * @description Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
       */
      status_details?: string;
    };
    /** @description Represents an embedding vector returned by embedding endpoint. */
    Embedding: {
      /** @description The index of the embedding in the list of embeddings. */
      index: number;
      /** @description The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings). */
      embedding: number[];
      /**
       * @description The object type, which is always "embedding".
       * @enum {string}
       */
      object: "embedding";
    };
    /**
     * FineTuningJob
     * @description The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
     */
    FineTuningJob: {
      /** @description The object identifier, which can be referenced in the API endpoints. */
      id: string;
      /** @description The Unix timestamp (in seconds) for when the fine-tuning job was created. */
      created_at: number;
      /** @description For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure. */
      error: ({
        /** @description A machine-readable error code. */
        code: string;
        /** @description A human-readable error message. */
        message: string;
        /** @description The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific. */
        param: string | null;
      }) | null;
      /** @description The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running. */
      fine_tuned_model: string | null;
      /** @description The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running. */
      finished_at: number | null;
      /** @description The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. */
      hyperparameters: {
        /**
         * @description The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
         * "auto" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
         * @default auto
         */
        n_epochs: "auto" | number;
      };
      /** @description The base model that is being fine-tuned. */
      model: string;
      /**
       * @description The object type, which is always "fine_tuning.job".
       * @enum {string}
       */
      object: "fine_tuning.job";
      /** @description The organization that owns the fine-tuning job. */
      organization_id: string;
      /** @description The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents). */
      result_files: string[];
      /**
       * @description The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
       * @enum {string}
       */
      status: "validating_files" | "queued" | "running" | "succeeded" | "failed" | "cancelled";
      /** @description The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running. */
      trained_tokens: number | null;
      /** @description The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents). */
      training_file: string;
      /** @description The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents). */
      validation_file: string | null;
    };
    /** @description Fine-tuning job event object */
    FineTuningJobEvent: {
      id: string;
      created_at: number;
      /** @enum {string} */
      level: "info" | "warn" | "error";
      message: string;
      /** @enum {string} */
      object: "fine_tuning.job.event";
    };
    /**
     * @deprecated
     * @description The `FineTune` object represents a legacy fine-tune job that has been created through the API.
     */
    FineTune: {
      /** @description The object identifier, which can be referenced in the API endpoints. */
      id: string;
      /** @description The Unix timestamp (in seconds) for when the fine-tuning job was created. */
      created_at: number;
      /** @description The list of events that have been observed in the lifecycle of the FineTune job. */
      events?: components["schemas"]["FineTuneEvent"][];
      /** @description The name of the fine-tuned model that is being created. */
      fine_tuned_model: string | null;
      /** @description The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/legacy-fine-tuning/hyperparameters) for more details. */
      hyperparams: {
        /**
         * @description The batch size to use for training. The batch size is the number of
         * training examples used to train a single forward and backward pass.
         */
        batch_size: number;
        /** @description The number of classes to use for computing classification metrics. */
        classification_n_classes?: number;
        /** @description The positive class to use for computing classification metrics. */
        classification_positive_class?: string;
        /** @description The classification metrics to compute using the validation dataset at the end of every epoch. */
        compute_classification_metrics?: boolean;
        /** @description The learning rate multiplier to use for training. */
        learning_rate_multiplier: number;
        /**
         * @description The number of epochs to train the model for. An epoch refers to one
         * full cycle through the training dataset.
         */
        n_epochs: number;
        /** @description The weight to use for loss on the prompt tokens. */
        prompt_loss_weight: number;
      };
      /** @description The base model that is being fine-tuned. */
      model: string;
      /**
       * @description The object type, which is always "fine-tune".
       * @enum {string}
       */
      object: "fine-tune";
      /** @description The organization that owns the fine-tuning job. */
      organization_id: string;
      /** @description The compiled results files for the fine-tuning job. */
      result_files: components["schemas"]["OpenAIFile"][];
      /** @description The current status of the fine-tuning job, which can be either `created`, `running`, `succeeded`, `failed`, or `cancelled`. */
      status: string;
      /** @description The list of files used for training. */
      training_files: components["schemas"]["OpenAIFile"][];
      /** @description The Unix timestamp (in seconds) for when the fine-tuning job was last updated. */
      updated_at: number;
      /** @description The list of files used for validation. */
      validation_files: components["schemas"]["OpenAIFile"][];
    };
    /**
     * @deprecated
     * @description Fine-tune event object
     */
    FineTuneEvent: {
      created_at: number;
      level: string;
      message: string;
      /** @enum {string} */
      object: "fine-tune-event";
    };
    /** @description Usage statistics for the completion request. */
    CompletionUsage: {
      /** @description Number of tokens in the generated completion. */
      completion_tokens: number;
      /** @description Number of tokens in the prompt. */
      prompt_tokens: number;
      /** @description Total number of tokens used in the request (prompt + completion). */
      total_tokens: number;
    };
    /**
     * Assistant
     * @description Represents an `assistant` that can call the model and use tools.
     */
    AssistantObject: {
      /** @description The identifier, which can be referenced in API endpoints. */
      id: string;
      /**
       * @description The object type, which is always `assistant`.
       * @enum {string}
       */
      object: "assistant";
      /** @description The Unix timestamp (in seconds) for when the assistant was created. */
      created_at: number;
      /** @description The name of the assistant. The maximum length is 256 characters. */
      name: string | null;
      /** @description The description of the assistant. The maximum length is 512 characters. */
      description: string | null;
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model: string;
      /** @description The system instructions that the assistant uses. The maximum length is 32768 characters. */
      instructions: string | null;
      /**
       * @description A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
       *
       * @default []
       */
      tools: (components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsRetrieval"] | components["schemas"]["AssistantToolsFunction"])[];
      /**
       * @description A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
       *
       * @default []
       */
      file_ids: string[];
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata: unknown;
    };
    CreateAssistantRequest: {
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model: string;
      /** @description The name of the assistant. The maximum length is 256 characters. */
      name?: string | null;
      /** @description The description of the assistant. The maximum length is 512 characters. */
      description?: string | null;
      /** @description The system instructions that the assistant uses. The maximum length is 32768 characters. */
      instructions?: string | null;
      /**
       * @description A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
       *
       * @default []
       */
      tools?: (components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsRetrieval"] | components["schemas"]["AssistantToolsFunction"])[];
      /**
       * @description A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
       *
       * @default []
       */
      file_ids?: string[];
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    ModifyAssistantRequest: {
      /** @description ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them. */
      model?: string;
      /** @description The name of the assistant. The maximum length is 256 characters. */
      name?: string | null;
      /** @description The description of the assistant. The maximum length is 512 characters. */
      description?: string | null;
      /** @description The system instructions that the assistant uses. The maximum length is 32768 characters. */
      instructions?: string | null;
      /**
       * @description A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`.
       *
       * @default []
       */
      tools?: (components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsRetrieval"] | components["schemas"]["AssistantToolsFunction"])[];
      /**
       * @description A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. If a file was previosuly attached to the list but does not show up in the list, it will be deleted from the assistant.
       *
       * @default []
       */
      file_ids?: string[];
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    DeleteAssistantResponse: {
      id: string;
      deleted: boolean;
      /** @enum {string} */
      object: "assistant.deleted";
    };
    ListAssistantsResponse: {
      /** @example list */
      object: string;
      data: components["schemas"]["AssistantObject"][];
      /** @example asst_abc123 */
      first_id: string;
      /** @example asst_abc456 */
      last_id: string;
      /** @example false */
      has_more: boolean;
    };
    /** Code interpreter tool */
    AssistantToolsCode: {
      /**
       * @description The type of tool being defined: `code_interpreter`
       * @enum {string}
       */
      type: "code_interpreter";
    };
    /** Retrieval tool */
    AssistantToolsRetrieval: {
      /**
       * @description The type of tool being defined: `retrieval`
       * @enum {string}
       */
      type: "retrieval";
    };
    /** Function tool */
    AssistantToolsFunction: {
      /**
       * @description The type of tool being defined: `function`
       * @enum {string}
       */
      type: "function";
      function: components["schemas"]["FunctionObject"];
    };
    /**
     * A run on a thread
     * @description Represents an execution run on a [thread](/docs/api-reference/threads).
     */
    RunObject: {
      /** @description The identifier, which can be referenced in API endpoints. */
      id: string;
      /**
       * @description The object type, which is always `thread.run`.
       * @enum {string}
       */
      object: "thread.run";
      /** @description The Unix timestamp (in seconds) for when the run was created. */
      created_at: number;
      /** @description The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run. */
      thread_id: string;
      /** @description The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run. */
      assistant_id: string;
      /**
       * @description The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
       * @enum {string}
       */
      status: "queued" | "in_progress" | "requires_action" | "cancelling" | "cancelled" | "failed" | "completed" | "expired";
      /** @description Details on the action required to continue the run. Will be `null` if no action is required. */
      required_action: {
        /**
         * @description For now, this is always `submit_tool_outputs`.
         * @enum {string}
         */
        type: "submit_tool_outputs";
        /** @description Details on the tool outputs needed for this run to continue. */
        submit_tool_outputs: {
          /** @description A list of the relevant tool calls. */
          tool_calls: components["schemas"]["RunToolCallObject"][];
        };
      } | null;
      /** @description The last error associated with this run. Will be `null` if there are no errors. */
      last_error: ({
        /**
         * @description One of `server_error` or `rate_limit_exceeded`.
         * @enum {string}
         */
        code: "server_error" | "rate_limit_exceeded";
        /** @description A human-readable description of the error. */
        message: string;
      }) | null;
      /** @description The Unix timestamp (in seconds) for when the run will expire. */
      expires_at: number;
      /** @description The Unix timestamp (in seconds) for when the run was started. */
      started_at: number | null;
      /** @description The Unix timestamp (in seconds) for when the run was cancelled. */
      cancelled_at: number | null;
      /** @description The Unix timestamp (in seconds) for when the run failed. */
      failed_at: number | null;
      /** @description The Unix timestamp (in seconds) for when the run was completed. */
      completed_at: number | null;
      /** @description The model that the [assistant](/docs/api-reference/assistants) used for this run. */
      model: string;
      /** @description The instructions that the [assistant](/docs/api-reference/assistants) used for this run. */
      instructions: string;
      /**
       * @description The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
       * @default []
       */
      tools: (components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsRetrieval"] | components["schemas"]["AssistantToolsFunction"])[];
      /**
       * @description The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants) used for this run.
       * @default []
       */
      file_ids: string[];
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata: unknown;
    };
    CreateRunRequest: {
      /** @description The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run. */
      assistant_id: string;
      /** @description The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used. */
      model?: string | null;
      /** @description Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis. */
      instructions?: string | null;
      /** @description Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis. */
      tools?: ((components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsRetrieval"] | components["schemas"]["AssistantToolsFunction"])[]) | null;
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    ListRunsResponse: {
      /** @example list */
      object: string;
      data: components["schemas"]["RunObject"][];
      /** @example run_abc123 */
      first_id: string;
      /** @example run_abc456 */
      last_id: string;
      /** @example false */
      has_more: boolean;
    };
    ModifyRunRequest: {
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    SubmitToolOutputsRunRequest: {
      /** @description A list of tools for which the outputs are being submitted. */
      tool_outputs: {
          /** @description The ID of the tool call in the `required_action` object within the run object the output is being submitted for. */
          tool_call_id?: string;
          /** @description The output of the tool call to be submitted to continue the run. */
          output?: string;
        }[];
    };
    /** @description Tool call objects */
    RunToolCallObject: {
      /** @description The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint. */
      id: string;
      /**
       * @description The type of tool call the output is required for. For now, this is always `function`.
       * @enum {string}
       */
      type: "function";
      /** @description The function definition. */
      function: {
        /** @description The name of the function. */
        name: string;
        /** @description The arguments that the model expects you to pass to the function. */
        arguments: string;
      };
    };
    CreateThreadAndRunRequest: {
      /** @description The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run. */
      assistant_id: string;
      /** @description If no thread is provided, an empty thread will be created. */
      thread?: components["schemas"]["CreateThreadRequest"];
      /** @description The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used. */
      model?: string | null;
      /** @description Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis. */
      instructions?: string | null;
      /** @description Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis. */
      tools?: ((components["schemas"]["AssistantToolsCode"] | components["schemas"]["AssistantToolsRetrieval"] | components["schemas"]["AssistantToolsFunction"])[]) | null;
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    /**
     * Thread
     * @description Represents a thread that contains [messages](/docs/api-reference/messages).
     */
    ThreadObject: {
      /** @description The identifier, which can be referenced in API endpoints. */
      id: string;
      /**
       * @description The object type, which is always `thread`.
       * @enum {string}
       */
      object: "thread";
      /** @description The Unix timestamp (in seconds) for when the thread was created. */
      created_at: number;
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata: unknown;
    };
    CreateThreadRequest: {
      /** @description A list of [messages](/docs/api-reference/messages) to start the thread with. */
      messages?: components["schemas"]["CreateMessageRequest"][];
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    ModifyThreadRequest: {
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    DeleteThreadResponse: {
      id: string;
      deleted: boolean;
      /** @enum {string} */
      object: "thread.deleted";
    };
    ListThreadsResponse: {
      /** @example list */
      object: string;
      data: components["schemas"]["ThreadObject"][];
      /** @example asst_abc123 */
      first_id: string;
      /** @example asst_abc456 */
      last_id: string;
      /** @example false */
      has_more: boolean;
    };
    /**
     * The message object
     * @description Represents a message within a [thread](/docs/api-reference/threads).
     */
    MessageObject: {
      /** @description The identifier, which can be referenced in API endpoints. */
      id: string;
      /**
       * @description The object type, which is always `thread.message`.
       * @enum {string}
       */
      object: "thread.message";
      /** @description The Unix timestamp (in seconds) for when the message was created. */
      created_at: number;
      /** @description The [thread](/docs/api-reference/threads) ID that this message belongs to. */
      thread_id: string;
      /**
       * @description The entity that produced the message. One of `user` or `assistant`.
       * @enum {string}
       */
      role: "user" | "assistant";
      /** @description The content of the message in array of text and/or images. */
      content: (components["schemas"]["MessageContentImageFileObject"] | components["schemas"]["MessageContentTextObject"])[];
      /** @description If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message. */
      assistant_id: string | null;
      /** @description If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message. */
      run_id: string | null;
      /**
       * @description A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
       * @default []
       */
      file_ids: string[];
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata: unknown;
    };
    CreateMessageRequest: {
      /**
       * @description The role of the entity that is creating the message. Currently only `user` is supported.
       * @enum {string}
       */
      role: "user";
      /** @description The content of the message. */
      content: string;
      /**
       * @description A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like `retrieval` and `code_interpreter` that can access and use files.
       * @default []
       */
      file_ids?: string[];
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    ModifyMessageRequest: {
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata?: unknown;
    };
    DeleteMessageResponse: {
      id: string;
      deleted: boolean;
      /** @enum {string} */
      object: "thread.message.deleted";
    };
    ListMessagesResponse: {
      /** @example list */
      object: string;
      data: components["schemas"]["MessageObject"][];
      /** @example msg_abc123 */
      first_id: string;
      /** @example msg_abc123 */
      last_id: string;
      /** @example false */
      has_more: boolean;
    };
    /**
     * Image file
     * @description References an image [File](/docs/api-reference/files) in the content of a message.
     */
    MessageContentImageFileObject: {
      /**
       * @description Always `image_file`.
       * @enum {string}
       */
      type: "image_file";
      image_file: {
        /** @description The [File](/docs/api-reference/files) ID of the image in the message content. */
        file_id: string;
      };
    };
    /**
     * Text
     * @description The text content that is part of a message.
     */
    MessageContentTextObject: {
      /**
       * @description Always `text`.
       * @enum {string}
       */
      type: "text";
      text: {
        /** @description The data that makes up the text. */
        value: string;
        annotations: (components["schemas"]["MessageContentTextAnnotationsFileCitationObject"] | components["schemas"]["MessageContentTextAnnotationsFilePathObject"])[];
      };
    };
    /**
     * File citation
     * @description A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "retrieval" tool to search files.
     */
    MessageContentTextAnnotationsFileCitationObject: {
      /**
       * @description Always `file_citation`.
       * @enum {string}
       */
      type: "file_citation";
      /** @description The text in the message content that needs to be replaced. */
      text: string;
      file_citation: {
        /** @description The ID of the specific File the citation is from. */
        file_id: string;
        /** @description The specific quote in the file. */
        quote: string;
      };
      start_index: number;
      end_index: number;
    };
    /**
     * File path
     * @description A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
     */
    MessageContentTextAnnotationsFilePathObject: {
      /**
       * @description Always `file_path`.
       * @enum {string}
       */
      type: "file_path";
      /** @description The text in the message content that needs to be replaced. */
      text: string;
      file_path: {
        /** @description The ID of the file that was generated. */
        file_id: string;
      };
      start_index: number;
      end_index: number;
    };
    /**
     * Run steps
     * @description Represents a step in execution of a run.
     */
    RunStepObject: {
      /** @description The identifier of the run step, which can be referenced in API endpoints. */
      id: string;
      /**
       * @description The object type, which is always `thread.run.step`.
       * @enum {string}
       */
      object: "thread.run.step";
      /** @description The Unix timestamp (in seconds) for when the run step was created. */
      created_at: number;
      /** @description The ID of the [assistant](/docs/api-reference/assistants) associated with the run step. */
      assistant_id: string;
      /** @description The ID of the [thread](/docs/api-reference/threads) that was run. */
      thread_id: string;
      /** @description The ID of the [run](/docs/api-reference/runs) that this run step is a part of. */
      run_id: string;
      /**
       * @description The type of run step, which can be either `message_creation` or `tool_calls`.
       * @enum {string}
       */
      type: "message_creation" | "tool_calls";
      /**
       * @description The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
       * @enum {string}
       */
      status: "in_progress" | "cancelled" | "failed" | "completed" | "expired";
      /** @description The details of the run step. */
      step_details: components["schemas"]["RunStepDetailsMessageCreationObject"] | components["schemas"]["RunStepDetailsToolCallsObject"];
      /** @description The last error associated with this run step. Will be `null` if there are no errors. */
      last_error: ({
        /**
         * @description One of `server_error` or `rate_limit_exceeded`.
         * @enum {string}
         */
        code: "server_error" | "rate_limit_exceeded";
        /** @description A human-readable description of the error. */
        message: string;
      }) | null;
      /** @description The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired. */
      expired_at: number | null;
      /** @description The Unix timestamp (in seconds) for when the run step was cancelled. */
      cancelled_at: number | null;
      /** @description The Unix timestamp (in seconds) for when the run step failed. */
      failed_at: number | null;
      /** @description The Unix timestamp (in seconds) for when the run step completed. */
      completed_at: number | null;
      /** @description Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. */
      metadata: unknown;
    };
    ListRunStepsResponse: {
      /** @example list */
      object: string;
      data: components["schemas"]["RunStepObject"][];
      /** @example step_abc123 */
      first_id: string;
      /** @example step_abc456 */
      last_id: string;
      /** @example false */
      has_more: boolean;
    };
    /**
     * Message creation
     * @description Details of the message creation by the run step.
     */
    RunStepDetailsMessageCreationObject: {
      /**
       * @description Always `message_creation`.
       * @enum {string}
       */
      type: "message_creation";
      message_creation: {
        /** @description The ID of the message that was created by this run step. */
        message_id: string;
      };
    };
    /**
     * Tool calls
     * @description Details of the tool call.
     */
    RunStepDetailsToolCallsObject: {
      /**
       * @description Always `tool_calls`.
       * @enum {string}
       */
      type: "tool_calls";
      /** @description An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`. */
      tool_calls: (components["schemas"]["RunStepDetailsToolCallsCodeObject"] | components["schemas"]["RunStepDetailsToolCallsRetrievalObject"] | components["schemas"]["RunStepDetailsToolCallsFunctionObject"])[];
    };
    /**
     * Code interpreter tool call
     * @description Details of the Code Interpreter tool call the run step was involved in.
     */
    RunStepDetailsToolCallsCodeObject: {
      /** @description The ID of the tool call. */
      id: string;
      /**
       * @description The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
       * @enum {string}
       */
      type: "code_interpreter";
      /** @description The Code Interpreter tool call definition. */
      code_interpreter: {
        /** @description The input to the Code Interpreter tool call. */
        input: string;
        /** @description The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type. */
        outputs: (components["schemas"]["RunStepDetailsToolCallsCodeOutputLogsObject"] | components["schemas"]["RunStepDetailsToolCallsCodeOutputImageObject"])[];
      };
    };
    /**
     * Code interpreter log output
     * @description Text output from the Code Interpreter tool call as part of a run step.
     */
    RunStepDetailsToolCallsCodeOutputLogsObject: {
      /**
       * @description Always `logs`.
       * @enum {string}
       */
      type: "logs";
      /** @description The text output from the Code Interpreter tool call. */
      logs: string;
    };
    /** Code interpreter image output */
    RunStepDetailsToolCallsCodeOutputImageObject: {
      /**
       * @description Always `image`.
       * @enum {string}
       */
      type: "image";
      image: {
        /** @description The [file](/docs/api-reference/files) ID of the image. */
        file_id: string;
      };
    };
    /** Retrieval tool call */
    RunStepDetailsToolCallsRetrievalObject: {
      /** @description The ID of the tool call object. */
      id: string;
      /**
       * @description The type of tool call. This is always going to be `retrieval` for this type of tool call.
       * @enum {string}
       */
      type: "retrieval";
      /** @description For now, this is always going to be an empty object. */
      retrieval: Record<string, never>;
    };
    /** Function tool call */
    RunStepDetailsToolCallsFunctionObject: {
      /** @description The ID of the tool call object. */
      id: string;
      /**
       * @description The type of tool call. This is always going to be `function` for this type of tool call.
       * @enum {string}
       */
      type: "function";
      /** @description The definition of the function that was called. */
      function: {
        /** @description The name of the function. */
        name: string;
        /** @description The arguments passed to the function. */
        arguments: string;
        /** @description The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet. */
        output: string | null;
      };
    };
    /**
     * Assistant files
     * @description A list of [Files](/docs/api-reference/files) attached to an `assistant`.
     */
    AssistantFileObject: {
      /** @description The identifier, which can be referenced in API endpoints. */
      id: string;
      /**
       * @description The object type, which is always `assistant.file`.
       * @enum {string}
       */
      object: "assistant.file";
      /** @description The Unix timestamp (in seconds) for when the assistant file was created. */
      created_at: number;
      /** @description The assistant ID that the file is attached to. */
      assistant_id: string;
    };
    CreateAssistantFileRequest: {
      /** @description A [File](/docs/api-reference/files) ID (with `purpose="assistants"`) that the assistant should use. Useful for tools like `retrieval` and `code_interpreter` that can access files. */
      file_id: string;
    };
    /** @description Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself. */
    DeleteAssistantFileResponse: {
      id: string;
      deleted: boolean;
      /** @enum {string} */
      object: "assistant.file.deleted";
    };
    ListAssistantFilesResponse: {
      /** @example list */
      object: string;
      data: components["schemas"]["AssistantFileObject"][];
      /** @example file-abc123 */
      first_id: string;
      /** @example file-abc456 */
      last_id: string;
      /** @example false */
      has_more: boolean;
    };
    /**
     * Message files
     * @description A list of files attached to a `message`.
     */
    MessageFileObject: {
      /** @description The identifier, which can be referenced in API endpoints. */
      id: string;
      /**
       * @description The object type, which is always `thread.message.file`.
       * @enum {string}
       */
      object: "thread.message.file";
      /** @description The Unix timestamp (in seconds) for when the message file was created. */
      created_at: number;
      /** @description The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files) is attached to. */
      message_id: string;
    };
    ListMessageFilesResponse: {
      /** @example list */
      object: string;
      data: components["schemas"]["MessageFileObject"][];
      /** @example file-abc123 */
      first_id: string;
      /** @example file-abc456 */
      last_id: string;
      /** @example false */
      has_more: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Creates a model response for the given chat conversation. */
  createChatCompletion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateChatCompletionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateChatCompletionResponse"];
        };
      };
    };
  };
  /** Creates a completion for the provided prompt and parameters. */
  createCompletion: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCompletionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateCompletionResponse"];
        };
      };
    };
  };
  /**
   * Creates a new edit for the provided input, instruction, and parameters.
   * @deprecated
   */
  createEdit: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEditRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateEditResponse"];
        };
      };
    };
  };
  /** Creates an image given a prompt. */
  createImage: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateImageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates an edited or extended image given an original image and a prompt. */
  createImageEdit: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateImageEditRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates a variation of a given image. */
  createImageVariation: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateImageVariationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ImagesResponse"];
        };
      };
    };
  };
  /** Creates an embedding vector representing the input text. */
  createEmbedding: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateEmbeddingRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateEmbeddingResponse"];
        };
      };
    };
  };
  /** Generates audio from the input text. */
  createSpeech: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateSpeechRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          /** @description chunked */
          "Transfer-Encoding"?: string;
        };
        content: {
          "application/octet-stream": string;
        };
      };
    };
  };
  /** Transcribes audio into the input language. */
  createTranscription: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateTranscriptionRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateTranscriptionResponse"];
        };
      };
    };
  };
  /** Translates audio into English. */
  createTranslation: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateTranslationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateTranslationResponse"];
        };
      };
    };
  };
  /** Returns a list of files that belong to the user's organization. */
  listFiles: {
    parameters: {
      query?: {
        /** @description Only return files with the given purpose. */
        purpose?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFilesResponse"];
        };
      };
    };
  };
  /**
   * Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.
   *
   * The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.
   *
   * Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
   */
  createFile: {
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["CreateFileRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpenAIFile"];
        };
      };
    };
  };
  /** Returns information about a specific file. */
  retrieveFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request. */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["OpenAIFile"];
        };
      };
    };
  };
  /** Delete a file. */
  deleteFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request. */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteFileResponse"];
        };
      };
    };
  };
  /** Returns the contents of the specified file. */
  downloadFile: {
    parameters: {
      path: {
        /** @description The ID of the file to use for this request. */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  /** List your organization's fine-tuning jobs */
  listPaginatedFineTuningJobs: {
    parameters: {
      query?: {
        /** @description Identifier for the last job from the previous pagination request. */
        after?: string;
        /** @description Number of fine-tuning jobs to retrieve. */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListPaginatedFineTuningJobsResponse"];
        };
      };
    };
  };
  /**
   * Creates a job that fine-tunes a specified model from a given dataset.
   *
   * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
   *
   * [Learn more about fine-tuning](/docs/guides/fine-tuning)
   */
  createFineTuningJob: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFineTuningJobRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTuningJob"];
        };
      };
    };
  };
  /**
   * Get info about a fine-tuning job.
   *
   * [Learn more about fine-tuning](/docs/guides/fine-tuning)
   */
  retrieveFineTuningJob: {
    parameters: {
      path: {
        /** @description The ID of the fine-tuning job. */
        fine_tuning_job_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTuningJob"];
        };
      };
    };
  };
  /** Get status updates for a fine-tuning job. */
  listFineTuningEvents: {
    parameters: {
      query?: {
        /** @description Identifier for the last event from the previous pagination request. */
        after?: string;
        /** @description Number of events to retrieve. */
        limit?: number;
      };
      path: {
        /** @description The ID of the fine-tuning job to get events for. */
        fine_tuning_job_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFineTuningJobEventsResponse"];
        };
      };
    };
  };
  /** Immediately cancel a fine-tune job. */
  cancelFineTuningJob: {
    parameters: {
      path: {
        /** @description The ID of the fine-tuning job to cancel. */
        fine_tuning_job_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTuningJob"];
        };
      };
    };
  };
  /**
   * List your organization's fine-tuning jobs
   *
   * @deprecated
   */
  listFineTunes: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFineTunesResponse"];
        };
      };
    };
  };
  /**
   * Creates a job that fine-tunes a specified model from a given dataset.
   *
   * Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.
   *
   * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
   *
   * @deprecated
   */
  createFineTune: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFineTuneRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /**
   * Gets info about the fine-tune job.
   *
   * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
   *
   * @deprecated
   */
  retrieveFineTune: {
    parameters: {
      path: {
        /** @description The ID of the fine-tune job */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /**
   * Immediately cancel a fine-tune job.
   *
   * @deprecated
   */
  cancelFineTune: {
    parameters: {
      path: {
        /** @description The ID of the fine-tune job to cancel */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["FineTune"];
        };
      };
    };
  };
  /**
   * Get fine-grained status updates for a fine-tune job.
   *
   * @deprecated
   */
  listFineTuneEvents: {
    parameters: {
      query?: {
        /**
         * @description Whether to stream events for the fine-tune job. If set to true,
         * events will be sent as data-only
         * [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
         * as they become available. The stream will terminate with a
         * `data: [DONE]` message when the job is finished (succeeded, cancelled,
         * or failed).
         *
         * If set to false, only events generated so far will be returned.
         */
        stream?: boolean;
      };
      path: {
        /** @description The ID of the fine-tune job to get events for. */
        fine_tune_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListFineTuneEventsResponse"];
        };
      };
    };
  };
  /** Lists the currently available models, and provides basic information about each one such as the owner and availability. */
  listModels: {
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListModelsResponse"];
        };
      };
    };
  };
  /** Retrieves a model instance, providing basic information about the model such as the owner and permissioning. */
  retrieveModel: {
    parameters: {
      path: {
        /** @description The ID of the model to use for this request */
        model: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["Model"];
        };
      };
    };
  };
  /** Delete a fine-tuned model. You must have the Owner role in your organization to delete a model. */
  deleteModel: {
    parameters: {
      path: {
        /** @description The model to delete */
        model: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteModelResponse"];
        };
      };
    };
  };
  /** Classifies if text violates OpenAI's Content Policy */
  createModeration: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateModerationRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["CreateModerationResponse"];
        };
      };
    };
  };
  /** Returns a list of assistants. */
  listAssistants: {
    parameters: {
      query?: {
        /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */
        limit?: number;
        /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. */
        order?: "asc" | "desc";
        /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */
        after?: string;
        /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */
        before?: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListAssistantsResponse"];
        };
      };
    };
  };
  /** Create an assistant with a model and instructions. */
  createAssistant: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAssistantRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantObject"];
        };
      };
    };
  };
  /** Retrieves an assistant. */
  getAssistant: {
    parameters: {
      path: {
        /** @description The ID of the assistant to retrieve. */
        assistant_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantObject"];
        };
      };
    };
  };
  /** Modifies an assistant. */
  modifyAssistant: {
    parameters: {
      path: {
        /** @description The ID of the assistant to modify. */
        assistant_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModifyAssistantRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantObject"];
        };
      };
    };
  };
  /** Delete an assistant. */
  deleteAssistant: {
    parameters: {
      path: {
        /** @description The ID of the assistant to delete. */
        assistant_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteAssistantResponse"];
        };
      };
    };
  };
  /** Create a thread. */
  createThread: {
    requestBody?: {
      content: {
        "application/json": components["schemas"]["CreateThreadRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadObject"];
        };
      };
    };
  };
  /** Retrieves a thread. */
  getThread: {
    parameters: {
      path: {
        /** @description The ID of the thread to retrieve. */
        thread_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadObject"];
        };
      };
    };
  };
  /** Modifies a thread. */
  modifyThread: {
    parameters: {
      path: {
        /** @description The ID of the thread to modify. Only the `metadata` can be modified. */
        thread_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModifyThreadRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ThreadObject"];
        };
      };
    };
  };
  /** Delete a thread. */
  deleteThread: {
    parameters: {
      path: {
        /** @description The ID of the thread to delete. */
        thread_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteThreadResponse"];
        };
      };
    };
  };
  /** Returns a list of messages for a given thread. */
  listMessages: {
    parameters: {
      query?: {
        /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */
        limit?: number;
        /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. */
        order?: "asc" | "desc";
        /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */
        after?: string;
        /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */
        before?: string;
      };
      path: {
        /** @description The ID of the [thread](/docs/api-reference/threads) the messages belong to. */
        thread_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListMessagesResponse"];
        };
      };
    };
  };
  /** Create a message. */
  createMessage: {
    parameters: {
      path: {
        /** @description The ID of the [thread](/docs/api-reference/threads) to create a message for. */
        thread_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateMessageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MessageObject"];
        };
      };
    };
  };
  /** Retrieve a message. */
  getMessage: {
    parameters: {
      path: {
        /** @description The ID of the [thread](/docs/api-reference/threads) to which this message belongs. */
        thread_id: string;
        /** @description The ID of the message to retrieve. */
        message_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MessageObject"];
        };
      };
    };
  };
  /** Modifies a message. */
  modifyMessage: {
    parameters: {
      path: {
        /** @description The ID of the thread to which this message belongs. */
        thread_id: string;
        /** @description The ID of the message to modify. */
        message_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModifyMessageRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MessageObject"];
        };
      };
    };
  };
  /** Create a thread and run it in one request. */
  createThreadAndRun: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateThreadAndRunRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunObject"];
        };
      };
    };
  };
  /** Returns a list of runs belonging to a thread. */
  listRuns: {
    parameters: {
      query?: {
        /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */
        limit?: number;
        /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. */
        order?: "asc" | "desc";
        /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */
        after?: string;
        /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */
        before?: string;
      };
      path: {
        /** @description The ID of the thread the run belongs to. */
        thread_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListRunsResponse"];
        };
      };
    };
  };
  /** Create a run. */
  createRun: {
    parameters: {
      path: {
        /** @description The ID of the thread to run. */
        thread_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRunRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunObject"];
        };
      };
    };
  };
  /** Retrieves a run. */
  getRun: {
    parameters: {
      path: {
        /** @description The ID of the [thread](/docs/api-reference/threads) that was run. */
        thread_id: string;
        /** @description The ID of the run to retrieve. */
        run_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunObject"];
        };
      };
    };
  };
  /** Modifies a run. */
  modifyRun: {
    parameters: {
      path: {
        /** @description The ID of the [thread](/docs/api-reference/threads) that was run. */
        thread_id: string;
        /** @description The ID of the run to modify. */
        run_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModifyRunRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunObject"];
        };
      };
    };
  };
  /** When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. */
  submitToolOuputsToRun: {
    parameters: {
      path: {
        /** @description The ID of the [thread](/docs/api-reference/threads) to which this run belongs. */
        thread_id: string;
        /** @description The ID of the run that requires the tool output submission. */
        run_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitToolOutputsRunRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunObject"];
        };
      };
    };
  };
  /** Cancels a run that is `in_progress`. */
  cancelRun: {
    parameters: {
      path: {
        /** @description The ID of the thread to which this run belongs. */
        thread_id: string;
        /** @description The ID of the run to cancel. */
        run_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunObject"];
        };
      };
    };
  };
  /** Returns a list of run steps belonging to a run. */
  listRunSteps: {
    parameters: {
      query?: {
        /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */
        limit?: number;
        /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. */
        order?: "asc" | "desc";
        /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */
        after?: string;
        /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */
        before?: string;
      };
      path: {
        /** @description The ID of the thread the run and run steps belong to. */
        thread_id: string;
        /** @description The ID of the run the run steps belong to. */
        run_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListRunStepsResponse"];
        };
      };
    };
  };
  /** Retrieves a run step. */
  getRunStep: {
    parameters: {
      path: {
        /** @description The ID of the thread to which the run and run step belongs. */
        thread_id: string;
        /** @description The ID of the run to which the run step belongs. */
        run_id: string;
        /** @description The ID of the run step to retrieve. */
        step_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["RunStepObject"];
        };
      };
    };
  };
  /** Returns a list of assistant files. */
  listAssistantFiles: {
    parameters: {
      query?: {
        /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */
        limit?: number;
        /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. */
        order?: "asc" | "desc";
        /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */
        after?: string;
        /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */
        before?: string;
      };
      path: {
        /** @description The ID of the assistant the file belongs to. */
        assistant_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListAssistantFilesResponse"];
        };
      };
    };
  };
  /** Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants). */
  createAssistantFile: {
    parameters: {
      path: {
        /** @description The ID of the assistant for which to create a File. */
        assistant_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAssistantFileRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantFileObject"];
        };
      };
    };
  };
  /** Retrieves an AssistantFile. */
  getAssistantFile: {
    parameters: {
      path: {
        /** @description The ID of the assistant who the file belongs to. */
        assistant_id: string;
        /** @description The ID of the file we're getting. */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["AssistantFileObject"];
        };
      };
    };
  };
  /** Delete an assistant file. */
  deleteAssistantFile: {
    parameters: {
      path: {
        /** @description The ID of the assistant that the file belongs to. */
        assistant_id: string;
        /** @description The ID of the file to delete. */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["DeleteAssistantFileResponse"];
        };
      };
    };
  };
  /** Returns a list of message files. */
  listMessageFiles: {
    parameters: {
      query?: {
        /** @description A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20. */
        limit?: number;
        /** @description Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order. */
        order?: "asc" | "desc";
        /** @description A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list. */
        after?: string;
        /** @description A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list. */
        before?: string;
      };
      path: {
        /** @description The ID of the thread that the message and files belong to. */
        thread_id: string;
        /** @description The ID of the message that the files belongs to. */
        message_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["ListMessageFilesResponse"];
        };
      };
    };
  };
  /** Retrieves a message file. */
  getMessageFile: {
    parameters: {
      path: {
        /** @description The ID of the thread to which the message and File belong. */
        thread_id: string;
        /** @description The ID of the message the file belongs to. */
        message_id: string;
        /** @description The ID of the file being retrieved. */
        file_id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["MessageFileObject"];
        };
      };
    };
  };
}


export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
