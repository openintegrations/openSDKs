/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/account/{id}": {
    get: operations["getAccount"];
  };
  "/purchase/{id}": {
    get: operations["getPurchase"];
  };
  "/journalentry/{id}": {
    get: operations["getJournalEntry"];
  };
  "/invoice/{id}": {
    get: operations["getInvoice"];
  };
  "/payment/{id}": {
    get: operations["getPayment"];
  };
  "/bill/{id}": {
    get: operations["getBill"];
  };
  "/billpayment/{id}": {
    get: operations["getBillPayment"];
  };
  "/creditmemo/{id}": {
    get: operations["getCreditMemo"];
  };
  "/deposit/{id}": {
    get: operations["getDeposit"];
  };
  "/transfer/{id}": {
    get: operations["getTransfer"];
  };
  "/vendor/{id}": {
    get: operations["getVendor"];
  };
  "/customer/{id}": {
    get: operations["getCustomer"];
  };
  "/item/{id}": {
    get: operations["getItem"];
  };
  "/companyinfo/{id}": {
    get: operations["getCompanyInfo"];
  };
  "/query": {
    get: operations["query"];
  };
  "/preferences": {
    get: operations["getPreferences"];
  };
  "/reports/TransactionList": {
    get: operations["getTransactionList"];
  };
  "/cdc": {
    get: operations["cdc"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    EntityName: "Account" | "Purchase" | "JournalEntry" | "Invoice" | "Payment" | "Bill" | "BillPayment" | "CreditMemo" | "Deposit" | "Transfer" | "Vendor" | "Customer" | "Item" | "CompanyInfo";
    Account: {
      Id: string;
      domain: string;
      /** @enum {string} */
      status?: "deleted";
      Metadata: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
      AccountSubType: string;
      AccountType: string;
      Active: boolean;
      Classification: "Asset" | "Equity" | "Expense" | "Liability" | "Revenue";
      CurrencyRef: {
        name: string;
        value: string;
      };
      CurrentBalance: number;
      CurrentBalanceWithSubAccounts: number;
      FullyQualifiedName: string;
      Name: string;
      SubAccount: boolean;
      SyncToken: string;
      sparse: boolean;
    };
    Purchase: {
      Id: string;
      domain: string;
      /** @enum {string} */
      status?: "deleted";
      Metadata: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
      AccountRef: {
        value: string;
        name: string;
      };
      PaymentMethodRef?: {
        value: string;
      };
      PaymentType: string;
      EntityRef?: {
        value: string;
        name: string;
        type?: string;
      };
      Credit?: boolean;
      TotalAmt: number;
      PurchaseEx: {
        any: {
            name: string;
            declaredType: string;
            scope: string;
            value: {
              Name: string;
              Value: string;
            };
            nil: boolean;
            globalScope: boolean;
            typeSubstituted: boolean;
          }[];
      };
      sparse: boolean;
      SyncToken: string;
      TxnDate: string;
      CurrencyRef: {
        name: string;
        value: string;
      };
      PrivateNote: string;
      Line: {
          Id: string;
          Description: string;
          Amount: number;
          DetailType: string;
          AccountBasedExpenseLineDetail?: {
            AccountRef: {
              value: string;
              name: string;
            };
            BillableStatus: string;
            TaxCodeRef: {
              value: string;
            };
            CustomerRef?: {
              value: string;
              name: string;
            };
          };
        }[];
      DocNumber?: string;
    };
    JournalEntry: {
      Id: string;
      domain: string;
      /** @enum {string} */
      status?: "deleted";
      Metadata: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
      Adjustment: boolean;
      sparse: boolean;
      SyncToken: string;
      DocNumber: string;
      TxnDate: string;
      CurrencyRef: {
        name: string;
        value: string;
      };
      PrivateNote?: string;
      Line: ({
          Id: string;
          Description: string;
          Amount: number;
          DetailType: string;
          JournalEntryLineDetail: {
            PostingType: "Debit" | "Credit";
            Entity?: {
              Type: string;
              EntityRef: {
                value: string;
                name: string;
                type?: string;
              };
            };
            AccountRef: {
              value: string;
              name: string;
            };
          };
        })[];
    };
    Invoice: {
      Id: string;
      domain: string;
      /** @enum {string} */
      status?: "deleted";
      Metadata: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
      AllowIPNPayment: boolean;
      AllowOnlineACHPayment: boolean;
      AllowOnlineCreditCardPayment: boolean;
      AllowOnlinePayment: boolean;
      ApplyTaxAfterDiscount: boolean;
      Balance: number;
      CurrencyRef: {
        name: string;
        value: string;
      };
      CustomField: unknown[];
      CustomerRef: {
        value: string;
        name: string;
      };
      Deposit: number;
      DocNumber: string;
      DueDate: string;
      EmailStatus: string;
      Line: {
          Amount: number;
          Description?: string;
          DetailType: string;
          Id?: string;
          LineNum?: number;
          SalesItemLineDetail?: {
            ItemRef: {
              name: string;
              value: string;
            };
            Qty: number;
            TaxCodeRef: {
              value: string;
            };
          };
          SubTotalLineDetail?: Record<string, never>;
          DiscountLineDetail?: {
            DiscountAccountRef: {
              name: string;
              value: string;
            };
          };
        }[];
      LinkedTxn: {
          TxnId: string;
          TxnType: string;
        }[];
      PrintStatus: string;
      PrivateNote: string;
      SyncToken: string;
      TotalAmt: number;
      TxnDate: string;
      sparse: boolean;
    };
    Payment: {
      Id: string;
      domain: string;
      /** @enum {string} */
      status?: "deleted";
      Metadata: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
      CurrencyRef: {
        name: string;
        value: string;
      };
      CustomerRef: {
        value: string;
        name: string;
      };
      DepositToAccountRef?: {
        value: string;
      };
      Line: {
          Amount: number;
          LineEx: {
            any: {
                declaredType: string;
                globalScope: boolean;
                name: string;
                nil: boolean;
                scope: string;
                typeSubstituted: boolean;
                value: {
                  Name: string;
                  Value: string;
                };
              }[];
          };
          LinkedTxn: {
              TxnId: string;
              TxnType: string;
            }[];
        }[];
      PrivateNote: string;
      ProcessPayment: boolean;
      SyncToken: string;
      TotalAmt: number;
      TxnDate: string;
      UnappliedAmt: number;
      sparse: boolean;
    };
    Deposit: {
      Id: string;
      domain: string;
      /** @enum {string} */
      status?: "deleted";
      Metadata: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
      CurrencyRef: {
        name: string;
        value: string;
      };
      DepositToAccountRef: {
        name: string;
        value: string;
      };
      Line: {
          Amount: number;
          DepositLineDetail?: {
            AccountRef?: {
              value: string;
              name: string;
            };
            Entity?: {
              Type: string;
              EntityRef: {
                value: string;
                name: string;
                type?: string;
              };
            };
          };
          Description: string;
          DetailType: string;
          Id: string;
          LineNum: number;
        }[];
      PrivateNote: string;
      SyncToken: string;
      TotalAmt: number;
      TxnDate: string;
      sparse: boolean;
    };
    Vendor: {
      Id: string;
      domain: string;
      /** @enum {string} */
      status?: "deleted";
      Metadata: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
      DisplayName: string;
      PrintOnCheckName?: string;
    };
    CompanyInfo: {
      CompanyName: string;
      LegalName: string;
      CompanyAddr: {
        Id: string;
        Line1: string;
        City: string;
        Country: string;
        CountrySubDivisionCode: string;
        PostalCode: string;
      };
      CustomerCommunicationAddr: {
        Id: string;
        Line1: string;
        City: string;
        Country: string;
        CountrySubDivisionCode: string;
        PostalCode: string;
      };
      LegalAddr: {
        Id: string;
        Line1: string;
        City: string;
        Country: string;
        CountrySubDivisionCode: string;
        PostalCode: string;
      };
      PrimaryPhone: {
        FreeFormNumber: string;
      };
      CompanyStartDate: string;
      FiscalYearStartMonth: string;
      Country: string;
      Email: {
        Address: string;
      };
      WebAddr: Record<string, never>;
      SupportedLanguages: string;
      NameValue: {
          Name: string;
          Value: string;
        }[];
      domain: string;
      sparse: boolean;
      Id: string;
      SyncToken: string;
      MetaData: {
        CreateTime: string;
        LastUpdatedTime: string;
      };
    };
    QueryResponse: {
      CompanyInfo?: components["schemas"]["CompanyInfo"][];
      Account?: components["schemas"]["Account"][];
      JournalEntry?: components["schemas"]["JournalEntry"][];
      Purchase?: components["schemas"]["Purchase"][];
      Deposit?: components["schemas"]["Deposit"][];
      Payment?: components["schemas"]["Payment"][];
      Invoice?: components["schemas"]["Invoice"][];
      Vendor?: components["schemas"]["Vendor"][];
      Bill?: unknown[];
      BillPayment?: unknown[];
      CreditMemo?: unknown[];
      Transfer?: unknown[];
      Customer?: unknown[];
      Item?: unknown[];
      maxResults: number;
      startPosition: number;
      totalCount?: number;
    };
    Report: {
      Header: {
        Time: string;
        ReportName: string;
        DateMacro: string;
        StartPeriod: string;
        EndPeriod: string;
        Currency: string;
        Option: {
            Name: string;
            Value: string;
          }[];
      };
      Columns: {
        Column: {
            ColTitle: string;
            ColType: string;
          }[];
      };
      Rows: {
          Row: {
              ColData: {
                  value: string;
                  id?: string;
                }[];
              type: string;
            }[];
        }[];
    };
    CDCPayload: {
      CDCResponse: {
          QueryResponse: components["schemas"]["QueryResponse"][];
        }[];
      time: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  getAccount: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Account: components["schemas"]["Account"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getPurchase: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Purchase: components["schemas"]["Purchase"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getJournalEntry: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            JournalEntry: components["schemas"]["JournalEntry"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getInvoice: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Invoice: components["schemas"]["Invoice"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getPayment: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Payment: components["schemas"]["Payment"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getBill: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Bill?: unknown;
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getBillPayment: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            BillPayment?: unknown;
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getCreditMemo: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            CreditMemo?: unknown;
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getDeposit: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Deposit: components["schemas"]["Deposit"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getTransfer: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Transfer?: unknown;
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getVendor: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Vendor: components["schemas"]["Vendor"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getCustomer: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Customer?: unknown;
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getItem: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            Item?: unknown;
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  getCompanyInfo: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            CompanyInfo: components["schemas"]["CompanyInfo"];
            /** Format: date-time */
            time: string;
          };
        };
      };
    };
  };
  query: {
    parameters: {
      query: {
        query: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            QueryResponse: components["schemas"]["QueryResponse"];
            time: string;
          };
        };
      };
    };
  };
  getPreferences: {
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getTransactionList: {
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Report"];
        };
      };
    };
  };
  cdc: {
    parameters: {
      query: {
        changedSince: string;
        entities: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": unknown;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CDCPayload"];
        };
      };
    };
  };
}


export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
