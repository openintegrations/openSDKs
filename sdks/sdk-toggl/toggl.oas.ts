/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v9/organizations": {
    /** Creates a new organization */
    post: {
      requestBody: {
        content: {
          "application/json": {
            name?: string;
            workspace_name?: string;
          };
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
              id?: number;
              name?: string;
              workspace_id?: number;
              workspace_name?: string;
            };
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/v9/organizations/{organization_id}": {
    /** Get Organization data */
    get: {
      parameters: {
        path: {
          organization_id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
               admin?: boolean;
              at?: string;
              created_at?: string;
              id?: number;
              is_multi_workspace_enabled?: boolean;
              is_unified?: boolean;
              max_data_retention_days?: number;
              max_workspaces?: number;
              name?: string;
              owner?: boolean;
              payment_methods?: string;
              pricing_plan_id?: number;
              server_deleted_at?: string | null;
              suspended_at?: string;
              trial_info?: ({
                  last_pricing_plan_id?: number | null;
                  next_payment_date?: string | null;
                  trial?: boolean;
                  trial_available?: boolean;
                  trial_end_date?: string | null;
                  user_count?: number;
                })[];
            };
          };
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
    /** Updates an existing organization */
    put: {
      parameters: {
        path: {
          organization_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            name?: string;
          };
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/v9/organizations/{organization_id}/users": {
    /** List of users in organization */
    get: {
      parameters: {
        query?: {
          filter?: string;
          active_status?: string;
          only_admins?: string;
          groups?: string;
          workspaces?: string;
          page?: number;
          per_page?: number;
          sort_dir?: string;
        };
        path: {
          organization_id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: {
            "application/json": {
                admin?: boolean;
                avatar_url?: string;
                can_edit_email?: boolean;
                email?: string;
                groups?: {
                    group_id?: number;
                    name?: string;
                  }[];
                id?: number;
                inactive?: boolean;
                invitation_code?: string;
                joined?: boolean;
                name?: string;
                owner?: boolean;
                user_id?: number;
                workspaces?: {
                    admin?: boolean;
                    inactive?: boolean;
                    name?: string;
                    role?: string;
                    workspace_id?: number;
                  }[];
              }[];
          };
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
    /** Apply changes in bulk to users in an organization */
    patch: {
      parameters: {
        path: {
          organization_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            delete?: number[];
          };
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/v9/organizations/{organization_id}/users/leave": {
    /** Leaves organization */
    delete: {
      parameters: {
        path: {
          organization_id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
  "/api/v9/organizations/{organization_id}/users/{organization_user_id}": {
    /** Changes a single organization-user */
    put: {
      parameters: {
        path: {
          organization_id: number;
          organization_user_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            email?: string;
            groups?: number[];
            inactive?: boolean;
            name?: string;
            organization_admin?: boolean;
            workspaces?: {
                admin?: boolean;
                inactive?: boolean;
                name?: string;
                role?: string;
                workspace_id?: number;
              }[];
          };
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/v9/organizations/{organization_id}/workspaces/statistics": {
    /** Statistics for all workspaces in the organization */
    get: {
      parameters: {
        path: {
          organization_id: number;
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
        /** @description Not Found */
        404: {
          content: never;
        };
      };
    };
  };
  "/api/v9/organizations/{organization_id}/workspaces/{workspace_id}/assignments": {
    /** Change assignments of users within a workspace */
    put: {
      parameters: {
        path: {
          organization_id: number;
          workspace_id: number;
        };
      };
      requestBody: {
        content: {
          "application/json": {
            group_id?: number;
            joined?: boolean;
            operation?: string;
            user_id?: number;
          };
        };
      };
      responses: {
        /** @description Successful operation */
        200: {
          content: never;
        };
        /** @description Bad Request */
        400: {
          content: never;
        };
        /** @description Forbidden */
        403: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export type components = Record<string, never>;

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
