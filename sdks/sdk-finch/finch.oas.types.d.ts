/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** OneOf type helpers */
type Without<T, U> = {[P in Exclude<keyof T, keyof U>]?: never}
type XOR<T, U> = T | U extends object
  ? (Without<T, U> & U) | (Without<U, T> & T)
  : T | U
type OneOf<T extends any[]> = T extends [infer Only]
  ? Only
  : T extends [infer A, infer B, ...infer Rest]
    ? OneOf<[XOR<A, B>, ...Rest]>
    : never

export interface paths {
  '/employer/company': {
    /**
     * Company
     * @description Read basic company data
     */
    get: operations['get-company']
  }
  '/employer/directory': {
    /**
     * Directory
     * @description Read company directory and organization structure
     */
    get: operations['get-directory']
  }
  '/employer/individual': {
    /**
     * Individual
     * @description Read individual data, excluding income and employment data
     */
    post: operations['get-individual']
  }
  '/employer/employment': {
    /**
     * Employment
     * @description Read individual employment and income data
     */
    post: operations['get-employment']
  }
  '/employer/payment': {
    /**
     * Payment
     * @description Read payroll and contractor related payments by the company.
     */
    get: operations['get-payment']
  }
  '/employer/pay-statement': {
    /**
     * Pay Statement
     * @description Read detailed pay statements for each individual.
     *
     * Deduction and contribution types are supported by the payroll systems that supports Benefits.
     */
    post: operations['get-pay-statement']
  }
  '/employer/pay-groups': {
    /**
     * Get All Pay Groups
     * @description Read company pay groups and frequencies
     */
    get: operations['get-all-pay-groups']
    parameters: {
      query?: {
        individual_id?: string
        pay_frequencies?: string[]
      }
    }
  }
  '/employer/pay-groups/{pay_group_id}': {
    /**
     * Get Pay Group
     * @description Read information from a single pay group
     */
    get: operations['get-pay-group']
    parameters: {
      path: {
        pay_group_id: string
      }
    }
  }
  '/employer/benefits': {
    /**
     * Get All Deductions
     * @description List all company-wide deductions and contributions.
     */
    get: operations['get-company-benefits']
    /**
     * Create Deduction
     * @description Creates a new company-wide deduction or contribution. Please use the `/providers` endpoint to view available types for each provider.
     */
    post: operations['create-company-benefits']
  }
  '/employer/benefits/register': {
    /**
     * Register Deduction
     * @description Register existing benefits from the customer on the provider, on Finch's end. Please use the `/provider` endpoint to view available types for each provider.
     */
    post: operations['register-company-benefits']
  }
  '/employer/benefits/meta': {
    /**
     * [Deprecated] Get Deductions Metadata
     * @description Get deductions metadata
     */
    get: operations['get-company-benefits-meta']
  }
  '/employer/benefits/{benefit_id}': {
    /**
     * Get Deduction
     * @description Lists deductions and contributions information for a given item
     */
    get: operations['get-company-benefit']
    /**
     * Update Deduction
     * @description Updates an existing company-wide deduction or contribution
     */
    post: operations['update-company-benefits']
    parameters: {
      path: {
        benefit_id: string
      }
    }
  }
  '/employer/benefits/{benefit_id}/enrolled': {
    /**
     * Get Enrolled Individuals
     * @description Lists individuals currently enrolled in a given deduction.
     */
    get: operations['get-company-benefits-enrolled']
    parameters: {
      path: {
        benefit_id: string
      }
    }
  }
  '/employer/benefits/{benefit_id}/individuals': {
    /**
     * Get Deductions for Individuals
     * @description Get enrollment information for the given individuals.
     */
    get: operations['get-individual-benefits']
    /**
     * Enroll Individuals in Deductions
     * @description Enroll an individual into a deduction or contribution. This is an overwrite operation. If the employee is already enrolled, the enrollment amounts will be adjusted. Making the same request multiple times will not create new enrollments, but will continue to set the state of the existing enrollment.
     */
    post: operations['post-employer-individual-benefits-benefit_id']
    /**
     * Unenroll Individuals from Deductions
     * @description Unenroll individuals from a deduction or contribution
     */
    delete: operations['delete-individual-benefits']
    parameters: {
      path: {
        benefit_id: string
      }
    }
  }
  '/auth/token': {
    /**
     * Create Access Token
     * @description Exchange the authorization code for an access token
     */
    post: operations['create-access-token']
  }
  '/providers': {
    /**
     * Providers
     * @description Return details on all available payroll and HR systems.
     */
    get: operations['get-providers']
  }
  '/introspect': {
    /**
     * Introspect
     * @description Read account information associated with an `access_token`
     */
    get: operations['get-introspect']
  }
  '/disconnect': {
    /**
     * Disconnect
     * @description Disconnect one or more `access_token`s from your application.
     */
    post: operations['post-disconnect']
  }
  '/forward': {
    /**
     * Request Forwarding
     * @description The Forward API allows you to make direct requests to an employment system. If Finch’s unified API
     * doesn’t have a data model that cleanly fits your needs, then Forward allows you to push or pull
     * data models directly against an integration’s API.
     */
    post: operations['post-forward']
  }
  '/jobs/automated': {
    /**
     * List All Automated Jobs
     * @description Get all automated jobs. Automated jobs are completed by a machine. By default, jobs are sorted in descending order by submission time. For scheduled jobs such as data syncs, only the next scheduled job is shown.
     */
    get: operations['get-jobs-automated']
    /**
     * Enqueue a New Automated Job
     * @description Enqueue an automated job. Currently, only the `data_sync_all` job type is supported, which will enqueue a job to re-sync all data for a connection. `data_sync_all` has a concurrency limit of 1 job at a time per connection. This means that if this endpoint is called while a job is already in progress for this connection, Finch will return the `job_id` of the job that is currently in progress. Finch allows a fixed window rate limit of 1 forced refresh per hour per connection.
     *
     * This endpoint is available for *Scale* tier customers as an add-on. To request access to this endpoint, please contact your Finch account manager.
     */
    post: operations['post-jobs-automated']
  }
  '/jobs/automated/{job_id}': {
    /**
     * Retrieve an Automated Job
     * @description Get an automated job by `job_id`.
     */
    get: operations['get-jobs-job_id']
    parameters: {
      path: {
        job_id: string
      }
    }
  }
  '/jobs/manual/{job_id}': {
    /**
     * Retrieve a Manual Job
     * @description Get a manual job by `job_id`. Manual jobs are completed by a human and include Assisted Benefits jobs.
     */
    get: operations['get-jobs-manual-job_id']
    parameters: {
      path: {
        job_id: string
      }
    }
  }
  '/sandbox/connections': {
    /**
     * Create a new Sandbox Connection
     * @description Create a new connection (new company/provider pair) with a new account
     */
    post: operations['post-sandbox-connections']
  }
  '/sandbox/connections/accounts': {
    /**
     * Update a sandbox account
     * @description Update an existing sandbox account. Change the connection status to understand how the Finch API responds.
     */
    put: operations['put-sandbox-connections-accounts']
    /**
     * Create a new sandbox account
     * @description Create a new account for an existing connection (company/provider pair)
     */
    post: operations['post-sandbox-connections-accounts']
  }
  '/sandbox/company': {
    /** Update a sandbox company's data */
    put: operations['put-sandbox-company']
  }
  '/sandbox/directory': {
    /** Add new individuals to a sandbox company */
    post: operations['post-sandbox-directory']
  }
  '/sandbox/individual/{individual_id}': {
    /** Update sandbox individual */
    put: operations['put-sandbox-individual-individual_id']
    parameters: {
      path: {
        individual_id: string
      }
    }
  }
  '/sandbox/employment/{individual_id}': {
    /** Update sandbox employment */
    put: operations['put-sandbox-employment-individual_id']
    parameters: {
      path: {
        individual_id: string
      }
    }
  }
  '/sandbox/payment': {
    /** Add a new sandbox payment */
    post: operations['post-sandbox-payment']
  }
  '/sandbox/jobs': {
    /** Enqueue a new sandbox job */
    post: operations['post-sandbox-job']
  }
  '/sandbox/jobs/configuration': {
    /** Get configurations for sandbox jobs */
    get: operations['get-sandbox-jobs-configuration']
    /** Update configurations for sandbox jobs */
    put: operations['put-sandbox-jobs-configuration']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    CompanyWithoutId: {
      /** @description The legal name of the company. */
      legal_name?: string | null
      /** @description The entity type object. */
      entity?: {
        /**
         * @description The tax payer type of the company.
         * @enum {string|null}
         */
        type?:
          | 'llc'
          | 'lp'
          | 'corporation'
          | 'sole_proprietor'
          | 'non_profit'
          | 'partnership'
          | 'cooperative'
          | null
        /**
         * @description The tax payer subtype of the company.
         * @enum {string|null}
         */
        subtype?: 's_corporation' | 'c_corporation' | 'b_corporation' | null
      } | null
      /** @description The email of the main administrator on the account. */
      primary_email?: string | null
      /** @description The phone number of the main administrator on the account. Format: `XXXXXXXXXX` */
      primary_phone_number?: string | null
      /** @description The array of company departments. */
      departments?:
        | ({
            /** @description The department name. */
            name?: string | null
            /** @description The parent department, if present. */
            parent?: {
              /** @description The parent department's name. */
              name?: string | null
            } | null
          } | null)[]
        | null
      /** @description The employer identification number. */
      ein?: string | null
      locations?: components['schemas']['Location'][] | null
      /** @description An array of bank account objects associated with the payroll/HRIS system. */
      accounts?:
        | {
            /** @description A nine-digit code that's based on the U.S. Bank location where your account was opened. */
            routing_number?: string | null
            /** @description The name of the bank associated in the payroll/HRIS system. */
            account_name?: string | null
            /** @description Name of the banking institution. */
            institution_name?: string | null
            /**
             * @description The type of bank account.
             * @enum {string|null}
             */
            account_type?: 'checking' | 'savings' | null
            /** @description 10-12 digit number to specify the bank account */
            account_number?: string | null
          }[]
        | null
    }
    /** Company */
    Company: components['schemas']['CompanyWithoutId'] & {
      /** @description A stable Finch `id` (UUID v4) for the company. */
      id?: string
    }
    IndividualWithoutId: {
      /** @description The legal first name of the individual. */
      first_name?: string | null
      /** @description The legal middle name of the individual. */
      middle_name?: string | null
      /** @description The legal last name of the individual. */
      last_name?: string | null
      /** @description The preferred name of the individual. */
      preferred_name?: string | null
      emails?:
        | {
            data?: string
            /** @enum {string} */
            type?: 'work' | 'personal' | null
          }[]
        | null
      phone_numbers?:
        | ({
            data?: string
            /** @enum {string} */
            type?: 'work' | 'personal' | null
          } | null)[]
        | null
      /**
       * @description The gender of the individual.
       * @enum {string|null}
       */
      gender?: 'female' | 'male' | 'other' | 'decline_to_specify' | null
      /**
       * @description The EEOC-defined ethnicity of the individual.
       * @enum {string|null}
       */
      ethnicity?:
        | 'asian'
        | 'white'
        | 'black_or_african_american'
        | 'native_hawaiian_or_pacific_islander'
        | 'american_indian_or_alaska_native'
        | 'hispanic_or_latino'
        | 'two_or_more_races'
        | 'decline_to_specify'
        | null
      dob?: components['schemas']['Date']
      /** @description Social Security Number of the individual. This field is only available with the `ssn` scope enabled and the `options: { include: ['ssn'] }` param set in the body. */
      ssn?: string | null
      /** @description Social Security Number of the individual in **encrypted** format. This field is only available with the `ssn` scope enabled and the `options: { include: ['ssn'] }` param set in the body. */
      encrypted_ssn?: string | null
      residence?: components['schemas']['Location']
    }
    /** Individual */
    Individual: components['schemas']['IndividualWithoutId'] & {
      /** @description A stable Finch `id` (UUID v4) for an individual in the company. */
      id?: string
    }
    EmploymentWithoutId: {
      /** @description The legal first name of the individual. */
      first_name?: string | null
      /** @description The legal middle name of the individual. */
      middle_name?: string | null
      /** @description The legal last name of the individual. */
      last_name?: string | null
      /** @description The current title of the individual. */
      title?: string | null
      /** @description The manager object representing the manager of the individual within the org. */
      manager?: {
        /** @description A stable Finch `id` (UUID v4) for an individual in the company. */
        id?: string
      } | null
      /** @description The department object. */
      department?: {
        /** @description The name of the department associated with the individual. */
        name?: string | null
      } | null
      /** @description The employment object. */
      employment?: {
        /**
         * @description The main employment type of the individual.
         * @enum {string|null}
         */
        type?: 'employee' | 'contractor' | null
        /**
         * @description 	The secondary employment type of the individual. Options: `full_time`, `part_time`, `intern`, `temp`, `seasonal` and `individual_contractor`.
         * @enum {string|null}
         */
        subtype?:
          | 'full_time'
          | 'intern'
          | 'part_time'
          | 'temp'
          | 'seasonal'
          | 'individual_contractor'
          | null
      } | null
      start_date?: components['schemas']['Date']
      end_date?: components['schemas']['Date']
      /** @description `true` if the individual an an active employee or contractor at the company. */
      is_active?: boolean | null
      /** @description Worker's compensation classification code for this employee */
      class_code?: string | null
      location?: components['schemas']['Location']
      income?: components['schemas']['Income']
      /** @description The array of income history. */
      income_history?: components['schemas']['Income'][] | null
      /** @description Custom fields for the individual. These are fields which are defined by the employer in the system. Custom fields are not currently supported for assisted connections. */
      custom_fields?: {
        name?: string | null
        value?: unknown
      }[]
      /** @description The source system's unique employment identifier for this individual */
      source_id?: string
    }
    /** Employment */
    Employment: components['schemas']['EmploymentWithoutId'] & {
      /** @description A stable Finch `id` (UUID v4) for an individual in the company. */
      id?: string
    }
    /**
     * ConnectionStatus
     * @enum {unknown}
     */
    ConnectionStatus:
      | 'pending'
      | 'processing'
      | 'connected'
      | 'error_no_account_setup'
      | 'error_permissions'
      | 'reauth'
    /** SandboxJobConfiguration */
    SandboxJobConfiguration: {
      /** @enum {unknown} */
      type: 'data_sync_all'
      /** @enum {unknown} */
      completion_status:
        | 'complete'
        | 'reauth_error'
        | 'permissions_error'
        | 'error'
    }
    /**
     * AuthenticationType
     * @enum {unknown}
     */
    AuthenticationType: 'credential' | 'api_token' | 'oauth' | 'assisted'
    BaseWebhookEvent: {
      /** @description Unique Finch id of the company for which data has been updated. */
      company_id: string
      /** @description Unique Finch id of the employer account that was used to make this connection. */
      account_id: string
      /** @description The type of webhook being delivered. */
      event_type: string
      /** @description More information about the associated event. */
      data: Record<string, never>
    }
    WebhookEvent:
      | components['schemas']['AccountUpdateEvent']
      | components['schemas']['JobCompletionEvent']
      | components['schemas']['CompanyEvent']
      | components['schemas']['DirectoryEvent']
      | components['schemas']['EmploymentEvent']
      | components['schemas']['IndividualEvent']
      | components['schemas']['PaymentEvent']
      | components['schemas']['PayStatementEvent']
    AccountUpdateEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?: 'account.updated'
      data?: {
        status: components['schemas']['ConnectionStatus']
        authentication_method: components['schemas']['AuthenticationMethod']
      }
    }
    JobCompletionEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?:
        | 'job.benefit_create.updated'
        | 'job.benefit_enroll.updated'
        | 'job.benefit_register.updated'
        | 'job.benefit_unenroll.updated'
        | 'job.benefit_update.updated'
        | 'job.data_sync_all.updated'
      data?: {
        /** @description The id of the job which has completed. */
        job_id: string
        /** @description The url to query the result of the job. */
        job_url: string
      }
    }
    CompanyEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?: 'company.updated'
      data?: {
        [key: string]: unknown
      } | null
    }
    DirectoryEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?:
        | 'directory.created'
        | 'directory.updated'
        | 'directory.deleted'
      data?: {
        /** @description The ID of the individual related to the event. */
        individual_id?: string
      }
    }
    EmploymentEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?:
        | 'employment.created'
        | 'employment.updated'
        | 'employment.deleted'
      data?: {
        /** @description The ID of the individual related to the event. */
        individual_id?: string
      }
    }
    IndividualEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?:
        | 'individual.created'
        | 'individual.updated'
        | 'individual.deleted'
      data?: {
        /** @description The ID of the individual related to the event. */
        individual_id?: string
      }
    }
    PaymentIdentifiers: {
      /** @description The ID of the payment. */
      payment_id?: string
      /** @description The date of the payment. */
      pay_date?: string
    }
    PaymentEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?: 'payment.created' | 'payment.updated' | 'payment.deleted'
      data?: components['schemas']['PaymentIdentifiers']
    }
    PayStatementEvent: components['schemas']['BaseWebhookEvent'] & {
      /** @enum {string} */
      event_type?:
        | 'pay_statement.created'
        | 'pay_statement.updated'
        | 'pay_statement.deleted'
      data?: {
        /** @description The ID of the payment associated with the pay statement. */
        payment_id?: string
        /** @description The ID of the individual associated with the pay statement. */
        individual_id?: string
      }
    }
    CreateAccessTokenResponse: {
      access_token: string
      /** @description The Finch uuid of the account used to connect this company. */
      account_id: string
      client_type: components['schemas']['ClientType']
      /** @description The Finch uuid of the company associated with the `access_token`. */
      company_id: string
      connection_type: components['schemas']['ConnectionType']
      /** @description An array of the authorized products associated with the `access_token`. */
      products: string[]
      /** @description The payroll provider associated with the `access_token`. */
      provider_id: string
    }
    /** AutomatedAsyncJob */
    AutomatedAsyncJob: {
      /**
       * Format: uuid
       * @description The id of the job that has been created.
       */
      job_id?: string
      /** @description The url that can be used to retrieve the job status */
      job_url?: string
      /**
       * @description Only `data_sync_all` currently supported
       * @enum {string}
       */
      type?: 'data_sync_all'
      /** @enum {string} */
      status?:
        | 'pending'
        | 'in_progress'
        | 'complete'
        | 'error'
        | 'reauth_error'
        | 'permissions_error'
      /**
       * Format: date-time
       * @description The datetime when the job was created. for scheduled jobs, this will be the initial connection time. For ad-hoc jobs, this will be the time the creation request was received.
       */
      created_at?: string
      /**
       * Format: date-time
       * @description The datetime a job is scheduled to be run. For scheduled jobs, this datetime can be in the future if the job has not yet been enqueued. For ad-hoc jobs, this field will be null.
       */
      scheduled_at?: string | null
      /**
       * Format: date-time
       * @description The datetime a job entered into the job queue.
       */
      started_at?: string | null
      /**
       * Format: date-time
       * @description The datetime the job completed.
       */
      completed_at?: string | null
    }
    /** ManualAsyncJob */
    ManualAsyncJob: {
      /** Format: uuid */
      job_id?: string
      /** @enum {string} */
      status?: 'pending' | 'in_progress' | 'error' | 'complete'
      /** @description Specific information about the job, such as individual statuses for batch jobs. */
      body?: unknown[] | null
    }
    /** GetCompany */
    GetCompanyResponse: {
      /** @description A stable Finch `id` (UUID v4) for the company. */
      id?: string
      /** @description The legal name of the company. */
      legal_name?: string | null
      /** @description The entity type object. */
      entity?: {
        /**
         * @description The tax payer type of the company.
         * @enum {string|null}
         */
        type?:
          | 'llc'
          | 'lp'
          | 'corporation'
          | 'sole_proprietor'
          | 'non_profit'
          | 'partnership'
          | 'cooperative'
          | null
        /**
         * @description The tax payer subtype of the company.
         * @enum {string|null}
         */
        subtype?: 's_corporation' | 'c_corporation' | 'b_corporation' | null
      } | null
      /** @description The email of the main administrator on the account. */
      primary_email?: string | null
      /** @description The phone number of the main administrator on the account. Format: `XXXXXXXXXX` */
      primary_phone_number?: string | null
      /** @description The array of company departments. */
      departments?:
        | ({
            /** @description The department name. */
            name?: string | null
            /** @description The parent department, if present. */
            parent?: {
              /** @description The parent department's name. */
              name?: string | null
            } | null
          } | null)[]
        | null
      /** @description The employer identification number. */
      ein?: string | null
      locations?: components['schemas']['Location'][] | null
      /** @description An array of bank account objects associated with the payroll/HRIS system. */
      accounts?:
        | {
            /** @description A nine-digit code that's based on the U.S. Bank location where your account was opened. */
            routing_number?: string | null
            /** @description The name of the bank associated in the payroll/HRIS system. */
            account_name?: string | null
            /** @description Name of the banking institution. */
            institution_name?: string | null
            /**
             * @description The type of bank account.
             * @enum {string|null}
             */
            account_type?: 'checking' | 'savings' | null
            /** @description 10-12 digit number to specify the bank account */
            account_number?: string | null
          }[]
        | null
    }
    GetDirectoryResponse: {
      paging?: components['schemas']['Paging']
      /** @description The array of employees. */
      individuals?: {
        /** @description A stable Finch id (UUID v4) for an individual in the company. */
        id?: string
        /** @description The legal first name of the individual. */
        first_name?: string | null
        /** @description The legal middle name of the individual. */
        middle_name?: string | null
        /** @description The legal last name of the individual. */
        last_name?: string | null
        /** @description The manager object. */
        manager?: {
          /** @description A stable Finch `id` (UUID v4) for an individual in the company. */
          id?: string
        } | null
        /** @description The department object. */
        department?: {
          /** @description The name of the department. */
          name?: string | null
        } | null
        /** @description `true` if the individual is an active employee or contractor at the company. */
        is_active?: boolean | null
      }[]
    }
    GetIndividualsResponse: {
      responses?: {
        individual_id?: string
        code?: number
        body?: {
          /** @description A stable Finch `id` (UUID v4) for an individual in the company. */
          id?: string
          /** @description The legal first name of the individual. */
          first_name?: string | null
          /** @description The legal middle name of the individual. */
          middle_name?: string | null
          /** @description The legal last name of the individual. */
          last_name?: string | null
          /** @description The preferred name of the individual. */
          preferred_name?: string | null
          emails?:
            | {
                data?: string
                /** @enum {string} */
                type?: 'work' | 'personal' | null
              }[]
            | null
          phone_numbers?:
            | ({
                data?: string | null
                /** @enum {string|null} */
                type?: 'work' | 'personal' | null
              } | null)[]
            | null
          /**
           * @description The gender of the individual.
           * @enum {string|null}
           */
          gender?: 'female' | 'male' | 'other' | 'decline_to_specify' | null
          /**
           * @description The EEOC-defined ethnicity of the individual.
           * @enum {string|null}
           */
          ethnicity?:
            | 'asian'
            | 'white'
            | 'black_or_african_american'
            | 'native_hawaiian_or_pacific_islander'
            | 'american_indian_or_alaska_native'
            | 'hispanic_or_latino'
            | 'two_or_more_races'
            | 'decline_to_specify'
            | null
          dob?: null | components['schemas']['Date']
          residence?: components['schemas']['Location']
          /** @description Social Security Number of the individual. This field is only available with the `ssn` scope enabled and the `options: { include: ['ssn'] }` param set in the body. */
          ssn?: string | null
          /** @description Social Security Number of the individual in **encrypted** format. This field is only available with the `ssn` scope enabled and the `options: { include: ['ssn'] }` param set in the body. */
          encrypted_ssn?: string | null
        }
      }[]
    }
    GetEmploymentResponse: {
      responses?: {
        individual_id?: string
        code?: number
        body?: {
          /** @description string	A stable Finch `id` (UUID v4) for an individual in the company. */
          id?: string
          /** @description The legal first name of the individual. */
          first_name?: string | null
          /** @description The legal middle name of the individual. */
          middle_name?: string | null
          /** @description The legal last name of the individual. */
          last_name?: string | null
          /** @description The current title of the individual. */
          title?: string | null
          /** @description The manager object representing the manager of the individual within the org. */
          manager?: {
            /** @description A stable Finch `id` (UUID v4) for an individual in the company. */
            id?: string
          } | null
          /** @description The department object. */
          department?: {
            /** @description The name of the department associated with the individual. */
            name?: string | null
          } | null
          /** @description The employment object. */
          employment?: {
            /**
             * @description The main employment type of the individual.
             * @enum {string|null}
             */
            type?: 'employee' | 'contractor' | null
            /**
             * @description 	The secondary employment type of the individual. Options: `full_time`, `part_time`, `intern`, `temp`, `seasonal` and `individual_contractor`.
             * @enum {string|null}
             */
            subtype?:
              | 'full_time'
              | 'intern'
              | 'part_time'
              | 'temp'
              | 'seasonal'
              | 'individual_contractor'
              | null
          } | null
          start_date?: components['schemas']['Date']
          end_date?: components['schemas']['Date']
          latest_rehire_date?: components['schemas']['Date']
          /** @description `true` if the individual an an active employee or contractor at the company. */
          is_active?: boolean | null
          /** @description Worker's compensation classification code for this employee */
          class_code?: string | null
          location?: components['schemas']['Location']
          income?: components['schemas']['Income']
          /** @description The array of income history. */
          income_history?: components['schemas']['Income'][] | null
          /** @description Custom fields for the individual. These are fields which are defined by the employer in the system. */
          custom_fields?:
            | {
                name?: string
                value?:
                  | string
                  | unknown[]
                  | Record<string, never>
                  | number
                  | boolean
                  | null
              }[]
            | null
          /** @description The source system's unique employment identifier for this individual */
          source_id?: string | null
          /** @description This field is deprecated in favour of `source_id` */
          work_id?: string | null
        }
      }[]
    }
    GetPaymentsResponse: {
      /** @description The unique id for the payment. */
      id?: string
      /** @description The pay period object. */
      pay_period?: {
        start_date?: components['schemas']['Date']
        end_date?: components['schemas']['Date']
      } | null
      pay_date?: components['schemas']['Date']
      debit_date?: components['schemas']['Date']
      company_debit?: components['schemas']['Money']
      gross_pay?: components['schemas']['Money']
      net_pay?: components['schemas']['Money']
      employer_taxes?: components['schemas']['Money']
      employee_taxes?: components['schemas']['Money']
      /** @description Array of every individual on this payment. */
      individual_ids?: string[] | null
    }[]
    /** Pay Statement */
    PayStatement: {
      /** @description A stable Finch `id` (UUID v4) for an individual in the company */
      individual_id?: string
      /**
       * @description The type of the payment associated with the pay statement.
       * @enum {string|null}
       */
      type?: 'regular_payroll' | 'off_cycle_payroll' | 'one_time_payment' | null
      /**
       * @description The payment method.
       * @enum {string|null}
       */
      payment_method?: 'check' | 'direct_deposit' | null
      /** @description The number of hours worked for this pay period */
      total_hours?: number | null
      gross_pay?: components['schemas']['Money']
      net_pay?: components['schemas']['Money']
      /** @description The array of earnings objects associated with this pay statement */
      earnings?:
        | ({
            /**
             * @description The type of earning.
             * @enum {string|null}
             */
            type?:
              | 'salary'
              | 'wage'
              | 'reimbursement'
              | 'overtime'
              | 'severance'
              | 'double_overtime'
              | 'pto'
              | 'sick'
              | 'bonus'
              | 'commission'
              | 'tips'
              | '1099'
              | 'other'
              | null
            /** @description The exact name of the deduction from the pay statement. */
            name?: string | null
            /** @description The earnings amount in cents. */
            amount?: number | null
            /** @description The earnings currency code. */
            currency?: string | null
            /** @description The number of hours associated with this earning. (For salaried employees, this could be hours per pay period, `0` or `null`, depending on the provider). */
            hours?: number | null
          } | null)[]
        | null
      /** @description The array of taxes objects associated with this pay statement. */
      taxes?:
        | ({
            /**
             * @description The type of taxes.
             * @enum {string|null}
             */
            type?: 'state' | 'federal' | 'local' | 'fica' | null
            /** @description The exact name of tax from the pay statement. */
            name?: string | null
            /** @description `true` if the amount is paid by the employers. */
            employer?: boolean | null
            /** @description The tax amount in cents. */
            amount?: number | null
            /** @description The currency code. */
            currency?: string | null
          } | null)[]
        | null
      /** @description The array of deductions objects associated with this pay statement. */
      employee_deductions?:
        | ({
            /** @description The deduction name from the pay statement. */
            name?: string | null
            /** @description The deduction amount in cents. */
            amount?: number | null
            /** @description The deduction currency. */
            currency?: string | null
            /** @description Boolean indicating if the deduction is pre-tax. */
            pre_tax?: boolean | null
            type?: components['schemas']['BenefitType']
          } | null)[]
        | null
      employer_contributions?:
        | ({
            /** @description The contribution name from the pay statement. */
            name?: string | null
            /** @description The contribution amount in cents. */
            amount?: number | null
            /** @description The contribution currency. */
            currency?: string | null
            type?: components['schemas']['BenefitType']
          } | null)[]
        | null
    }
    GetPayStatementsResponse: {
      responses?: {
        payment_id?: string
        code?: number
        body?: {
          paging?: components['schemas']['Paging']
          /** @description The array of pay statements for the current payment. */
          pay_statements?: components['schemas']['PayStatement'][]
        }
      }[]
    }
    GetAllPayGroupsResponse: {
      /**
       * Format: uuid
       * @description Finch id (uuidv4) for the pay group
       */
      id?: string
      /** @description Name of the pay group */
      name?: string
      /** @description List of pay frequencies associated with this pay group */
      pay_frequencies?: components['schemas']['PayFrequency'][]
    }[]
    GetPayGroupResponse: {
      /**
       * Format: uuid
       * @description Finch id (uuidv4) for the pay group
       */
      id?: string
      /** @description Name of the pay group */
      name?: string
      /** @description List of pay frequencies associated with this pay group */
      pay_frequencies?: components['schemas']['PayFrequency'][]
      individual_ids?: string[]
    }
    /** @enum {string} */
    PayFrequency:
      | 'annually'
      | 'semi_annually'
      | 'quarterly'
      | 'monthly'
      | 'semi_monthly'
      | 'bi_weekly'
      | 'weekly'
      | 'daily'
      | 'other'
    GetProvidersResponse: {
      /** @description The id of the payroll provider used in Connect. */
      id?: string
      /** @description The display name of the payroll provider. */
      display_name?: string
      /** @description The list of Finch products supported on this payroll provider. */
      products?: string[]
      /** @description The url to the official icon of the payroll provider. */
      icon?: string
      /** @description The url to the official logo of the payroll provider. */
      logo?: string
      /** @description whether MFA is required for the provider. */
      mfa_required?: boolean
      /** @description The hex code for the primary color of the payroll provider. */
      primary_color?: string
      /** @description [DEPRECATED] Whether the Finch integration with this provider uses the Assisted Connect Flow by default. This field is now deprecated. Please check for a `type` of `assisted` in the `authentication_methods` field instead. */
      manual?: boolean
      /** @description `true` if the integration is in a beta state, `false` otherwise */
      beta?: boolean
      /** @description The list of authentication methods supported by the provider. */
      authentication_methods?: components['schemas']['AuthenticationMethod'][]
    }[]
    GetIntrospectResponse: {
      /** @description The client id of the application associated with the `access_token`. */
      client_id?: string
      client_type?: components['schemas']['ClientType']
      connection_type?: components['schemas']['ConnectionType']
      /** @description The Finch uuid of the company associated with the `access_token`. */
      company_id?: string
      /** @description The Finch uuid of the account used to connect this company. */
      account_id?: string
      authentication_methods?: {
        type?: string
        connection_status?: {
          status?: components['schemas']['ConnectionStatus']
          message?: string
        }
      }[]
      /** @description An array of the authorized products associated with the `access_token`. */
      products?: string[]
      /** @description The account username used for login associated with the `access_token`. */
      username?: string
      /** @description The payroll provider associated with the `access_token`. */
      payroll_provider_id?: string
      /** @description Whether the connection associated with the `access_token` uses the Assisted Connect Flow. (`true` if using Assisted Connect, `false` if connection is automated) */
      manual?: boolean
    }
    DisconnectResponse: {
      /** @description If the request is successful, Finch will return “success” (HTTP 200 status). */
      status?: string
    }
    GetCompanyBenefitsResponse: components['schemas']['CompanyBenefit'][]
    CreateCompanyBenefitsResponse: {
      benefit_id?: string
    }
    RegisterCompanyBenefitsResponse: {
      benefit_id?: string
      job_id?: string
    }
    GetCompanyBenefitsMetadataResponse: {
      type?: components['schemas']['BenefitType']
      description?: string | null
      /** @description The list of frequencies supported by the provider for this benefit */
      frequencies?: components['schemas']['BenefitFrequency'][]
      /** @description Supported deduction types. An empty array indicates deductions are not supported. */
      employee_deduction?: ('fixed' | 'percent' | null)[] | null
      /** @description Supported contribution types. An empty array indicates contributions are not supported. */
      company_contribution?: ('fixed' | 'percent' | null)[] | null
      /** @description Whether the provider supports an annual maximum for this benefit. */
      annual_maximum?: boolean | null
      /** @description Whether the provider supports catch up for this benefit. This field will only be true for retirement benefits. */
      catch_up?: boolean | null
      /** @description Whether the provider supports HSA contribution limits. Empty if this feature is not supported for the benefit. This array only has values for HSA benefits. */
      hsa_contribution_limit?: ('individual' | 'family' | null)[] | null
    }[]
    UpdateCompanyBenefitResponse: {
      benefit_id?: string
    }
    GetCompanyBenefitEnrolledIndividualsResponse: {
      benefit_id?: string
      individual_ids?: string[]
    }
    EnrollIndividualBenefitResponse: {
      individual_id?: string
      /**
       * @description HTTP status code. Either 201 or 200
       * @enum {integer}
       */
      code?: 200 | 201 | 404 | 403
      body?: {
        /** @description Identifier indicating whether the benefit was newly enrolled or updated. */
        name?: string | null
        /** @description A descriptive identifier for the response */
        finch_code?: string | null
        /** @description Short description in English that provides more information about the response. */
        message?: string | null
      }
    }[]
    UnenrollIndividualBenefitResponse: OneOf<
      [
        {
          job_id?: string
        },
        {
          individual_id?: string
          /** @description HTTP status code */
          code?: number
          body?: {
            /** @description Identifier indicating whether the benefit was newly enrolled or updated. */
            name?: string | null
            /** @description A descriptive identifier for the response. */
            finch_code?: string | null
            /** @description Short description in English that provides more information about the response. */
            message?: string | null
          }
        }[],
      ]
    >
    /** Location */
    Location: {
      /** @description Street address or PO box. */
      line1?: string | null
      /** @description Apartment, suite, unit, or building. */
      line2?: string | null
      /** @description City, district, suburb, town, or village. */
      city?: string | null
      /** @description The state code. */
      state?: string | null
      /** @description The postal code or zip code. */
      postal_code?: string | null
      /** @description The 2-letter ISO 3166 country code. */
      country?: string | null
      name?: string | null
      source_id?: string | null
    } | null
    /**
     * Income
     * @description The employee's income as reported by the provider. This may not always be annualized income, but may be in units of bi-weekly, semi-monthly, daily, etc, depending on what information the provider returns.
     */
    Income: {
      /**
       * @description The income unit of payment. Options: `yearly`, `quarterly`, `monthly`, `semi_monthly`, `bi_weekly`, `weekly`, `daily`, `hourly`, and `fixed`.
       * @enum {string|null}
       */
      unit?:
        | 'yearly'
        | 'quarterly'
        | 'monthly'
        | 'semi_monthly'
        | 'bi_weekly'
        | 'weekly'
        | 'daily'
        | 'hourly'
        | 'fixed'
        | null
      /** @description The income amount in cents. */
      amount?: number | null
      /** @description The currency code. */
      currency?: string | null
      /** @description The date the income amount went into effect. */
      effective_date?: string | null
    } | null
    /** Money */
    Money: {
      /** @description Amount for money object (in cents) */
      amount?: number | null
      currency?: string
    } | null
    /** Paging */
    Paging: {
      /** @description The total number of elements for the entire query (not just the given page) */
      count?: number
      /** @description The current start index of the returned list of elements */
      offset?: number
    }
    /** Date */
    Date: string | null
    /**
     * BenefitType
     * @description Type of benefit.
     * @enum {string|null}
     */
    BenefitType:
      | '401k'
      | '401k_roth'
      | '401k_loan'
      | '403b'
      | '403b_roth'
      | '457'
      | '457_roth'
      | 's125_medical'
      | 's125_dental'
      | 's125_vision'
      | 'hsa_pre'
      | 'hsa_post'
      | 'fsa_medical'
      | 'fsa_dependent_care'
      | 'simple_ira'
      | 'simple'
      | 'commuter'
      | 'custom_post_tax'
      | 'custom_pre_tax'
      | null
    /**
     * BenefitDescription
     * @description Name of the benefit as it appears in the provider and pay statements. Recommend limiting this to <30 characters due to limitations in specific providers (e.g. Justworks).
     */
    BenefitDescription: string
    /**
     * BenefitFrequency
     * @enum {string|null}
     */
    BenefitFrequency: 'one_time' | 'every_paycheck' | 'monthly' | null
    /** BenefitContribution */
    BenefitContribution: {
      /**
       * @description Contribution type.
       * @enum {string|null}
       */
      type?: 'fixed' | 'percent' | null
      /** @description Contribution amount in cents (if `fixed`) or basis points (if `percent`). */
      amount?: number | null
    } | null
    /** BenefitFeature */
    BenefitFeature: {
      description?: string | null
      /** @description The list of frequencies supported by the provider for this benefit */
      frequencies?: components['schemas']['BenefitFrequency'][]
      /** @description Supported deduction types. An empty array indicates deductions are not supported. */
      employee_deduction?: ('fixed' | 'percent' | null)[] | null
      /** @description Supported contribution types. An empty array indicates contributions are not supported. */
      company_contribution?: ('fixed' | 'percent' | null)[] | null
      /** @description Whether the provider supports an annual maximum for this benefit. */
      annual_maximum?: boolean | null
      /** @description Whether the provider supports catch up for this benefit. This field will only be true for retirement benefits. */
      catch_up?: boolean | null
      /** @description Whether the provider supports HSA contribution limits. Empty if this feature is not supported for the benefit. This array only has values for HSA benefits. */
      hsa_contribution_limit?: ('individual' | 'family' | null)[] | null
    }
    /**
     * ClientType
     * @description The type of application associated with a token.
     * @enum {string}
     */
    ClientType: 'production' | 'development' | 'sandbox'
    /**
     * ConnectionType
     * @description The type of the connection associated with the token.
     * - `provider` - connection to an external provider
     * - `finch` - finch-generated data.
     * @enum {string}
     */
    ConnectionType: 'provider' | 'finch'
    /** CompanyBenefit */
    CompanyBenefit: {
      benefit_id?: string
      type?: components['schemas']['BenefitType']
      description?: string | null
      frequency?: components['schemas']['BenefitFrequency']
    }
    /** IndividualBenefits */
    IndividualBenefits: {
      individual_id?: string
      code?: number
      body?: {
        employee_deduction?: components['schemas']['BenefitContribution']
        company_contribution?: components['schemas']['BenefitContribution']
        /** @description If the benefit supports annual maximum, the amount in cents for this individual. */
        annual_maximum?: number | null
        /** @description If the benefit supports catch up (401k, 403b, etc.), whether catch up is enabled for this individual. */
        catch_up?: boolean | null
        /**
         * @description Type for HSA contribution limit if the benefit is a HSA.
         * @enum {string|null}
         */
        hsa_contribution_limit?: 'individual' | 'family' | null
      }
    }[]
    BenefitFeaturesAndOperations: {
      supported_features?: components['schemas']['BenefitFeature']
      supported_operations?: components['schemas']['SupportPerBenefitType']
    } | null
    /** @description Each benefit type and their supported features. If the benefit type is not supported, the property will be null */
    BenefitsSupport: {
      457?: components['schemas']['BenefitFeaturesAndOperations']
      '401k'?: components['schemas']['BenefitFeaturesAndOperations']
      '401k_roth'?: components['schemas']['BenefitFeaturesAndOperations']
      '401k_loan'?: components['schemas']['BenefitFeaturesAndOperations']
      '403b'?: components['schemas']['BenefitFeaturesAndOperations']
      '403b_roth'?: components['schemas']['BenefitFeaturesAndOperations']
      '457_roth'?: components['schemas']['BenefitFeaturesAndOperations']
      s125_medical?: components['schemas']['BenefitFeaturesAndOperations']
      s125_dental?: components['schemas']['BenefitFeaturesAndOperations']
      s125_vision?: components['schemas']['BenefitFeaturesAndOperations']
      hsa_pre?: components['schemas']['BenefitFeaturesAndOperations']
      hsa_post?: components['schemas']['BenefitFeaturesAndOperations']
      fsa_medical?: components['schemas']['BenefitFeaturesAndOperations']
      fsa_dependent_care?: components['schemas']['BenefitFeaturesAndOperations']
      simple_ira?: components['schemas']['BenefitFeaturesAndOperations']
      simple?: components['schemas']['BenefitFeaturesAndOperations']
      commuter?: components['schemas']['BenefitFeaturesAndOperations']
      custom_post_tax?: components['schemas']['BenefitFeaturesAndOperations']
      custom_pre_tax?: components['schemas']['BenefitFeaturesAndOperations']
    } | null
    AuthenticationMethod: {
      /**
       * @description The type of authentication method.
       * @enum {string}
       */
      type?:
        | 'assisted'
        | 'credential'
        | 'api_token'
        | 'api_credential'
        | 'oauth'
      benefits_support?: components['schemas']['BenefitsSupport']
      supported_fields?: components['schemas']['SupportedFields']
    }
    /** @description The supported data fields returned by our HR and payroll endpoints */
    SupportedFields: {
      company?: components['schemas']['SupportedCompanyFields']
      directory?: components['schemas']['SupportedDirectoryFields']
      individual?: components['schemas']['SupportedIndividualFields']
      employment?: components['schemas']['SupportedEmploymentFields']
      payment?: components['schemas']['SupportedPaymentFields']
      pay_statement?: components['schemas']['SupportedPayStatementFields']
    } | null
    SupportedCompanyFields: {
      id?: boolean
      legal_name?: boolean
      entity?: {
        type?: boolean
        subtype?: boolean
      }
      primary_email?: boolean
      primary_phone_number?: boolean
      ein?: boolean
      accounts?: {
        routing_number?: boolean
        account_name?: boolean
        institution_name?: boolean
        account_type?: boolean
        account_number?: boolean
      }
      departments?: {
        name?: boolean
        parent?: {
          name?: boolean
        }
      }
      locations?: {
        line1?: boolean
        line2?: boolean
        city?: boolean
        state?: boolean
        postal_code?: boolean
        country?: boolean
      }
    }
    SupportedDirectoryFields: {
      paging?: {
        count?: boolean
        offset?: boolean
      }
      individuals?: {
        id?: boolean
        first_name?: boolean
        middle_name?: boolean
        last_name?: boolean
        is_active?: boolean
        department?: boolean
        manager?: {
          id?: boolean
        }
      }
    }
    SupportedIndividualFields: {
      id?: boolean
      first_name?: boolean
      middle_name?: boolean
      last_name?: boolean
      preferred_name?: boolean
      dob?: boolean
      gender?: boolean
      ethnicity?: boolean
      ssn?: boolean
      encrypted_ssn?: boolean
      emails?: {
        data?: boolean
        type?: boolean
      }
      phone_numbers?: {
        data?: boolean
        type?: boolean
      }
      residence?: {
        city?: boolean
        country?: boolean
        line1?: boolean
        line2?: boolean
        postal_code?: boolean
        state?: boolean
      }
    }
    SupportedEmploymentFields: {
      id?: boolean
      first_name?: boolean
      middle_name?: boolean
      last_name?: boolean
      title?: boolean
      start_date?: boolean
      end_date?: boolean
      is_active?: boolean
      income_history?: boolean
      class_code?: boolean
      custom_fields?: boolean
      department?: {
        name?: boolean
      }
      employment?: {
        type?: boolean
        subtype?: boolean
      }
      income?: {
        amount?: boolean
        currency?: boolean
        unit?: boolean
      }
      location?: {
        line1?: boolean
        line2?: boolean
        city?: boolean
        state?: boolean
        postal_code?: boolean
        country?: boolean
      }
      manager?: {
        id?: boolean
      }
    }
    SupportedPaymentFields: {
      id?: boolean
      pay_date?: boolean
      debit_date?: boolean
      company_debit?: boolean
      gross_pay?: boolean
      net_pay?: boolean
      employer_taxes?: boolean
      employee_taxes?: boolean
      individual_ids?: boolean
      pay_period?: {
        start_date?: boolean
        end_date?: boolean
      }
    }
    SupportedPayStatementFields: {
      paging?: {
        count: boolean
        offset: boolean
      }
      pay_statements?: {
        individual_id?: boolean
        type?: boolean
        payment_method?: boolean
        total_hours?: boolean
        gross_pay?: boolean
        net_pay?: boolean
        earnings?: {
          type?: boolean
          name?: boolean
          amount?: boolean
          currency?: boolean
        }
        employee_deductions?: {
          name?: boolean
          amount?: boolean
          type?: boolean
          pre_tax?: boolean
          currency?: boolean
        }
        employer_contributions?: {
          name?: boolean
          amount?: boolean
          currency?: boolean
        }
        /**
         * @deprecated
         * @description [DEPRECATED] Use `employer_contributions` instead
         */
        employer_deductions?: {
          name?: boolean
          amount?: boolean
          currency?: boolean
        }
        taxes?: {
          type?: boolean
          name?: boolean
          employer?: boolean
          amount?: boolean
          currency?: boolean
        }
      }
    }
    /**
     * @description - `supported`: This operation is supported by both the provider and Finch
     * - `not_supported_by_finch`: This operation is not supported by Finch but supported by the provider
     * - `not_supported_by_provider`: This operation is not supported by the provider, so Finch cannot support
     * - `client_access_only`: This behavior is supported by the provider, but only available to the client and not to Finch
     * @enum {string}
     */
    OperationSupport:
      | 'supported'
      | 'not_supported_by_finch'
      | 'not_supported_by_provider'
      | 'client_access_only'
    OperationSupportMatrix: {
      create?: components['schemas']['OperationSupport']
      update?: components['schemas']['OperationSupport']
      delete?: components['schemas']['OperationSupport']
      read?: components['schemas']['OperationSupport']
    }
    /** SupportPerBenefitType */
    SupportPerBenefitType: {
      company_benefits?: components['schemas']['OperationSupportMatrix']
      individual_benefits?: components['schemas']['OperationSupportMatrix']
    }
    /**
     * Error
     * @description Generic error response structure
     */
    Error: {
      /** @description The status code of the request. */
      code?: number
      /** @description Identifier describing the error. */
      name?: string
      /** @description A descriptive identifier for the error. */
      finch_code?: string
      /** @description A short English description that provides more information about the error. */
      message?: string
    }
  }
  responses: never
  parameters: {
    /** @description Header used to specify the version for a given API request. Current version is 2020-09-17. */
    'API-Version': string
    /** @description Used to indicate the original media type of the resource */
    'Content-Type': string
  }
  requestBodies: {
    'Individual-Ids'?: {
      content: {
        'application/json': {
          /** @description The array of batch requests. */
          requests: {
            /** @description A stable Finch `id` (UUID v4) for an individual in the company. There is no limit to the number of `individual_id` to send per request. It is preferantial to send all ids in a single request for Finch to optimize provider rate-limits. */
            individual_id: string
          }[]
        }
      }
    }
    Individual?: {
      content: {
        'application/json': {
          requests?: {
            individual_id?: string
          }[]
          options?: {
            include?: string[]
          } | null
        }
      }
    }
    Forward?: {
      content: {
        'application/json': {
          /** @description The HTTP method for the forwarded request. Valid values include: `GET` , `POST` , `PUT` , `DELETE` , and `PATCH`. */
          method: string
          /** @description The URL route path for the forwarded request. This value must begin with a forward-slash ( / ) and may only contain alphanumeric characters, hyphens, and underscores. */
          route: string
          /** @description The HTTP headers to include on the forwarded request. This value must be specified as an object of key-value pairs. Example: `{"Content-Type": "application/xml", "X-API-Version": "v1" }` */
          headers?: unknown
          /** @description The query parameters for the forwarded request. This value must be specified as a valid JSON object rather than a query string. */
          params?: unknown
          /** @description The body for the forwarded request. This value must be specified as either a string or a valid JSON object. */
          data?: string | null
        }
      }
    }
  }
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * Company
   * @description Read basic company data
   */
  'get-company': {
    responses: {
      /** @description Basic company data */
      200: {
        content: {
          'application/json': components['schemas']['GetCompanyResponse']
        }
      }
    }
  }
  /**
   * Directory
   * @description Read company directory and organization structure
   */
  'get-directory': {
    parameters: {
      query?: {
        /** @description Number of employees to return (defaults to all) */
        limit?: number
        /** @description Index to start from (defaults to 0) */
        offset?: number
      }
    }
    responses: {
      /** @description Company directory and organization structure */
      200: {
        content: {
          'application/json': components['schemas']['GetDirectoryResponse']
        }
      }
    }
  }
  /**
   * Individual
   * @description Read individual data, excluding income and employment data
   */
  'get-individual': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody: components['requestBodies']['Individual']
    responses: {
      /** @description Individual data */
      200: {
        content: {
          'application/json': components['schemas']['GetIndividualsResponse']
        }
      }
    }
  }
  /**
   * Employment
   * @description Read individual employment and income data
   */
  'get-employment': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody: components['requestBodies']['Individual-Ids']
    responses: {
      /** @description Employment data */
      200: {
        content: {
          'application/json': components['schemas']['GetEmploymentResponse']
        }
      }
    }
  }
  /**
   * Payment
   * @description Read payroll and contractor related payments by the company.
   */
  'get-payment': {
    parameters: {
      query: {
        /** @description The start date to retrieve payments by a company (inclusive) in `YYYY-MM-DD` format. */
        start_date: string
        /** @description The end date to retrieve payments by a company (inclusive) in `YYYY-MM-DD` format. */
        end_date: string
      }
    }
    responses: {
      /** @description Payment data */
      200: {
        content: {
          'application/json': components['schemas']['GetPaymentsResponse']
        }
      }
    }
  }
  /**
   * Pay Statement
   * @description Read detailed pay statements for each individual.
   *
   * Deduction and contribution types are supported by the payroll systems that supports Benefits.
   */
  'get-pay-statement': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description The array of batch requests. */
          requests: {
            /** @description A stable Finch `id` (UUID v4) for a payment. */
            payment_id: string
            /** @description Number of pay statements to return (defaults to all). */
            limit?: number
            /** @description Index to start from. */
            offset?: number
          }[]
        }
      }
    }
    responses: {
      /** @description Pay statement data */
      200: {
        content: {
          'application/json': components['schemas']['GetPayStatementsResponse']
        }
      }
    }
  }
  /**
   * Get All Pay Groups
   * @description Read company pay groups and frequencies
   */
  'get-all-pay-groups': {
    parameters: {
      query?: {
        individual_id?: string
        pay_frequencies?: string[]
      }
    }
    responses: {
      /** @description Company pay groups */
      200: {
        content: {
          'application/json': components['schemas']['GetAllPayGroupsResponse']
        }
      }
    }
  }
  /**
   * Get Pay Group
   * @description Read information from a single pay group
   */
  'get-pay-group': {
    parameters: {
      path: {
        pay_group_id: string
      }
    }
    responses: {
      /** @description Pay group data */
      200: {
        content: {
          'application/json': components['schemas']['GetPayGroupResponse']
        }
      }
    }
  }
  /**
   * Get All Deductions
   * @description List all company-wide deductions and contributions.
   */
  'get-company-benefits': {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GetCompanyBenefitsResponse']
        }
      }
    }
  }
  /**
   * Create Deduction
   * @description Creates a new company-wide deduction or contribution. Please use the `/providers` endpoint to view available types for each provider.
   */
  'create-company-benefits': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          type?: components['schemas']['BenefitType']
          description?: components['schemas']['BenefitDescription']
          frequency?: components['schemas']['BenefitFrequency']
        }
      }
    }
    responses: {
      /** @description Successfully Created */
      201: {
        content: {
          'application/json': components['schemas']['CreateCompanyBenefitsResponse']
        }
      }
      /** @description Malformed Request */
      400: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Request provided with unsupported parameters */
      422: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * Register Deduction
   * @description Register existing benefits from the customer on the provider, on Finch's end. Please use the `/provider` endpoint to view available types for each provider.
   */
  'register-company-benefits': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          type?: components['schemas']['BenefitType']
          description?: string
          frequency?: components['schemas']['BenefitFrequency']
        }
      }
    }
    responses: {
      /** @description Successfully Created */
      201: {
        content: {
          'application/json': components['schemas']['RegisterCompanyBenefitsResponse']
        }
      }
      /** @description Requested adapter is not assisted benefits */
      400: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Request provided with unsupported parameters */
      422: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * [Deprecated] Get Deductions Metadata
   * @description Get deductions metadata
   */
  'get-company-benefits-meta': {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GetCompanyBenefitsMetadataResponse']
        }
      }
    }
  }
  /**
   * Get Deduction
   * @description Lists deductions and contributions information for a given item
   */
  'get-company-benefit': {
    parameters: {
      path: {
        benefit_id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CompanyBenefit']
        }
      }
      /** @description Benefit Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * Update Deduction
   * @description Updates an existing company-wide deduction or contribution
   */
  'update-company-benefits': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
      path: {
        benefit_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description Updated name or description. */
          description?: string
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['UpdateCompanyBenefitResponse']
        }
      }
      /** @description Bad Request */
      400: {
        content: never
      }
      /** @description Benefit Not Found */
      404: {
        content: never
      }
    }
  }
  /**
   * Get Enrolled Individuals
   * @description Lists individuals currently enrolled in a given deduction.
   */
  'get-company-benefits-enrolled': {
    parameters: {
      path: {
        benefit_id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GetCompanyBenefitEnrolledIndividualsResponse']
        }
      }
      /** @description Benefit Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * Get Deductions for Individuals
   * @description Get enrollment information for the given individuals.
   */
  'get-individual-benefits': {
    parameters: {
      query?: {
        /** @description comma-delimited list of stable Finch uuids for each individual. If empty, defaults to all individuals */
        individual_ids?: string
      }
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
      path: {
        benefit_id: string
      }
    }
    responses: {
      /** @description Multi-Status (WebDAV) */
      207: {
        content: {
          'application/json': components['schemas']['IndividualBenefits']
        }
      }
      /** @description Benefit Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * Enroll Individuals in Deductions
   * @description Enroll an individual into a deduction or contribution. This is an overwrite operation. If the employee is already enrolled, the enrollment amounts will be adjusted. Making the same request multiple times will not create new enrollments, but will continue to set the state of the existing enrollment.
   */
  'post-employer-individual-benefits-benefit_id': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
      path: {
        benefit_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description Finch id (uuidv4) for the individual to enroll */
          individual_id?: string
          configuration?: Record<string, never>
        }[]
      }
    }
    responses: {
      /** @description Success for all individuals. Enrolled new individuals in the benefit and upserted information for individuals already enrolled. */
      200: {
        content: {
          'application/json': components['schemas']['EnrollIndividualBenefitResponse']
        }
      }
      /** @description Multi-Status. Some individuals may not have succeeded. See body for details. */
      207: {
        content: {
          'application/json': components['schemas']['EnrollIndividualBenefitResponse']
        }
      }
      /** @description Malformed Request */
      400: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Benefit Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
      /** @description Unprocessable Request */
      422: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * Unenroll Individuals from Deductions
   * @description Unenroll individuals from a deduction or contribution
   */
  'delete-individual-benefits': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
      path: {
        benefit_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description Array of individual_ids to unenroll. */
          individual_ids?: string[]
        }
      }
    }
    responses: {
      /** @description Success for all individuals. Unenrolled all individuals from the benefit. */
      200: {
        content: {
          'application/json': components['schemas']['UnenrollIndividualBenefitResponse']
        }
      }
      /** @description Multi-Status. Some individuals may not have succeeded. See body for details. */
      207: {
        content: {
          'application/json': components['schemas']['UnenrollIndividualBenefitResponse']
        }
      }
      /** @description Benefit Not Found */
      404: {
        content: {
          'application/json': components['schemas']['Error']
        }
      }
    }
  }
  /**
   * Create Access Token
   * @description Exchange the authorization code for an access token
   */
  'create-access-token': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * Format: uuid
           * @example 6d28c315-5eaa-4071-8ea5-f030eb45edbc
           */
          client_id: string
          /** @example <your_client_secret> */
          client_secret: string
          /** @example <your_authorization_code> */
          code: string
          /** @example https://example.com */
          redirect_uri?: string
        }
      }
    }
    responses: {
      /** @description Access Token */
      200: {
        content: {
          'application/json': components['schemas']['CreateAccessTokenResponse']
        }
      }
    }
  }
  /**
   * Providers
   * @description Return details on all available payroll and HR systems.
   */
  'get-providers': {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GetProvidersResponse']
        }
      }
    }
  }
  /**
   * Introspect
   * @description Read account information associated with an `access_token`
   */
  'get-introspect': {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GetIntrospectResponse']
        }
      }
    }
  }
  /**
   * Disconnect
   * @description Disconnect one or more `access_token`s from your application.
   */
  'post-disconnect': {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['DisconnectResponse']
        }
      }
    }
  }
  /**
   * Request Forwarding
   * @description The Forward API allows you to make direct requests to an employment system. If Finch’s unified API
   * doesn’t have a data model that cleanly fits your needs, then Forward allows you to push or pull
   * data models directly against an integration’s API.
   */
  'post-forward': {
    requestBody: components['requestBodies']['Forward']
    responses: {
      /** @description Successful response */
      200: {
        content: {
          'application/json': {
            /** @description The HTTP headers of the forwarded request’s response, exactly as received from the underlying integration’s API. */
            headers: unknown
            /** @description The HTTP status code of the forwarded request’s response, exactly received from the underlying integration’s API. This value will be returned as an integer. */
            statusCode: number
            /** @description A string representation of the HTTP response body of the forwarded request’s response received from the underlying integration’s API. This field may be null in the case where the upstream system’s response is empty. */
            data: string | null
            /** @description An object containing details of your original forwarded request, for your ease of reference. */
            request: {
              /** @description The HTTP method that was specified for the forwarded request. Valid values include: `GET` , `POST` , `PUT` , `DELETE` , and `PATCH`. */
              method: string
              /** @description The URL route path that was specified for the forwarded request. */
              route: string
              /** @description The specified HTTP headers that were included in the forwarded request. If no headers were specified, this will be returned as `null`. */
              headers: unknown
              /** @description The query parameters that were included in the forwarded request. If no query parameters were specified, this will be returned as `null`. */
              params: unknown
              /** @description The body that was specified for the forwarded request. If a value was not specified in the original request, this value will be returned as null ; otherwise, this value will always be returned as a string. */
              data: string | null
            }
          }
        }
      }
    }
  }
  /**
   * List All Automated Jobs
   * @description Get all automated jobs. Automated jobs are completed by a machine. By default, jobs are sorted in descending order by submission time. For scheduled jobs such as data syncs, only the next scheduled job is shown.
   */
  'get-jobs-automated': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /** @description The number of items to return. Defaults to 100. */
          limit?: number
          /** @description Where in the list of jobs to start returning from. Defaults to index 0. */
          offset?: number
        }
      }
    }
    responses: {
      /** @description Job was found */
      200: {
        content: {
          'application/json': {
            ''?: components['schemas']['Paging']
            meta?: {
              /** @description Information about remaining quotas for this connection. Only applicable for customers opted in to use Finch's Data Sync Refresh endpoint (`POST /jobs/automated`). Please contact a Finch representative for more details. */
              quotas?: {
                data_sync_all?: {
                  allowed_refreshes?: number
                  remaining_refreshes?: number
                }
              }
            }
            data?: components['schemas']['AutomatedAsyncJob'][]
          }
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': {
            statusCode?: number
            status?: number
            code?: number
            name?: string
            message?: string
          }
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': {
            statusCode?: number
            status?: number
            code?: number
            name?: string
            message?: string
          }
        }
      }
    }
  }
  /**
   * Enqueue a New Automated Job
   * @description Enqueue an automated job. Currently, only the `data_sync_all` job type is supported, which will enqueue a job to re-sync all data for a connection. `data_sync_all` has a concurrency limit of 1 job at a time per connection. This means that if this endpoint is called while a job is already in progress for this connection, Finch will return the `job_id` of the job that is currently in progress. Finch allows a fixed window rate limit of 1 forced refresh per hour per connection.
   *
   * This endpoint is available for *Scale* tier customers as an add-on. To request access to this endpoint, please contact your Finch account manager.
   */
  'post-jobs-automated': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          /**
           * @description The type of job to start. Currently the only supported type is `data_sync_all`
           * @enum {string}
           */
          type: 'data_sync_all'
        }
        'application/xml': Record<string, never>
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The id of the job that has been created.
             */
            job_id?: string
            /** @description The url that can be used to retrieve the job status */
            job_url?: string
            /** @description The number of allowed refreshes per hour (per hour, fixed window) */
            allowed_refreshes?: number
            /** @description The number of remaining refreshes available (per hour, fixed window) */
            remaining_refreshes?: number
          }
          'application/xml': Record<string, never>
        }
      }
      /** @description Accepted. This response will be returned if a job is already enqueued for the connection. This case does not consume any job quota as it just returns the details of an existing job. */
      202: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The id of the job that has been created.
             */
            job_id?: string
            /** @description The url that can be used to retrieve the job status */
            job_url?: string
            /** @description The number of allowed refreshes per hour (per hour, fixed window) */
            allowed_refreshes?: number
            /** @description The number of remaining refreshes available (per hour, fixed window) */
            remaining_refreshes?: number
          }
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': {
            statusCode?: number
            status?: number
            code?: number
            message?: string
            name?: string
          }
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': {
            statusCode?: number
            status?: number
            code?: number
            name?: string
            message?: string
          }
        }
      }
      /** @description Too Many Requests */
      429: {
        content: {
          'application/json': {
            /** @description The number of allowed refreshes per hour (per hour, fixed window) */
            allowed_refreshes?: number
            /** @description The number of remaining refreshes available (per hour, fixed window) */
            remaining_refreshes?: number
            /**
             * Format: date-time
             * @description The datetime when quota for enqueuing new jobs will again be available. Only shown for a 429 response.
             */
            retry_at?: string
          }
        }
      }
    }
  }
  /**
   * Retrieve an Automated Job
   * @description Get an automated job by `job_id`.
   */
  'get-jobs-job_id': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
      path: {
        job_id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['AutomatedAsyncJob']
        }
      }
      /** @description Not Found */
      404: {
        content: never
      }
    }
  }
  /**
   * Retrieve a Manual Job
   * @description Get a manual job by `job_id`. Manual jobs are completed by a human and include Assisted Benefits jobs.
   */
  'get-jobs-manual-job_id': {
    parameters: {
      header: {
        'Content-Type': components['parameters']['Content-Type']
      }
      path: {
        job_id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['ManualAsyncJob']
        }
      }
      /** @description Bad Request */
      400: {
        content: {
          'application/json': {
            code?: number
            finch_code?: string
            name?: string
            message?: string
          }
        }
      }
      /** @description Not Found */
      404: {
        content: {
          'application/json': {
            code?: number
            finch_code?: string
            name?: string
            message?: string
          }
        }
      }
    }
  }
  /**
   * Create a new Sandbox Connection
   * @description Create a new connection (new company/provider pair) with a new account
   */
  'post-sandbox-connections': {
    requestBody?: {
      content: {
        'application/json': {
          provider_id: string
          authentication_type?: components['schemas']['AuthenticationType']
          products?: string[]
          /** @description Optional: the size of the employer to be created with this connection. Defaults to 20. Note that if this is higher than 100, historical payroll data will not be generated, and instead only one pay period will be created. */
          employee_size?: number
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            /** Format: uuid */
            company_id: string
            /** Format: uuid */
            provider_id: string
            /** Format: uuid */
            account_id: string
            authentication_type: components['schemas']['AuthenticationType']
            products: string[]
            /** Format: uuid */
            access_token: string
          }
        }
      }
    }
  }
  /**
   * Update a sandbox account
   * @description Update an existing sandbox account. Change the connection status to understand how the Finch API responds.
   */
  'put-sandbox-connections-accounts': {
    requestBody?: {
      content: {
        'application/json': {
          connection_status?: components['schemas']['ConnectionStatus']
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            account_id: string
            authentication_type: components['schemas']['AuthenticationType']
            /** Format: uuid */
            company_id: string
            provider_id: string
            products: string[]
          }
        }
      }
    }
  }
  /**
   * Create a new sandbox account
   * @description Create a new account for an existing connection (company/provider pair)
   */
  'post-sandbox-connections-accounts': {
    requestBody?: {
      content: {
        'application/json': {
          /** Format: uuid */
          company_id: string
          provider_id: string
          authentication_type?: components['schemas']['AuthenticationType']
          /** @description Optional, defaults to Organization products (`company`, `directory`, `employment`, `individual`) */
          products?: string[]
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            /** Format: uuid */
            company_id: string
            provider_id: string
            /** Format: uuid */
            account_id: string
            authentication_type: components['schemas']['AuthenticationType']
            products: string[]
            /** Format: uuid */
            access_token: string
          }
        }
      }
    }
  }
  /** Update a sandbox company's data */
  'put-sandbox-company': {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CompanyWithoutId']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CompanyWithoutId']
        }
      }
    }
  }
  /** Add new individuals to a sandbox company */
  'post-sandbox-directory': {
    requestBody?: {
      content: {
        'application/json': (components['schemas']['IndividualWithoutId'] &
          components['schemas']['EmploymentWithoutId'])[]
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': Record<string, never>[]
        }
      }
    }
  }
  /** Update sandbox individual */
  'put-sandbox-individual-individual_id': {
    parameters: {
      path: {
        individual_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['IndividualWithoutId']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Individual']
        }
      }
    }
  }
  /** Update sandbox employment */
  'put-sandbox-employment-individual_id': {
    parameters: {
      path: {
        individual_id: string
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['EmploymentWithoutId']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['Employment']
        }
      }
    }
  }
  /** Add a new sandbox payment */
  'post-sandbox-payment': {
    requestBody?: {
      content: {
        'application/json': {
          start_date?: string
          end_date?: string
          pay_statements?: components['schemas']['PayStatement'][]
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PaymentIdentifiers']
        }
      }
    }
  }
  /** Enqueue a new sandbox job */
  'post-sandbox-job': {
    requestBody?: {
      content: {
        'application/json': {
          /**
           * @description The type of job to start. Currently the only supported type is `data_sync_all`
           * @enum {string}
           */
          type: 'data_sync_all'
        }
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': {
            /**
             * Format: uuid
             * @description The id of the job that has been created.
             */
            job_id?: string
            /** @description The url that can be used to retrieve the job status */
            job_url?: string
            /** @description The number of allowed refreshes per hour (per hour, fixed window) */
            allowed_refreshes?: number
            /** @description The number of remaining refreshes available (per hour, fixed window) */
            remaining_refreshes?: number
          }
        }
      }
    }
  }
  /** Get configurations for sandbox jobs */
  'get-sandbox-jobs-configuration': {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['SandboxJobConfiguration'][]
        }
      }
    }
  }
  /** Update configurations for sandbox jobs */
  'put-sandbox-jobs-configuration': {
    requestBody?: {
      content: {
        'application/json': components['schemas']['SandboxJobConfiguration']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['SandboxJobConfiguration']
        }
      }
    }
  }
}

export interface oasTypes {
  components: components
  external: external
  operations: operations
  paths: paths
  webhooks: webhooks
}

export default oasTypes
